// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ShipmentOrders_import_fulljob_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: ShipmentOrders_SO_Import_FullJob Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.0.0.20150702_1326
 * @status 
 */
public class ShipmentOrders_SO_Import_FullJob implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (STORERKEY != null) {

				this.setProperty("STORERKEY", STORERKEY.toString());

			}

			if (DISTRIBUTIONLISTID != null) {

				this.setProperty("DISTRIBUTIONLISTID",
						DISTRIBUTIONLISTID.toString());

			}

			if (MAPPEDSCHEMA != null) {

				this.setProperty("MAPPEDSCHEMA", MAPPEDSCHEMA.toString());

			}

			if (SAP_DB_HOST != null) {

				this.setProperty("SAP_DB_HOST", SAP_DB_HOST.toString());

			}

			if (SAP_DB_NAME != null) {

				this.setProperty("SAP_DB_NAME", SAP_DB_NAME.toString());

			}

			if (SAP_DB_PASSWORD != null) {

				this.setProperty("SAP_DB_PASSWORD", SAP_DB_PASSWORD.toString());

			}

			if (SAP_DB_PORT != null) {

				this.setProperty("SAP_DB_PORT", SAP_DB_PORT.toString());

			}

			if (SAP_DB_SCHEMA != null) {

				this.setProperty("SAP_DB_SCHEMA", SAP_DB_SCHEMA.toString());

			}

			if (SAP_DB_USER != null) {

				this.setProperty("SAP_DB_USER", SAP_DB_USER.toString());

			}

			if (SIP_DB_DBNAME != null) {

				this.setProperty("SIP_DB_DBNAME", SIP_DB_DBNAME.toString());

			}

			if (SIP_DB_HOST != null) {

				this.setProperty("SIP_DB_HOST", SIP_DB_HOST.toString());

			}

			if (SIP_DB_PASSWORD != null) {

				this.setProperty("SIP_DB_PASSWORD", SIP_DB_PASSWORD.toString());

			}

			if (SIP_DB_PORT != null) {

				this.setProperty("SIP_DB_PORT", SIP_DB_PORT.toString());

			}

			if (SIP_DB_SCHEMA != null) {

				this.setProperty("SIP_DB_SCHEMA", SIP_DB_SCHEMA.toString());

			}

			if (SIP_DB_USER != null) {

				this.setProperty("SIP_DB_USER", SIP_DB_USER.toString());

			}

			if (WMS_DB_DBNAME != null) {

				this.setProperty("WMS_DB_DBNAME", WMS_DB_DBNAME.toString());

			}

			if (WMS_DB_HOST != null) {

				this.setProperty("WMS_DB_HOST", WMS_DB_HOST.toString());

			}

			if (WMS_DB_PASSWORD != null) {

				this.setProperty("WMS_DB_PASSWORD", WMS_DB_PASSWORD.toString());

			}

			if (WMS_DB_PORT != null) {

				this.setProperty("WMS_DB_PORT", WMS_DB_PORT.toString());

			}

			if (WMS_DB_SCHEMA != null) {

				this.setProperty("WMS_DB_SCHEMA", WMS_DB_SCHEMA.toString());

			}

			if (WMS_DB_USER != null) {

				this.setProperty("WMS_DB_USER", WMS_DB_USER.toString());

			}

		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public String DISTRIBUTIONLISTID;

		public String getDISTRIBUTIONLISTID() {
			return this.DISTRIBUTIONLISTID;
		}

		public String MAPPEDSCHEMA;

		public String getMAPPEDSCHEMA() {
			return this.MAPPEDSCHEMA;
		}

		public String SAP_DB_HOST;

		public String getSAP_DB_HOST() {
			return this.SAP_DB_HOST;
		}

		public String SAP_DB_NAME;

		public String getSAP_DB_NAME() {
			return this.SAP_DB_NAME;
		}

		public String SAP_DB_PASSWORD;

		public String getSAP_DB_PASSWORD() {
			return this.SAP_DB_PASSWORD;
		}

		public String SAP_DB_PORT;

		public String getSAP_DB_PORT() {
			return this.SAP_DB_PORT;
		}

		public String SAP_DB_SCHEMA;

		public String getSAP_DB_SCHEMA() {
			return this.SAP_DB_SCHEMA;
		}

		public String SAP_DB_USER;

		public String getSAP_DB_USER() {
			return this.SAP_DB_USER;
		}

		public String SIP_DB_DBNAME;

		public String getSIP_DB_DBNAME() {
			return this.SIP_DB_DBNAME;
		}

		public String SIP_DB_HOST;

		public String getSIP_DB_HOST() {
			return this.SIP_DB_HOST;
		}

		public String SIP_DB_PASSWORD;

		public String getSIP_DB_PASSWORD() {
			return this.SIP_DB_PASSWORD;
		}

		public String SIP_DB_PORT;

		public String getSIP_DB_PORT() {
			return this.SIP_DB_PORT;
		}

		public String SIP_DB_SCHEMA;

		public String getSIP_DB_SCHEMA() {
			return this.SIP_DB_SCHEMA;
		}

		public String SIP_DB_USER;

		public String getSIP_DB_USER() {
			return this.SIP_DB_USER;
		}

		public String WMS_DB_DBNAME;

		public String getWMS_DB_DBNAME() {
			return this.WMS_DB_DBNAME;
		}

		public String WMS_DB_HOST;

		public String getWMS_DB_HOST() {
			return this.WMS_DB_HOST;
		}

		public String WMS_DB_PASSWORD;

		public String getWMS_DB_PASSWORD() {
			return this.WMS_DB_PASSWORD;
		}

		public String WMS_DB_PORT;

		public String getWMS_DB_PORT() {
			return this.WMS_DB_PORT;
		}

		public String WMS_DB_SCHEMA;

		public String getWMS_DB_SCHEMA() {
			return this.WMS_DB_SCHEMA;
		}

		public String WMS_DB_USER;

		public String getWMS_DB_USER() {
			return this.WMS_DB_USER;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ShipmentOrders_SO_Import_FullJob";
	private final String projectName = "ShipmentOrders";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ShipmentOrders_SO_Import_FullJob.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ShipmentOrders_SO_Import_FullJob.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMSSqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tMSSqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tMSSqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tMSSqlConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_17_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row20_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row31_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row37_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row38_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row24_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row35_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_0_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row30_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row39_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row40_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_3_SortOut_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_3_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_3_SortIn_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_2_SortOut_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_2_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_2_SortIn_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlRow_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_14_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlRow_16_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_16_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_17_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlRow_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMSSqlConnection_1 begin ] start
				 */

				ok_Hash.put("tMSSqlConnection_1", false);
				start_Hash
						.put("tMSSqlConnection_1", System.currentTimeMillis());

				currentComponent = "tMSSqlConnection_1";

				int tos_count_tMSSqlConnection_1 = 0;

				String url_tMSSqlConnection_1 = "jdbc:jtds:sqlserver://"
						+ context.WMS_DB_HOST;
				String port_tMSSqlConnection_1 = context.WMS_DB_PORT;
				String dbname_tMSSqlConnection_1 = context.WMS_DB_DBNAME;
				if (!"".equals(port_tMSSqlConnection_1)) {
					url_tMSSqlConnection_1 += ":" + context.WMS_DB_PORT;
				}
				if (!"".equals(dbname_tMSSqlConnection_1)) {
					url_tMSSqlConnection_1 += "//" + context.WMS_DB_DBNAME;
				}
				url_tMSSqlConnection_1 += ";appName=" + projectName + ";"
						+ "instance = WMS";

				String dbUser_tMSSqlConnection_1 = context.WMS_DB_USER;

				final String decryptedPassword_tMSSqlConnection_1 = context.WMS_DB_PASSWORD;
				String dbPwd_tMSSqlConnection_1 = decryptedPassword_tMSSqlConnection_1;

				java.sql.Connection conn_tMSSqlConnection_1 = null;

				String driverClass_tMSSqlConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class.forName(driverClass_tMSSqlConnection_1);

				conn_tMSSqlConnection_1 = java.sql.DriverManager.getConnection(
						url_tMSSqlConnection_1, dbUser_tMSSqlConnection_1,
						dbPwd_tMSSqlConnection_1);

				globalMap.put("conn_tMSSqlConnection_1",
						conn_tMSSqlConnection_1);
				if (null != conn_tMSSqlConnection_1) {

					conn_tMSSqlConnection_1.setAutoCommit(true);
				}

				globalMap.put("dbschema_tMSSqlConnection_1",
						context.WMS_DB_SCHEMA);

				globalMap.put("db_tMSSqlConnection_1", context.WMS_DB_DBNAME);

				globalMap.put("conn_tMSSqlConnection_1",
						conn_tMSSqlConnection_1);

				globalMap.put("shareIdentitySetting_tMSSqlConnection_1", false);

				/**
				 * [tMSSqlConnection_1 begin ] stop
				 */

				/**
				 * [tMSSqlConnection_1 main ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				tos_count_tMSSqlConnection_1++;

				/**
				 * [tMSSqlConnection_1 main ] stop
				 */

				/**
				 * [tMSSqlConnection_1 end ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				ok_Hash.put("tMSSqlConnection_1", true);
				end_Hash.put("tMSSqlConnection_1", System.currentTimeMillis());

				/**
				 * [tMSSqlConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMSSqlConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tMSSqlConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlConnection_1 finally ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				/**
				 * [tMSSqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err.println("Error creating connection to WMS Database");

				globalMap.put("tDie_1_DIE_MESSAGE",
						"Error creating connection to WMS Database");
				globalMap.put("tDie_1_DIE_MESSAGES",
						"Error creating connection to WMS Database");
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(1);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tMSSqlConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMSSqlConnection_2 begin ] start
				 */

				ok_Hash.put("tMSSqlConnection_2", false);
				start_Hash
						.put("tMSSqlConnection_2", System.currentTimeMillis());

				currentComponent = "tMSSqlConnection_2";

				int tos_count_tMSSqlConnection_2 = 0;

				String url_tMSSqlConnection_2 = "jdbc:jtds:sqlserver://"
						+ context.SIP_DB_HOST;
				String port_tMSSqlConnection_2 = context.SIP_DB_PORT;
				String dbname_tMSSqlConnection_2 = context.SIP_DB_DBNAME;
				if (!"".equals(port_tMSSqlConnection_2)) {
					url_tMSSqlConnection_2 += ":" + context.SIP_DB_PORT;
				}
				if (!"".equals(dbname_tMSSqlConnection_2)) {
					url_tMSSqlConnection_2 += "//" + context.SIP_DB_DBNAME;
				}
				url_tMSSqlConnection_2 += ";appName=" + projectName + ";"
						+ "instance = WMS";

				String dbUser_tMSSqlConnection_2 = context.SIP_DB_USER;

				final String decryptedPassword_tMSSqlConnection_2 = context.SIP_DB_PASSWORD;
				String dbPwd_tMSSqlConnection_2 = decryptedPassword_tMSSqlConnection_2;

				java.sql.Connection conn_tMSSqlConnection_2 = null;

				String driverClass_tMSSqlConnection_2 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class.forName(driverClass_tMSSqlConnection_2);

				conn_tMSSqlConnection_2 = java.sql.DriverManager.getConnection(
						url_tMSSqlConnection_2, dbUser_tMSSqlConnection_2,
						dbPwd_tMSSqlConnection_2);

				globalMap.put("conn_tMSSqlConnection_2",
						conn_tMSSqlConnection_2);
				if (null != conn_tMSSqlConnection_2) {

					conn_tMSSqlConnection_2.setAutoCommit(true);
				}

				globalMap.put("dbschema_tMSSqlConnection_2",
						context.SIP_DB_SCHEMA);

				globalMap.put("db_tMSSqlConnection_2", context.SIP_DB_DBNAME);

				globalMap.put("conn_tMSSqlConnection_2",
						conn_tMSSqlConnection_2);

				globalMap.put("shareIdentitySetting_tMSSqlConnection_2", false);

				/**
				 * [tMSSqlConnection_2 begin ] stop
				 */

				/**
				 * [tMSSqlConnection_2 main ] start
				 */

				currentComponent = "tMSSqlConnection_2";

				tos_count_tMSSqlConnection_2++;

				/**
				 * [tMSSqlConnection_2 main ] stop
				 */

				/**
				 * [tMSSqlConnection_2 end ] start
				 */

				currentComponent = "tMSSqlConnection_2";

				ok_Hash.put("tMSSqlConnection_2", true);
				end_Hash.put("tMSSqlConnection_2", System.currentTimeMillis());

				/**
				 * [tMSSqlConnection_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMSSqlConnection_2:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tMSSqlConnection_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlConnection_2 finally ] start
				 */

				currentComponent = "tMSSqlConnection_2";

				/**
				 * [tMSSqlConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				globalMap.put("tDie_2_DIE_PRIORITY", 5);
				System.err.println("Error creating connection to SIP Database");

				globalMap.put("tDie_2_DIE_MESSAGE",
						"Error creating connection to SIP Database");
				globalMap.put("tDie_2_DIE_MESSAGES",
						"Error creating connection to SIP Database");
				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(2);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public void tMSSqlConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMSSqlConnection_3 begin ] start
				 */

				ok_Hash.put("tMSSqlConnection_3", false);
				start_Hash
						.put("tMSSqlConnection_3", System.currentTimeMillis());

				currentComponent = "tMSSqlConnection_3";

				int tos_count_tMSSqlConnection_3 = 0;

				String url_tMSSqlConnection_3 = "jdbc:jtds:sqlserver://"
						+ context.SAP_DB_HOST;
				String port_tMSSqlConnection_3 = context.SAP_DB_PORT;
				String dbname_tMSSqlConnection_3 = context.SAP_DB_NAME;
				if (!"".equals(port_tMSSqlConnection_3)) {
					url_tMSSqlConnection_3 += ":" + context.SAP_DB_PORT;
				}
				if (!"".equals(dbname_tMSSqlConnection_3)) {
					url_tMSSqlConnection_3 += "//" + context.SAP_DB_NAME;
				}
				url_tMSSqlConnection_3 += ";appName=" + projectName + ";" + "";

				String dbUser_tMSSqlConnection_3 = context.SAP_DB_USER;

				final String decryptedPassword_tMSSqlConnection_3 = context.SAP_DB_PASSWORD;
				String dbPwd_tMSSqlConnection_3 = decryptedPassword_tMSSqlConnection_3;

				java.sql.Connection conn_tMSSqlConnection_3 = null;

				String driverClass_tMSSqlConnection_3 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class.forName(driverClass_tMSSqlConnection_3);

				conn_tMSSqlConnection_3 = java.sql.DriverManager.getConnection(
						url_tMSSqlConnection_3, dbUser_tMSSqlConnection_3,
						dbPwd_tMSSqlConnection_3);

				globalMap.put("conn_tMSSqlConnection_3",
						conn_tMSSqlConnection_3);
				if (null != conn_tMSSqlConnection_3) {

					conn_tMSSqlConnection_3.setAutoCommit(true);
				}

				globalMap.put("dbschema_tMSSqlConnection_3",
						context.SAP_DB_SCHEMA);

				globalMap.put("db_tMSSqlConnection_3", context.SAP_DB_NAME);

				globalMap.put("conn_tMSSqlConnection_3",
						conn_tMSSqlConnection_3);

				globalMap.put("shareIdentitySetting_tMSSqlConnection_3", false);

				/**
				 * [tMSSqlConnection_3 begin ] stop
				 */

				/**
				 * [tMSSqlConnection_3 main ] start
				 */

				currentComponent = "tMSSqlConnection_3";

				tos_count_tMSSqlConnection_3++;

				/**
				 * [tMSSqlConnection_3 main ] stop
				 */

				/**
				 * [tMSSqlConnection_3 end ] start
				 */

				currentComponent = "tMSSqlConnection_3";

				ok_Hash.put("tMSSqlConnection_3", true);
				end_Hash.put("tMSSqlConnection_3", System.currentTimeMillis());

				/**
				 * [tMSSqlConnection_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlConnection_3 finally ] start
				 */

				currentComponent = "tMSSqlConnection_3";

				/**
				 * [tMSSqlConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tDie_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_3 begin ] start
				 */

				ok_Hash.put("tDie_3", false);
				start_Hash.put("tDie_3", System.currentTimeMillis());

				currentComponent = "tDie_3";

				int tos_count_tDie_3 = 0;

				/**
				 * [tDie_3 begin ] stop
				 */

				/**
				 * [tDie_3 main ] start
				 */

				currentComponent = "tDie_3";

				globalMap.put("tDie_3_DIE_PRIORITY", 5);
				System.err.println("Error creating connection to SAP Database");

				globalMap.put("tDie_3_DIE_MESSAGE",
						"Error creating connection to SAP Database");
				globalMap.put("tDie_3_DIE_MESSAGES",
						"Error creating connection to SAP Database");
				currentComponent = "tDie_3";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_3_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_3++;

				/**
				 * [tDie_3 main ] stop
				 */

				/**
				 * [tDie_3 end ] start
				 */

				currentComponent = "tDie_3";

				ok_Hash.put("tDie_3", true);
				end_Hash.put("tDie_3", System.currentTimeMillis());

				/**
				 * [tDie_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_3 finally ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String ErrorMsg;

		public String getErrorMsg() {
			return this.ErrorMsg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.ErrorMsg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.ErrorMsg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",ErrorMsg=" + ErrorMsg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ErrorMsg;

		public String getErrorMsg() {
			return this.ErrorMsg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ErrorMsg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ErrorMsg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ErrorMsg=" + ErrorMsg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ErrorMsg;

		public String getErrorMsg() {
			return this.ErrorMsg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ErrorMsg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ErrorMsg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ErrorMsg=" + ErrorMsg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ErrorMsg;

		public String getErrorMsg() {
			return this.ErrorMsg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ErrorMsg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ErrorMsg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ErrorMsg=" + ErrorMsg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class UPDATEORDERSStruct implements
			routines.system.IPersistableRow<UPDATEORDERSStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String WMSKEY;

		public String getWMSKEY() {
			return this.WMSKEY;
		}

		public Float TCUB;

		public Float getTCUB() {
			return this.TCUB;
		}

		public Float TWGT;

		public Float getTWGT() {
			return this.TWGT;
		}

		public Float TQTY;

		public Float getTQTY() {
			return this.TQTY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.WMSKEY = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TCUB = null;
					} else {
						this.TCUB = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TWGT = null;
					} else {
						this.TWGT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TQTY = null;
					} else {
						this.TQTY = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.WMSKEY, dos);

				// Float

				if (this.TCUB == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TCUB);
				}

				// Float

				if (this.TWGT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TWGT);
				}

				// Float

				if (this.TQTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TQTY);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",WMSKEY=" + WMSKEY);
			sb.append(",TCUB=" + String.valueOf(TCUB));
			sb.append(",TWGT=" + String.valueOf(TWGT));
			sb.append(",TQTY=" + String.valueOf(TQTY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(UPDATEORDERSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements
			routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String WMSKEY;

		public String getWMSKEY() {
			return this.WMSKEY;
		}

		public Float TCUB;

		public Float getTCUB() {
			return this.TCUB;
		}

		public Float TWGT;

		public Float getTWGT() {
			return this.TWGT;
		}

		public Float TQTY;

		public Float getTQTY() {
			return this.TQTY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.WMSKEY = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TCUB = null;
					} else {
						this.TCUB = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TWGT = null;
					} else {
						this.TWGT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TQTY = null;
					} else {
						this.TQTY = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.WMSKEY, dos);

				// Float

				if (this.TCUB == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TCUB);
				}

				// Float

				if (this.TWGT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TWGT);
				}

				// Float

				if (this.TQTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TQTY);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",WMSKEY=" + WMSKEY);
			sb.append(",TCUB=" + String.valueOf(TCUB));
			sb.append(",TWGT=" + String.valueOf(TWGT));
			sb.append(",TQTY=" + String.valueOf(TQTY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String WMSKEY;

		public String getWMSKEY() {
			return this.WMSKEY;
		}

		public Float TCUB;

		public Float getTCUB() {
			return this.TCUB;
		}

		public Float TWGT;

		public Float getTWGT() {
			return this.TWGT;
		}

		public Float TQTY;

		public Float getTQTY() {
			return this.TQTY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.WMSKEY = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TCUB = null;
					} else {
						this.TCUB = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TWGT = null;
					} else {
						this.TWGT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TQTY = null;
					} else {
						this.TQTY = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.WMSKEY, dos);

				// Float

				if (this.TCUB == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TCUB);
				}

				// Float

				if (this.TWGT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TWGT);
				}

				// Float

				if (this.TQTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TQTY);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",WMSKEY=" + WMSKEY);
			sb.append(",TCUB=" + String.valueOf(TCUB));
			sb.append(",TWGT=" + String.valueOf(TWGT));
			sb.append(",TQTY=" + String.valueOf(TQTY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String WMSKEY;

		public String getWMSKEY() {
			return this.WMSKEY;
		}

		public Float TCUB;

		public Float getTCUB() {
			return this.TCUB;
		}

		public Float TWGT;

		public Float getTWGT() {
			return this.TWGT;
		}

		public Float TQTY;

		public Float getTQTY() {
			return this.TQTY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.WMSKEY = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TCUB = null;
					} else {
						this.TCUB = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TWGT = null;
					} else {
						this.TWGT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TQTY = null;
					} else {
						this.TQTY = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.WMSKEY, dos);

				// Float

				if (this.TCUB == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TCUB);
				}

				// Float

				if (this.TWGT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TWGT);
				}

				// Float

				if (this.TQTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TQTY);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",WMSKEY=" + WMSKEY);
			sb.append(",TCUB=" + String.valueOf(TCUB));
			sb.append(",TWGT=" + String.valueOf(TWGT));
			sb.append(",TQTY=" + String.valueOf(TQTY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String WMSKEY;

		public String getWMSKEY() {
			return this.WMSKEY;
		}

		public Float TCUB;

		public Float getTCUB() {
			return this.TCUB;
		}

		public Float TWGT;

		public Float getTWGT() {
			return this.TWGT;
		}

		public Float TQTY;

		public Float getTQTY() {
			return this.TQTY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.WMSKEY = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TCUB = null;
					} else {
						this.TCUB = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TWGT = null;
					} else {
						this.TWGT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TQTY = null;
					} else {
						this.TQTY = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.WMSKEY, dos);

				// Float

				if (this.TCUB == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TCUB);
				}

				// Float

				if (this.TWGT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TWGT);
				}

				// Float

				if (this.TQTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TQTY);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",WMSKEY=" + WMSKEY);
			sb.append(",TCUB=" + String.valueOf(TCUB));
			sb.append(",TWGT=" + String.valueOf(TWGT));
			sb.append(",TQTY=" + String.valueOf(TQTY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String WMSKEY;

		public String getWMSKEY() {
			return this.WMSKEY;
		}

		public Float TCUB;

		public Float getTCUB() {
			return this.TCUB;
		}

		public Float TWGT;

		public Float getTWGT() {
			return this.TWGT;
		}

		public Float TQTY;

		public Float getTQTY() {
			return this.TQTY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.WMSKEY = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TCUB = null;
					} else {
						this.TCUB = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TWGT = null;
					} else {
						this.TWGT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TQTY = null;
					} else {
						this.TQTY = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.WMSKEY, dos);

				// Float

				if (this.TCUB == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TCUB);
				}

				// Float

				if (this.TWGT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TWGT);
				}

				// Float

				if (this.TQTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TQTY);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",WMSKEY=" + WMSKEY);
			sb.append(",TCUB=" + String.valueOf(TCUB));
			sb.append(",TWGT=" + String.valueOf(TWGT));
			sb.append(",TQTY=" + String.valueOf(TQTY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String WMSLINENO;

		public String getWMSLINENO() {
			return this.WMSLINENO;
		}

		public String DESCR;

		public String getDESCR() {
			return this.DESCR;
		}

		public String PACKKEY;

		public String getPACKKEY() {
			return this.PACKKEY;
		}

		public String EXTERNLINENO;

		public String getEXTERNLINENO() {
			return this.EXTERNLINENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public Double QTY;

		public Double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String ROTATION;

		public String getROTATION() {
			return this.ROTATION;
		}

		public String SHELFLIFE;

		public String getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String PREALLOCATESTRATEGYKEY;

		public String getPREALLOCATESTRATEGYKEY() {
			return this.PREALLOCATESTRATEGYKEY;
		}

		public String ALLOCATESTRATEGYKEY;

		public String getALLOCATESTRATEGYKEY() {
			return this.ALLOCATESTRATEGYKEY;
		}

		public String NEWALLOCATIONSTRATEGY;

		public String getNEWALLOCATIONSTRATEGY() {
			return this.NEWALLOCATIONSTRATEGY;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ORDERKEY = readString(dis);

					this.WMSLINENO = readString(dis);

					this.DESCR = readString(dis);

					this.PACKKEY = readString(dis);

					this.EXTERNLINENO = readString(dis);

					this.SKU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QTY = null;
					} else {
						this.QTY = dis.readDouble();
					}

					this.UOM = readString(dis);

					this.ROTATION = readString(dis);

					this.SHELFLIFE = readString(dis);

					this.PREALLOCATESTRATEGYKEY = readString(dis);

					this.ALLOCATESTRATEGYKEY = readString(dis);

					this.NEWALLOCATIONSTRATEGY = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.WHSEID = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.WMSLINENO, dos);

				// String

				writeString(this.DESCR, dos);

				// String

				writeString(this.PACKKEY, dos);

				// String

				writeString(this.EXTERNLINENO, dos);

				// String

				writeString(this.SKU, dos);

				// Double

				if (this.QTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.QTY);
				}

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.ROTATION, dos);

				// String

				writeString(this.SHELFLIFE, dos);

				// String

				writeString(this.PREALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.ALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.NEWALLOCATIONSTRATEGY, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDERKEY=" + ORDERKEY);
			sb.append(",WMSLINENO=" + WMSLINENO);
			sb.append(",DESCR=" + DESCR);
			sb.append(",PACKKEY=" + PACKKEY);
			sb.append(",EXTERNLINENO=" + EXTERNLINENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",ROTATION=" + ROTATION);
			sb.append(",SHELFLIFE=" + SHELFLIFE);
			sb.append(",PREALLOCATESTRATEGYKEY=" + PREALLOCATESTRATEGYKEY);
			sb.append(",ALLOCATESTRATEGYKEY=" + ALLOCATESTRATEGYKEY);
			sb.append(",NEWALLOCATIONSTRATEGY=" + NEWALLOCATIONSTRATEGY);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String WMSLINENO;

		public String getWMSLINENO() {
			return this.WMSLINENO;
		}

		public String DESCR;

		public String getDESCR() {
			return this.DESCR;
		}

		public String PACKKEY;

		public String getPACKKEY() {
			return this.PACKKEY;
		}

		public String EXTERNLINENO;

		public String getEXTERNLINENO() {
			return this.EXTERNLINENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public Double QTY;

		public Double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String ROTATION;

		public String getROTATION() {
			return this.ROTATION;
		}

		public String SHELFLIFE;

		public String getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String PREALLOCATESTRATEGYKEY;

		public String getPREALLOCATESTRATEGYKEY() {
			return this.PREALLOCATESTRATEGYKEY;
		}

		public String ALLOCATESTRATEGYKEY;

		public String getALLOCATESTRATEGYKEY() {
			return this.ALLOCATESTRATEGYKEY;
		}

		public String NEWALLOCATIONSTRATEGY;

		public String getNEWALLOCATIONSTRATEGY() {
			return this.NEWALLOCATIONSTRATEGY;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ORDERKEY = readString(dis);

					this.WMSLINENO = readString(dis);

					this.DESCR = readString(dis);

					this.PACKKEY = readString(dis);

					this.EXTERNLINENO = readString(dis);

					this.SKU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QTY = null;
					} else {
						this.QTY = dis.readDouble();
					}

					this.UOM = readString(dis);

					this.ROTATION = readString(dis);

					this.SHELFLIFE = readString(dis);

					this.PREALLOCATESTRATEGYKEY = readString(dis);

					this.ALLOCATESTRATEGYKEY = readString(dis);

					this.NEWALLOCATIONSTRATEGY = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.WHSEID = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.WMSLINENO, dos);

				// String

				writeString(this.DESCR, dos);

				// String

				writeString(this.PACKKEY, dos);

				// String

				writeString(this.EXTERNLINENO, dos);

				// String

				writeString(this.SKU, dos);

				// Double

				if (this.QTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.QTY);
				}

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.ROTATION, dos);

				// String

				writeString(this.SHELFLIFE, dos);

				// String

				writeString(this.PREALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.ALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.NEWALLOCATIONSTRATEGY, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDERKEY=" + ORDERKEY);
			sb.append(",WMSLINENO=" + WMSLINENO);
			sb.append(",DESCR=" + DESCR);
			sb.append(",PACKKEY=" + PACKKEY);
			sb.append(",EXTERNLINENO=" + EXTERNLINENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",ROTATION=" + ROTATION);
			sb.append(",SHELFLIFE=" + SHELFLIFE);
			sb.append(",PREALLOCATESTRATEGYKEY=" + PREALLOCATESTRATEGYKEY);
			sb.append(",ALLOCATESTRATEGYKEY=" + ALLOCATESTRATEGYKEY);
			sb.append(",NEWALLOCATIONSTRATEGY=" + NEWALLOCATIONSTRATEGY);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9_0Struct implements
			routines.system.IPersistableRow<row9_0Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String WMSLINENO;

		public String getWMSLINENO() {
			return this.WMSLINENO;
		}

		public String DESCR;

		public String getDESCR() {
			return this.DESCR;
		}

		public String PACKKEY;

		public String getPACKKEY() {
			return this.PACKKEY;
		}

		public String EXTERNLINENO;

		public String getEXTERNLINENO() {
			return this.EXTERNLINENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public Double QTY;

		public Double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String ROTATION;

		public String getROTATION() {
			return this.ROTATION;
		}

		public String SHELFLIFE;

		public String getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String PREALLOCATESTRATEGYKEY;

		public String getPREALLOCATESTRATEGYKEY() {
			return this.PREALLOCATESTRATEGYKEY;
		}

		public String ALLOCATESTRATEGYKEY;

		public String getALLOCATESTRATEGYKEY() {
			return this.ALLOCATESTRATEGYKEY;
		}

		public String NEWALLOCATIONSTRATEGY;

		public String getNEWALLOCATIONSTRATEGY() {
			return this.NEWALLOCATIONSTRATEGY;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ORDERKEY = readString(dis);

					this.WMSLINENO = readString(dis);

					this.DESCR = readString(dis);

					this.PACKKEY = readString(dis);

					this.EXTERNLINENO = readString(dis);

					this.SKU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QTY = null;
					} else {
						this.QTY = dis.readDouble();
					}

					this.UOM = readString(dis);

					this.ROTATION = readString(dis);

					this.SHELFLIFE = readString(dis);

					this.PREALLOCATESTRATEGYKEY = readString(dis);

					this.ALLOCATESTRATEGYKEY = readString(dis);

					this.NEWALLOCATIONSTRATEGY = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.WHSEID = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.WMSLINENO, dos);

				// String

				writeString(this.DESCR, dos);

				// String

				writeString(this.PACKKEY, dos);

				// String

				writeString(this.EXTERNLINENO, dos);

				// String

				writeString(this.SKU, dos);

				// Double

				if (this.QTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.QTY);
				}

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.ROTATION, dos);

				// String

				writeString(this.SHELFLIFE, dos);

				// String

				writeString(this.PREALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.ALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.NEWALLOCATIONSTRATEGY, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDERKEY=" + ORDERKEY);
			sb.append(",WMSLINENO=" + WMSLINENO);
			sb.append(",DESCR=" + DESCR);
			sb.append(",PACKKEY=" + PACKKEY);
			sb.append(",EXTERNLINENO=" + EXTERNLINENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",ROTATION=" + ROTATION);
			sb.append(",SHELFLIFE=" + SHELFLIFE);
			sb.append(",PREALLOCATESTRATEGYKEY=" + PREALLOCATESTRATEGYKEY);
			sb.append(",ALLOCATESTRATEGYKEY=" + ALLOCATESTRATEGYKEY);
			sb.append(",NEWALLOCATIONSTRATEGY=" + NEWALLOCATIONSTRATEGY);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String WMSLINENO;

		public String getWMSLINENO() {
			return this.WMSLINENO;
		}

		public String DESCR;

		public String getDESCR() {
			return this.DESCR;
		}

		public String PACKKEY;

		public String getPACKKEY() {
			return this.PACKKEY;
		}

		public String EXTERNLINENO;

		public String getEXTERNLINENO() {
			return this.EXTERNLINENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public Double QTY;

		public Double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String ROTATION;

		public String getROTATION() {
			return this.ROTATION;
		}

		public String SHELFLIFE;

		public String getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String PREALLOCATESTRATEGYKEY;

		public String getPREALLOCATESTRATEGYKEY() {
			return this.PREALLOCATESTRATEGYKEY;
		}

		public String ALLOCATESTRATEGYKEY;

		public String getALLOCATESTRATEGYKEY() {
			return this.ALLOCATESTRATEGYKEY;
		}

		public String NEWALLOCATIONSTRATEGY;

		public String getNEWALLOCATIONSTRATEGY() {
			return this.NEWALLOCATIONSTRATEGY;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ORDERKEY = readString(dis);

					this.WMSLINENO = readString(dis);

					this.DESCR = readString(dis);

					this.PACKKEY = readString(dis);

					this.EXTERNLINENO = readString(dis);

					this.SKU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QTY = null;
					} else {
						this.QTY = dis.readDouble();
					}

					this.UOM = readString(dis);

					this.ROTATION = readString(dis);

					this.SHELFLIFE = readString(dis);

					this.PREALLOCATESTRATEGYKEY = readString(dis);

					this.ALLOCATESTRATEGYKEY = readString(dis);

					this.NEWALLOCATIONSTRATEGY = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.WHSEID = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.WMSLINENO, dos);

				// String

				writeString(this.DESCR, dos);

				// String

				writeString(this.PACKKEY, dos);

				// String

				writeString(this.EXTERNLINENO, dos);

				// String

				writeString(this.SKU, dos);

				// Double

				if (this.QTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.QTY);
				}

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.ROTATION, dos);

				// String

				writeString(this.SHELFLIFE, dos);

				// String

				writeString(this.PREALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.ALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.NEWALLOCATIONSTRATEGY, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDERKEY=" + ORDERKEY);
			sb.append(",WMSLINENO=" + WMSLINENO);
			sb.append(",DESCR=" + DESCR);
			sb.append(",PACKKEY=" + PACKKEY);
			sb.append(",EXTERNLINENO=" + EXTERNLINENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",ROTATION=" + ROTATION);
			sb.append(",SHELFLIFE=" + SHELFLIFE);
			sb.append(",PREALLOCATESTRATEGYKEY=" + PREALLOCATESTRATEGYKEY);
			sb.append(",ALLOCATESTRATEGYKEY=" + ALLOCATESTRATEGYKEY);
			sb.append(",NEWALLOCATIONSTRATEGY=" + NEWALLOCATIONSTRATEGY);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DTLStruct implements
			routines.system.IPersistableRow<DTLStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String WMSLINENO;

		public String getWMSLINENO() {
			return this.WMSLINENO;
		}

		public String DESCR;

		public String getDESCR() {
			return this.DESCR;
		}

		public String PACKKEY;

		public String getPACKKEY() {
			return this.PACKKEY;
		}

		public String EXTERNLINENO;

		public String getEXTERNLINENO() {
			return this.EXTERNLINENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public Double QTY;

		public Double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String ROTATION;

		public String getROTATION() {
			return this.ROTATION;
		}

		public String SHELFLIFE;

		public String getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String PREALLOCATESTRATEGYKEY;

		public String getPREALLOCATESTRATEGYKEY() {
			return this.PREALLOCATESTRATEGYKEY;
		}

		public String ALLOCATESTRATEGYKEY;

		public String getALLOCATESTRATEGYKEY() {
			return this.ALLOCATESTRATEGYKEY;
		}

		public String NEWALLOCATIONSTRATEGY;

		public String getNEWALLOCATIONSTRATEGY() {
			return this.NEWALLOCATIONSTRATEGY;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ORDERKEY = readString(dis);

					this.WMSLINENO = readString(dis);

					this.DESCR = readString(dis);

					this.PACKKEY = readString(dis);

					this.EXTERNLINENO = readString(dis);

					this.SKU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QTY = null;
					} else {
						this.QTY = dis.readDouble();
					}

					this.UOM = readString(dis);

					this.ROTATION = readString(dis);

					this.SHELFLIFE = readString(dis);

					this.PREALLOCATESTRATEGYKEY = readString(dis);

					this.ALLOCATESTRATEGYKEY = readString(dis);

					this.NEWALLOCATIONSTRATEGY = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.WHSEID = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.WMSLINENO, dos);

				// String

				writeString(this.DESCR, dos);

				// String

				writeString(this.PACKKEY, dos);

				// String

				writeString(this.EXTERNLINENO, dos);

				// String

				writeString(this.SKU, dos);

				// Double

				if (this.QTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.QTY);
				}

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.ROTATION, dos);

				// String

				writeString(this.SHELFLIFE, dos);

				// String

				writeString(this.PREALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.ALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.NEWALLOCATIONSTRATEGY, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDERKEY=" + ORDERKEY);
			sb.append(",WMSLINENO=" + WMSLINENO);
			sb.append(",DESCR=" + DESCR);
			sb.append(",PACKKEY=" + PACKKEY);
			sb.append(",EXTERNLINENO=" + EXTERNLINENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",ROTATION=" + ROTATION);
			sb.append(",SHELFLIFE=" + SHELFLIFE);
			sb.append(",PREALLOCATESTRATEGYKEY=" + PREALLOCATESTRATEGYKEY);
			sb.append(",ALLOCATESTRATEGYKEY=" + ALLOCATESTRATEGYKEY);
			sb.append(",NEWALLOCATIONSTRATEGY=" + NEWALLOCATIONSTRATEGY);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DTLStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String ISHEADER;

		public String getISHEADER() {
			return this.ISHEADER;
		}

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String CONTACT1;

		public String getCONTACT1() {
			return this.CONTACT1;
		}

		public String CONTACT2;

		public String getCONTACT2() {
			return this.CONTACT2;
		}

		public String COMPANY;

		public String getCOMPANY() {
			return this.COMPANY;
		}

		public String ADDRESS1;

		public String getADDRESS1() {
			return this.ADDRESS1;
		}

		public String ADDRESS2;

		public String getADDRESS2() {
			return this.ADDRESS2;
		}

		public String ADDRESS3;

		public String getADDRESS3() {
			return this.ADDRESS3;
		}

		public String ADDRESS4;

		public String getADDRESS4() {
			return this.ADDRESS4;
		}

		public String ADDRESS5;

		public String getADDRESS5() {
			return this.ADDRESS5;
		}

		public String ADDRESS6;

		public String getADDRESS6() {
			return this.ADDRESS6;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String ZIP;

		public String getZIP() {
			return this.ZIP;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String ISOCOUNTRY;

		public String getISOCOUNTRY() {
			return this.ISOCOUNTRY;
		}

		public String PHONE1;

		public String getPHONE1() {
			return this.PHONE1;
		}

		public String FAX2;

		public String getFAX2() {
			return this.FAX2;
		}

		public String VAT;

		public String getVAT() {
			return this.VAT;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String FAX1;

		public String getFAX1() {
			return this.FAX1;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.CONSIGNEEKEY = readString(dis);

					this.TYPE = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.ORDERDATE = readString(dis);

					this.ISHEADER = readString(dis);

					this.ORDERKEY = readString(dis);

					this.CONTACT1 = readString(dis);

					this.CONTACT2 = readString(dis);

					this.COMPANY = readString(dis);

					this.ADDRESS1 = readString(dis);

					this.ADDRESS2 = readString(dis);

					this.ADDRESS3 = readString(dis);

					this.ADDRESS4 = readString(dis);

					this.ADDRESS5 = readString(dis);

					this.ADDRESS6 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP = readString(dis);

					this.COUNTRY = readString(dis);

					this.ISOCOUNTRY = readString(dis);

					this.PHONE1 = readString(dis);

					this.FAX2 = readString(dis);

					this.VAT = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.ROUTE = readString(dis);

					this.FAX1 = readString(dis);

					this.WHSEID = readString(dis);

					this.SUSR5 = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.ISHEADER, dos);

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.CONTACT1, dos);

				// String

				writeString(this.CONTACT2, dos);

				// String

				writeString(this.COMPANY, dos);

				// String

				writeString(this.ADDRESS1, dos);

				// String

				writeString(this.ADDRESS2, dos);

				// String

				writeString(this.ADDRESS3, dos);

				// String

				writeString(this.ADDRESS4, dos);

				// String

				writeString(this.ADDRESS5, dos);

				// String

				writeString(this.ADDRESS6, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.ISOCOUNTRY, dos);

				// String

				writeString(this.PHONE1, dos);

				// String

				writeString(this.FAX2, dos);

				// String

				writeString(this.VAT, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.FAX1, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",TYPE=" + TYPE);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",ISHEADER=" + ISHEADER);
			sb.append(",ORDERKEY=" + ORDERKEY);
			sb.append(",CONTACT1=" + CONTACT1);
			sb.append(",CONTACT2=" + CONTACT2);
			sb.append(",COMPANY=" + COMPANY);
			sb.append(",ADDRESS1=" + ADDRESS1);
			sb.append(",ADDRESS2=" + ADDRESS2);
			sb.append(",ADDRESS3=" + ADDRESS3);
			sb.append(",ADDRESS4=" + ADDRESS4);
			sb.append(",ADDRESS5=" + ADDRESS5);
			sb.append(",ADDRESS6=" + ADDRESS6);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE=" + STATE);
			sb.append(",ZIP=" + ZIP);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ISOCOUNTRY=" + ISOCOUNTRY);
			sb.append(",PHONE1=" + PHONE1);
			sb.append(",FAX2=" + FAX2);
			sb.append(",VAT=" + VAT);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",FAX1=" + FAX1);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String ISHEADER;

		public String getISHEADER() {
			return this.ISHEADER;
		}

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String CONTACT1;

		public String getCONTACT1() {
			return this.CONTACT1;
		}

		public String CONTACT2;

		public String getCONTACT2() {
			return this.CONTACT2;
		}

		public String COMPANY;

		public String getCOMPANY() {
			return this.COMPANY;
		}

		public String ADDRESS1;

		public String getADDRESS1() {
			return this.ADDRESS1;
		}

		public String ADDRESS2;

		public String getADDRESS2() {
			return this.ADDRESS2;
		}

		public String ADDRESS3;

		public String getADDRESS3() {
			return this.ADDRESS3;
		}

		public String ADDRESS4;

		public String getADDRESS4() {
			return this.ADDRESS4;
		}

		public String ADDRESS5;

		public String getADDRESS5() {
			return this.ADDRESS5;
		}

		public String ADDRESS6;

		public String getADDRESS6() {
			return this.ADDRESS6;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String ZIP;

		public String getZIP() {
			return this.ZIP;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String ISOCOUNTRY;

		public String getISOCOUNTRY() {
			return this.ISOCOUNTRY;
		}

		public String PHONE1;

		public String getPHONE1() {
			return this.PHONE1;
		}

		public String FAX2;

		public String getFAX2() {
			return this.FAX2;
		}

		public String VAT;

		public String getVAT() {
			return this.VAT;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String FAX1;

		public String getFAX1() {
			return this.FAX1;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.CONSIGNEEKEY = readString(dis);

					this.TYPE = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.ORDERDATE = readString(dis);

					this.ISHEADER = readString(dis);

					this.ORDERKEY = readString(dis);

					this.CONTACT1 = readString(dis);

					this.CONTACT2 = readString(dis);

					this.COMPANY = readString(dis);

					this.ADDRESS1 = readString(dis);

					this.ADDRESS2 = readString(dis);

					this.ADDRESS3 = readString(dis);

					this.ADDRESS4 = readString(dis);

					this.ADDRESS5 = readString(dis);

					this.ADDRESS6 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP = readString(dis);

					this.COUNTRY = readString(dis);

					this.ISOCOUNTRY = readString(dis);

					this.PHONE1 = readString(dis);

					this.FAX2 = readString(dis);

					this.VAT = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.ROUTE = readString(dis);

					this.FAX1 = readString(dis);

					this.WHSEID = readString(dis);

					this.SUSR5 = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.ISHEADER, dos);

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.CONTACT1, dos);

				// String

				writeString(this.CONTACT2, dos);

				// String

				writeString(this.COMPANY, dos);

				// String

				writeString(this.ADDRESS1, dos);

				// String

				writeString(this.ADDRESS2, dos);

				// String

				writeString(this.ADDRESS3, dos);

				// String

				writeString(this.ADDRESS4, dos);

				// String

				writeString(this.ADDRESS5, dos);

				// String

				writeString(this.ADDRESS6, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.ISOCOUNTRY, dos);

				// String

				writeString(this.PHONE1, dos);

				// String

				writeString(this.FAX2, dos);

				// String

				writeString(this.VAT, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.FAX1, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",TYPE=" + TYPE);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",ISHEADER=" + ISHEADER);
			sb.append(",ORDERKEY=" + ORDERKEY);
			sb.append(",CONTACT1=" + CONTACT1);
			sb.append(",CONTACT2=" + CONTACT2);
			sb.append(",COMPANY=" + COMPANY);
			sb.append(",ADDRESS1=" + ADDRESS1);
			sb.append(",ADDRESS2=" + ADDRESS2);
			sb.append(",ADDRESS3=" + ADDRESS3);
			sb.append(",ADDRESS4=" + ADDRESS4);
			sb.append(",ADDRESS5=" + ADDRESS5);
			sb.append(",ADDRESS6=" + ADDRESS6);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE=" + STATE);
			sb.append(",ZIP=" + ZIP);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ISOCOUNTRY=" + ISOCOUNTRY);
			sb.append(",PHONE1=" + PHONE1);
			sb.append(",FAX2=" + FAX2);
			sb.append(",VAT=" + VAT);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",FAX1=" + FAX1);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String ISHEADER;

		public String getISHEADER() {
			return this.ISHEADER;
		}

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String CONTACT1;

		public String getCONTACT1() {
			return this.CONTACT1;
		}

		public String CONTACT2;

		public String getCONTACT2() {
			return this.CONTACT2;
		}

		public String COMPANY;

		public String getCOMPANY() {
			return this.COMPANY;
		}

		public String ADDRESS1;

		public String getADDRESS1() {
			return this.ADDRESS1;
		}

		public String ADDRESS2;

		public String getADDRESS2() {
			return this.ADDRESS2;
		}

		public String ADDRESS3;

		public String getADDRESS3() {
			return this.ADDRESS3;
		}

		public String ADDRESS4;

		public String getADDRESS4() {
			return this.ADDRESS4;
		}

		public String ADDRESS5;

		public String getADDRESS5() {
			return this.ADDRESS5;
		}

		public String ADDRESS6;

		public String getADDRESS6() {
			return this.ADDRESS6;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String ZIP;

		public String getZIP() {
			return this.ZIP;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String ISOCOUNTRY;

		public String getISOCOUNTRY() {
			return this.ISOCOUNTRY;
		}

		public String PHONE1;

		public String getPHONE1() {
			return this.PHONE1;
		}

		public String FAX2;

		public String getFAX2() {
			return this.FAX2;
		}

		public String VAT;

		public String getVAT() {
			return this.VAT;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String FAX1;

		public String getFAX1() {
			return this.FAX1;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.CONSIGNEEKEY = readString(dis);

					this.TYPE = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.ORDERDATE = readString(dis);

					this.ISHEADER = readString(dis);

					this.ORDERKEY = readString(dis);

					this.CONTACT1 = readString(dis);

					this.CONTACT2 = readString(dis);

					this.COMPANY = readString(dis);

					this.ADDRESS1 = readString(dis);

					this.ADDRESS2 = readString(dis);

					this.ADDRESS3 = readString(dis);

					this.ADDRESS4 = readString(dis);

					this.ADDRESS5 = readString(dis);

					this.ADDRESS6 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP = readString(dis);

					this.COUNTRY = readString(dis);

					this.ISOCOUNTRY = readString(dis);

					this.PHONE1 = readString(dis);

					this.FAX2 = readString(dis);

					this.VAT = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.ROUTE = readString(dis);

					this.FAX1 = readString(dis);

					this.WHSEID = readString(dis);

					this.SUSR5 = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.ISHEADER, dos);

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.CONTACT1, dos);

				// String

				writeString(this.CONTACT2, dos);

				// String

				writeString(this.COMPANY, dos);

				// String

				writeString(this.ADDRESS1, dos);

				// String

				writeString(this.ADDRESS2, dos);

				// String

				writeString(this.ADDRESS3, dos);

				// String

				writeString(this.ADDRESS4, dos);

				// String

				writeString(this.ADDRESS5, dos);

				// String

				writeString(this.ADDRESS6, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.ISOCOUNTRY, dos);

				// String

				writeString(this.PHONE1, dos);

				// String

				writeString(this.FAX2, dos);

				// String

				writeString(this.VAT, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.FAX1, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",TYPE=" + TYPE);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",ISHEADER=" + ISHEADER);
			sb.append(",ORDERKEY=" + ORDERKEY);
			sb.append(",CONTACT1=" + CONTACT1);
			sb.append(",CONTACT2=" + CONTACT2);
			sb.append(",COMPANY=" + COMPANY);
			sb.append(",ADDRESS1=" + ADDRESS1);
			sb.append(",ADDRESS2=" + ADDRESS2);
			sb.append(",ADDRESS3=" + ADDRESS3);
			sb.append(",ADDRESS4=" + ADDRESS4);
			sb.append(",ADDRESS5=" + ADDRESS5);
			sb.append(",ADDRESS6=" + ADDRESS6);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE=" + STATE);
			sb.append(",ZIP=" + ZIP);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ISOCOUNTRY=" + ISOCOUNTRY);
			sb.append(",PHONE1=" + PHONE1);
			sb.append(",FAX2=" + FAX2);
			sb.append(",VAT=" + VAT);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",FAX1=" + FAX1);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class HDRStruct implements
			routines.system.IPersistableRow<HDRStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String ISHEADER;

		public String getISHEADER() {
			return this.ISHEADER;
		}

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String CONTACT1;

		public String getCONTACT1() {
			return this.CONTACT1;
		}

		public String CONTACT2;

		public String getCONTACT2() {
			return this.CONTACT2;
		}

		public String COMPANY;

		public String getCOMPANY() {
			return this.COMPANY;
		}

		public String ADDRESS1;

		public String getADDRESS1() {
			return this.ADDRESS1;
		}

		public String ADDRESS2;

		public String getADDRESS2() {
			return this.ADDRESS2;
		}

		public String ADDRESS3;

		public String getADDRESS3() {
			return this.ADDRESS3;
		}

		public String ADDRESS4;

		public String getADDRESS4() {
			return this.ADDRESS4;
		}

		public String ADDRESS5;

		public String getADDRESS5() {
			return this.ADDRESS5;
		}

		public String ADDRESS6;

		public String getADDRESS6() {
			return this.ADDRESS6;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String ZIP;

		public String getZIP() {
			return this.ZIP;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String ISOCOUNTRY;

		public String getISOCOUNTRY() {
			return this.ISOCOUNTRY;
		}

		public String PHONE1;

		public String getPHONE1() {
			return this.PHONE1;
		}

		public String FAX2;

		public String getFAX2() {
			return this.FAX2;
		}

		public String VAT;

		public String getVAT() {
			return this.VAT;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String FAX1;

		public String getFAX1() {
			return this.FAX1;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.CONSIGNEEKEY = readString(dis);

					this.TYPE = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.ORDERDATE = readString(dis);

					this.ISHEADER = readString(dis);

					this.ORDERKEY = readString(dis);

					this.CONTACT1 = readString(dis);

					this.CONTACT2 = readString(dis);

					this.COMPANY = readString(dis);

					this.ADDRESS1 = readString(dis);

					this.ADDRESS2 = readString(dis);

					this.ADDRESS3 = readString(dis);

					this.ADDRESS4 = readString(dis);

					this.ADDRESS5 = readString(dis);

					this.ADDRESS6 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP = readString(dis);

					this.COUNTRY = readString(dis);

					this.ISOCOUNTRY = readString(dis);

					this.PHONE1 = readString(dis);

					this.FAX2 = readString(dis);

					this.VAT = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.ROUTE = readString(dis);

					this.FAX1 = readString(dis);

					this.WHSEID = readString(dis);

					this.SUSR5 = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.ISHEADER, dos);

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.CONTACT1, dos);

				// String

				writeString(this.CONTACT2, dos);

				// String

				writeString(this.COMPANY, dos);

				// String

				writeString(this.ADDRESS1, dos);

				// String

				writeString(this.ADDRESS2, dos);

				// String

				writeString(this.ADDRESS3, dos);

				// String

				writeString(this.ADDRESS4, dos);

				// String

				writeString(this.ADDRESS5, dos);

				// String

				writeString(this.ADDRESS6, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.ISOCOUNTRY, dos);

				// String

				writeString(this.PHONE1, dos);

				// String

				writeString(this.FAX2, dos);

				// String

				writeString(this.VAT, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.FAX1, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",TYPE=" + TYPE);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",ISHEADER=" + ISHEADER);
			sb.append(",ORDERKEY=" + ORDERKEY);
			sb.append(",CONTACT1=" + CONTACT1);
			sb.append(",CONTACT2=" + CONTACT2);
			sb.append(",COMPANY=" + COMPANY);
			sb.append(",ADDRESS1=" + ADDRESS1);
			sb.append(",ADDRESS2=" + ADDRESS2);
			sb.append(",ADDRESS3=" + ADDRESS3);
			sb.append(",ADDRESS4=" + ADDRESS4);
			sb.append(",ADDRESS5=" + ADDRESS5);
			sb.append(",ADDRESS6=" + ADDRESS6);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE=" + STATE);
			sb.append(",ZIP=" + ZIP);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ISOCOUNTRY=" + ISOCOUNTRY);
			sb.append(",PHONE1=" + PHONE1);
			sb.append(",FAX2=" + FAX2);
			sb.append(",VAT=" + VAT);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",FAX1=" + FAX1);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(HDRStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class INSERTHEADERStruct implements
			routines.system.IPersistableRow<INSERTHEADERStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String ISHEADER;

		public String getISHEADER() {
			return this.ISHEADER;
		}

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String CONTACT1;

		public String getCONTACT1() {
			return this.CONTACT1;
		}

		public String CONTACT2;

		public String getCONTACT2() {
			return this.CONTACT2;
		}

		public String COMPANY;

		public String getCOMPANY() {
			return this.COMPANY;
		}

		public String ADDRESS1;

		public String getADDRESS1() {
			return this.ADDRESS1;
		}

		public String ADDRESS2;

		public String getADDRESS2() {
			return this.ADDRESS2;
		}

		public String ADDRESS3;

		public String getADDRESS3() {
			return this.ADDRESS3;
		}

		public String ADDRESS4;

		public String getADDRESS4() {
			return this.ADDRESS4;
		}

		public String ADDRESS5;

		public String getADDRESS5() {
			return this.ADDRESS5;
		}

		public String ADDRESS6;

		public String getADDRESS6() {
			return this.ADDRESS6;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String ZIP;

		public String getZIP() {
			return this.ZIP;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String ISOCOUNTRY;

		public String getISOCOUNTRY() {
			return this.ISOCOUNTRY;
		}

		public String PHONE1;

		public String getPHONE1() {
			return this.PHONE1;
		}

		public String FAX2;

		public String getFAX2() {
			return this.FAX2;
		}

		public String VAT;

		public String getVAT() {
			return this.VAT;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String FAX1;

		public String getFAX1() {
			return this.FAX1;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.CONSIGNEEKEY = readString(dis);

					this.TYPE = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.ORDERDATE = readString(dis);

					this.ISHEADER = readString(dis);

					this.ORDERKEY = readString(dis);

					this.CONTACT1 = readString(dis);

					this.CONTACT2 = readString(dis);

					this.COMPANY = readString(dis);

					this.ADDRESS1 = readString(dis);

					this.ADDRESS2 = readString(dis);

					this.ADDRESS3 = readString(dis);

					this.ADDRESS4 = readString(dis);

					this.ADDRESS5 = readString(dis);

					this.ADDRESS6 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP = readString(dis);

					this.COUNTRY = readString(dis);

					this.ISOCOUNTRY = readString(dis);

					this.PHONE1 = readString(dis);

					this.FAX2 = readString(dis);

					this.VAT = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.ROUTE = readString(dis);

					this.FAX1 = readString(dis);

					this.WHSEID = readString(dis);

					this.SUSR5 = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.ISHEADER, dos);

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.CONTACT1, dos);

				// String

				writeString(this.CONTACT2, dos);

				// String

				writeString(this.COMPANY, dos);

				// String

				writeString(this.ADDRESS1, dos);

				// String

				writeString(this.ADDRESS2, dos);

				// String

				writeString(this.ADDRESS3, dos);

				// String

				writeString(this.ADDRESS4, dos);

				// String

				writeString(this.ADDRESS5, dos);

				// String

				writeString(this.ADDRESS6, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.ISOCOUNTRY, dos);

				// String

				writeString(this.PHONE1, dos);

				// String

				writeString(this.FAX2, dos);

				// String

				writeString(this.VAT, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.FAX1, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",TYPE=" + TYPE);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",ISHEADER=" + ISHEADER);
			sb.append(",ORDERKEY=" + ORDERKEY);
			sb.append(",CONTACT1=" + CONTACT1);
			sb.append(",CONTACT2=" + CONTACT2);
			sb.append(",COMPANY=" + COMPANY);
			sb.append(",ADDRESS1=" + ADDRESS1);
			sb.append(",ADDRESS2=" + ADDRESS2);
			sb.append(",ADDRESS3=" + ADDRESS3);
			sb.append(",ADDRESS4=" + ADDRESS4);
			sb.append(",ADDRESS5=" + ADDRESS5);
			sb.append(",ADDRESS6=" + ADDRESS6);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE=" + STATE);
			sb.append(",ZIP=" + ZIP);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ISOCOUNTRY=" + ISOCOUNTRY);
			sb.append(",PHONE1=" + PHONE1);
			sb.append(",FAX2=" + FAX2);
			sb.append(",VAT=" + VAT);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",FAX1=" + FAX1);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(INSERTHEADERStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class INSERTDETAILStruct implements
			routines.system.IPersistableRow<INSERTDETAILStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ORDERKEY;

		public String getORDERKEY() {
			return this.ORDERKEY;
		}

		public String WMSLINENO;

		public String getWMSLINENO() {
			return this.WMSLINENO;
		}

		public String DESCR;

		public String getDESCR() {
			return this.DESCR;
		}

		public String PACKKEY;

		public String getPACKKEY() {
			return this.PACKKEY;
		}

		public String EXTERNLINENO;

		public String getEXTERNLINENO() {
			return this.EXTERNLINENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public Double QTY;

		public Double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String ROTATION;

		public String getROTATION() {
			return this.ROTATION;
		}

		public String SHELFLIFE;

		public String getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String PREALLOCATESTRATEGYKEY;

		public String getPREALLOCATESTRATEGYKEY() {
			return this.PREALLOCATESTRATEGYKEY;
		}

		public String ALLOCATESTRATEGYKEY;

		public String getALLOCATESTRATEGYKEY() {
			return this.ALLOCATESTRATEGYKEY;
		}

		public String NEWALLOCATIONSTRATEGY;

		public String getNEWALLOCATIONSTRATEGY() {
			return this.NEWALLOCATIONSTRATEGY;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ORDERKEY = readString(dis);

					this.WMSLINENO = readString(dis);

					this.DESCR = readString(dis);

					this.PACKKEY = readString(dis);

					this.EXTERNLINENO = readString(dis);

					this.SKU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QTY = null;
					} else {
						this.QTY = dis.readDouble();
					}

					this.UOM = readString(dis);

					this.ROTATION = readString(dis);

					this.SHELFLIFE = readString(dis);

					this.PREALLOCATESTRATEGYKEY = readString(dis);

					this.ALLOCATESTRATEGYKEY = readString(dis);

					this.NEWALLOCATIONSTRATEGY = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.WHSEID = readString(dis);

					this.STORERKEY = readString(dis);

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ORDERKEY, dos);

				// String

				writeString(this.WMSLINENO, dos);

				// String

				writeString(this.DESCR, dos);

				// String

				writeString(this.PACKKEY, dos);

				// String

				writeString(this.EXTERNLINENO, dos);

				// String

				writeString(this.SKU, dos);

				// Double

				if (this.QTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.QTY);
				}

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.ROTATION, dos);

				// String

				writeString(this.SHELFLIFE, dos);

				// String

				writeString(this.PREALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.ALLOCATESTRATEGYKEY, dos);

				// String

				writeString(this.NEWALLOCATIONSTRATEGY, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.STORERKEY, dos);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDERKEY=" + ORDERKEY);
			sb.append(",WMSLINENO=" + WMSLINENO);
			sb.append(",DESCR=" + DESCR);
			sb.append(",PACKKEY=" + PACKKEY);
			sb.append(",EXTERNLINENO=" + EXTERNLINENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",ROTATION=" + ROTATION);
			sb.append(",SHELFLIFE=" + SHELFLIFE);
			sb.append(",PREALLOCATESTRATEGYKEY=" + PREALLOCATESTRATEGYKEY);
			sb.append(",ALLOCATESTRATEGYKEY=" + ALLOCATESTRATEGYKEY);
			sb.append(",NEWALLOCATIONSTRATEGY=" + NEWALLOCATIONSTRATEGY);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",WHSEID=" + WHSEID);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(INSERTDETAILStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class HDRTOTALSStruct implements
			routines.system.IPersistableRow<HDRTOTALSStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String WMSKEY;

		public String getWMSKEY() {
			return this.WMSKEY;
		}

		public Float TCUB;

		public Float getTCUB() {
			return this.TCUB;
		}

		public Float TWGT;

		public Float getTWGT() {
			return this.TWGT;
		}

		public Float TQTY;

		public Float getTQTY() {
			return this.TQTY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.WMSKEY = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TCUB = null;
					} else {
						this.TCUB = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TWGT = null;
					} else {
						this.TWGT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TQTY = null;
					} else {
						this.TQTY = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.WMSKEY, dos);

				// Float

				if (this.TCUB == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TCUB);
				}

				// Float

				if (this.TWGT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TWGT);
				}

				// Float

				if (this.TQTY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TQTY);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",WMSKEY=" + WMSKEY);
			sb.append(",TCUB=" + String.valueOf(TCUB));
			sb.append(",TWGT=" + String.valueOf(TWGT));
			sb.append(",TQTY=" + String.valueOf(TQTY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(HDRTOTALSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public int FailedSKU;

		public int getFailedSKU() {
			return this.FailedSKU;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public int FailedCons;

		public int getFailedCons() {
			return this.FailedCons;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.FailedSKU = dis.readInt();

					this.STORERKEY = readString(dis);

					this.FailedCons = dis.readInt();

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// int

				dos.writeInt(this.FailedSKU);

				// String

				writeString(this.STORERKEY, dos);

				// int

				dos.writeInt(this.FailedCons);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",FailedSKU=" + String.valueOf(FailedSKU));
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",FailedCons=" + String.valueOf(FailedCons));
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FINAL_DATAStruct implements
			routines.system.IPersistableRow<FINAL_DATAStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public int FailedSKU;

		public int getFailedSKU() {
			return this.FailedSKU;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public int FailedCons;

		public int getFailedCons() {
			return this.FailedCons;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.FailedSKU = dis.readInt();

					this.STORERKEY = readString(dis);

					this.FailedCons = dis.readInt();

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// int

				dos.writeInt(this.FailedSKU);

				// String

				writeString(this.STORERKEY, dos);

				// int

				dos.writeInt(this.FailedCons);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",FailedSKU=" + String.valueOf(FailedSKU));
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",FailedCons=" + String.valueOf(FailedCons));
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FINAL_DATAStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public int FailedSKU;

		public int getFailedSKU() {
			return this.FailedSKU;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public int FailedCons;

		public int getFailedCons() {
			return this.FailedCons;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.FailedSKU = dis.readInt();

					this.STORERKEY = readString(dis);

					this.FailedCons = dis.readInt();

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// int

				dos.writeInt(this.FailedSKU);

				// String

				writeString(this.STORERKEY, dos);

				// int

				dos.writeInt(this.FailedCons);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",FailedSKU=" + String.valueOf(FailedSKU));
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",FailedCons=" + String.valueOf(FailedCons));
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_3 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public int FailedSKU;

		public int getFailedSKU() {
			return this.FailedSKU;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public int FailedCons;

		public int getFailedCons() {
			return this.FailedCons;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.FailedSKU = dis.readInt();

					this.STORERKEY = readString(dis);

					this.FailedCons = dis.readInt();

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// int

				dos.writeInt(this.FailedSKU);

				// String

				writeString(this.STORERKEY, dos);

				// int

				dos.writeInt(this.FailedCons);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",FailedSKU=" + String.valueOf(FailedSKU));
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",FailedCons=" + String.valueOf(FailedCons));
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class VALIDDATAStruct implements
			routines.system.IPersistableRow<VALIDDATAStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public int FailedSKU;

		public int getFailedSKU() {
			return this.FailedSKU;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		public int FailedCons;

		public int getFailedCons() {
			return this.FailedCons;
		}

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.FailedSKU = dis.readInt();

					this.STORERKEY = readString(dis);

					this.FailedCons = dis.readInt();

					this.HDRCOUNT = readInteger(dis);

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// int

				dos.writeInt(this.FailedSKU);

				// String

				writeString(this.STORERKEY, dos);

				// int

				dos.writeInt(this.FailedCons);

				// Integer

				writeInteger(this.HDRCOUNT, dos);

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",FailedSKU=" + String.valueOf(FailedSKU));
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append(",FailedCons=" + String.valueOf(FailedCons));
			sb.append(",HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append(",DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(VALIDDATAStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class BLANKEXTERNORDERKEYStruct implements
			routines.system.IPersistableRow<BLANKEXTERNORDERKEYStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ErrorMsg;

		public String getErrorMsg() {
			return this.ErrorMsg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ErrorMsg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ErrorMsg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ErrorMsg=" + ErrorMsg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(BLANKEXTERNORDERKEYStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class INVALIDSKUStruct implements
			routines.system.IPersistableRow<INVALIDSKUStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String ErrorMsg;

		public String getErrorMsg() {
			return this.ErrorMsg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.EXTERNORDERKEY = readString(dis);

					this.ErrorMsg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.ErrorMsg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",ErrorMsg=" + ErrorMsg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(INVALIDSKUStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class INVALIDCONSIGNEEStruct implements
			routines.system.IPersistableRow<INVALIDCONSIGNEEStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String ErrorMsg;

		public String getErrorMsg() {
			return this.ErrorMsg;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.ErrorMsg = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ErrorMsg, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ErrorMsg=" + ErrorMsg);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(INVALIDCONSIGNEEStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class INVALIDWHSEIDStruct implements
			routines.system.IPersistableRow<INVALIDWHSEIDStruct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String ErrorMsg;

		public String getErrorMsg() {
			return this.ErrorMsg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.ErrorMsg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.ErrorMsg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",ErrorMsg=" + ErrorMsg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(INVALIDWHSEIDStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.STORERKEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// String

				writeString(this.STORERKEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.STORERKEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// String

				writeString(this.STORERKEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.STORERKEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// String

				writeString(this.STORERKEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public int ValidWhseid;

		public int getValidWhseid() {
			return this.ValidWhseid;
		}

		public String WHSEID_SAP;

		public String getWHSEID_SAP() {
			return this.WHSEID_SAP;
		}

		public String STORERKEY;

		public String getSTORERKEY() {
			return this.STORERKEY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

					this.ValidWhseid = dis.readInt();

					this.WHSEID_SAP = readString(dis);

					this.STORERKEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

				// int

				dos.writeInt(this.ValidWhseid);

				// String

				writeString(this.WHSEID_SAP, dos);

				// String

				writeString(this.STORERKEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append(",ValidWhseid=" + String.valueOf(ValidWhseid));
			sb.append(",WHSEID_SAP=" + WHSEID_SAP);
			sb.append(",STORERKEY=" + STORERKEY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String WHSEID;

		public String getWHSEID() {
			return this.WHSEID;
		}

		public String EXTERNORDERKEY;

		public String getEXTERNORDERKEY() {
			return this.EXTERNORDERKEY;
		}

		public String EXTERNALORDERKEY2;

		public String getEXTERNALORDERKEY2() {
			return this.EXTERNALORDERKEY2;
		}

		public String SUSR1;

		public String getSUSR1() {
			return this.SUSR1;
		}

		public String ORDERDATE;

		public String getORDERDATE() {
			return this.ORDERDATE;
		}

		public String SUSR2;

		public String getSUSR2() {
			return this.SUSR2;
		}

		public String SUSR3;

		public String getSUSR3() {
			return this.SUSR3;
		}

		public String SUSR4;

		public String getSUSR4() {
			return this.SUSR4;
		}

		public String SUSR5;

		public String getSUSR5() {
			return this.SUSR5;
		}

		public String ROUTE;

		public String getROUTE() {
			return this.ROUTE;
		}

		public String CONSIGNEEKEY;

		public String getCONSIGNEEKEY() {
			return this.CONSIGNEEKEY;
		}

		public String EXTERNLNENO;

		public String getEXTERNLNENO() {
			return this.EXTERNLNENO;
		}

		public String SKU;

		public String getSKU() {
			return this.SKU;
		}

		public double QTY;

		public double getQTY() {
			return this.QTY;
		}

		public String UOM;

		public String getUOM() {
			return this.UOM;
		}

		public String LOTTABLE03;

		public String getLOTTABLE03() {
			return this.LOTTABLE03;
		}

		public int SHELFLIFE;

		public int getSHELFLIFE() {
			return this.SHELFLIFE;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.WHSEID = readString(dis);

					this.EXTERNORDERKEY = readString(dis);

					this.EXTERNALORDERKEY2 = readString(dis);

					this.SUSR1 = readString(dis);

					this.ORDERDATE = readString(dis);

					this.SUSR2 = readString(dis);

					this.SUSR3 = readString(dis);

					this.SUSR4 = readString(dis);

					this.SUSR5 = readString(dis);

					this.ROUTE = readString(dis);

					this.CONSIGNEEKEY = readString(dis);

					this.EXTERNLNENO = readString(dis);

					this.SKU = readString(dis);

					this.QTY = dis.readDouble();

					this.UOM = readString(dis);

					this.LOTTABLE03 = readString(dis);

					this.SHELFLIFE = dis.readInt();

					this.TYPE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.WHSEID, dos);

				// String

				writeString(this.EXTERNORDERKEY, dos);

				// String

				writeString(this.EXTERNALORDERKEY2, dos);

				// String

				writeString(this.SUSR1, dos);

				// String

				writeString(this.ORDERDATE, dos);

				// String

				writeString(this.SUSR2, dos);

				// String

				writeString(this.SUSR3, dos);

				// String

				writeString(this.SUSR4, dos);

				// String

				writeString(this.SUSR5, dos);

				// String

				writeString(this.ROUTE, dos);

				// String

				writeString(this.CONSIGNEEKEY, dos);

				// String

				writeString(this.EXTERNLNENO, dos);

				// String

				writeString(this.SKU, dos);

				// double

				dos.writeDouble(this.QTY);

				// String

				writeString(this.UOM, dos);

				// String

				writeString(this.LOTTABLE03, dos);

				// int

				dos.writeInt(this.SHELFLIFE);

				// String

				writeString(this.TYPE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WHSEID=" + WHSEID);
			sb.append(",EXTERNORDERKEY=" + EXTERNORDERKEY);
			sb.append(",EXTERNALORDERKEY2=" + EXTERNALORDERKEY2);
			sb.append(",SUSR1=" + SUSR1);
			sb.append(",ORDERDATE=" + ORDERDATE);
			sb.append(",SUSR2=" + SUSR2);
			sb.append(",SUSR3=" + SUSR3);
			sb.append(",SUSR4=" + SUSR4);
			sb.append(",SUSR5=" + SUSR5);
			sb.append(",ROUTE=" + ROUTE);
			sb.append(",CONSIGNEEKEY=" + CONSIGNEEKEY);
			sb.append(",EXTERNLNENO=" + EXTERNLNENO);
			sb.append(",SKU=" + SKU);
			sb.append(",QTY=" + String.valueOf(QTY));
			sb.append(",UOM=" + UOM);
			sb.append(",LOTTABLE03=" + LOTTABLE03);
			sb.append(",SHELFLIFE=" + String.valueOf(SHELFLIFE));
			sb.append(",TYPE=" + TYPE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				out1Struct out1 = new out1Struct();
				row7Struct row7 = new row7Struct();
				row7Struct row6 = row7;
				VALIDDATAStruct VALIDDATA = new VALIDDATAStruct();
				row29Struct row29 = new row29Struct();
				FINAL_DATAStruct FINAL_DATA = new FINAL_DATAStruct();
				FINAL_DATAStruct row15 = FINAL_DATA;
				INSERTHEADERStruct INSERTHEADER = new INSERTHEADERStruct();
				INSERTHEADERStruct HDR = INSERTHEADER;
				row17Struct row17 = new row17Struct();
				row17Struct row33 = row17;
				row22Struct row22 = new row22Struct();
				INSERTDETAILStruct INSERTDETAIL = new INSERTDETAILStruct();
				INSERTDETAILStruct DTL = INSERTDETAIL;
				row9_0Struct row9_0 = new row9_0Struct();
				row18Struct row18 = new row18Struct();
				row18Struct row21 = row18;
				row25Struct row25 = new row25Struct();
				HDRTOTALSStruct HDRTOTALS = new HDRTOTALSStruct();
				HDRTOTALSStruct row32 = HDRTOTALS;
				row34Struct row34 = new row34Struct();
				row36Struct row36 = new row36Struct();
				row36Struct UPDATEORDERS = row36;
				BLANKEXTERNORDERKEYStruct BLANKEXTERNORDERKEY = new BLANKEXTERNORDERKEYStruct();
				row4Struct row4 = new row4Struct();
				INVALIDSKUStruct INVALIDSKU = new INVALIDSKUStruct();
				row2Struct row2 = new row2Struct();
				INVALIDCONSIGNEEStruct INVALIDCONSIGNEE = new INVALIDCONSIGNEEStruct();
				row12Struct row12 = new row12Struct();
				INVALIDWHSEIDStruct INVALIDWHSEID = new INVALIDWHSEIDStruct();
				row28Struct row28 = new row28Struct();

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash
						.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparableout1Struct extends out1Struct implements
						Comparable<Comparableout1Struct> {

					public int compareTo(Comparableout1Struct other) {

						if (this.EXTERNORDERKEY == null
								&& other.EXTERNORDERKEY != null) {
							return -1;

						} else if (this.EXTERNORDERKEY != null
								&& other.EXTERNORDERKEY == null) {
							return 1;

						} else if (this.EXTERNORDERKEY != null
								&& other.EXTERNORDERKEY != null) {
							if (!this.EXTERNORDERKEY
									.equals(other.EXTERNORDERKEY)) {
								return this.EXTERNORDERKEY
										.compareTo(other.EXTERNORDERKEY);
							}
						}
						if (this.ValidWhseid != other.ValidWhseid) {

							return other.ValidWhseid > this.ValidWhseid ? 1
									: -1;

						}
						if (this.WHSEID == null && other.WHSEID != null) {
							return -1;

						} else if (this.WHSEID != null && other.WHSEID == null) {
							return 1;

						} else if (this.WHSEID != null && other.WHSEID != null) {
							if (!this.WHSEID.equals(other.WHSEID)) {
								return this.WHSEID.compareTo(other.WHSEID);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparableout1Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparableout1Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = null;

				row20Struct row20HashKey = new row20Struct();
				row20Struct row20Default = new row20Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
					Object dummy;
					String NEWSO;
					boolean IsHeader;
					String OLDSO;
					int CHECKLINE;
					int CHECKDOC;
					int ValidWhseid;
					String STORERKEY;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMSSqlInput_1 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_1", false);
				start_Hash.put("tMSSqlInput_1", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_1";

				int tos_count_tMSSqlInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_1 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_1,
						talendToDBArray_tMSSqlInput_1);
				int nb_line_tMSSqlInput_1 = 0;
				java.sql.Connection conn_tMSSqlInput_1 = null;
				conn_tMSSqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				String dbschema_tMSSqlInput_1 = (String) globalMap
						.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlInput_1 = conn_tMSSqlInput_1
						.createStatement();

				String dbquery_tMSSqlInput_1 = " SELECT WERKS, VBELN_VA,VBELN_VL,WERKS_OR,ERDAT,LEFT(NAME1,20) NAME1,KUNNR, TRANSPORT_FLAG,\nOUTBOUND_DEL,ROUTE_NUMB,KUNNR_WE, POSNR, MATNR, LFPMG,EA_DEFAULTED, SIF_NUMBER,EXPIRY_DATE,LFART\n FROM "
						+ context.SAP_DB_SCHEMA
						+ ".ZMM_EXP_OUTB_DEL\nWHERE ZFLAG IN('0','3',' ')\nORDER BY VBELN_VA, WERKS, POSNR ";

				globalMap.put("tMSSqlInput_1_QUERY", dbquery_tMSSqlInput_1);

				java.sql.ResultSet rs_tMSSqlInput_1 = null;
				try {
					rs_tMSSqlInput_1 = stmt_tMSSqlInput_1
							.executeQuery(dbquery_tMSSqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_1 = rs_tMSSqlInput_1
							.getMetaData();
					int colQtyInRs_tMSSqlInput_1 = rsmd_tMSSqlInput_1
							.getColumnCount();

					String tmpContent_tMSSqlInput_1 = null;

					while (rs_tMSSqlInput_1.next()) {
						nb_line_tMSSqlInput_1++;

						if (colQtyInRs_tMSSqlInput_1 < 1) {
							row19.WHSEID = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(1);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(1)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.WHSEID = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.WHSEID = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.WHSEID = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 2) {
							row19.EXTERNORDERKEY = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(2);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(2)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.EXTERNORDERKEY = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.EXTERNORDERKEY = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.EXTERNORDERKEY = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 3) {
							row19.EXTERNALORDERKEY2 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(3);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(3)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.EXTERNALORDERKEY2 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.EXTERNALORDERKEY2 = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.EXTERNALORDERKEY2 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 4) {
							row19.SUSR1 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(4);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(4)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.SUSR1 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.SUSR1 = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.SUSR1 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 5) {
							row19.ORDERDATE = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(5);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(5)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.ORDERDATE = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.ORDERDATE = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.ORDERDATE = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 6) {
							row19.SUSR2 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(6);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(6)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.SUSR2 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.SUSR2 = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.SUSR2 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 7) {
							row19.SUSR3 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(7);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(7)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.SUSR3 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.SUSR3 = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.SUSR3 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 8) {
							row19.SUSR4 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(8);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(8)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.SUSR4 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.SUSR4 = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.SUSR4 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 9) {
							row19.SUSR5 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(9);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(9)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.SUSR5 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.SUSR5 = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.SUSR5 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 10) {
							row19.ROUTE = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(10);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(10)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.ROUTE = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.ROUTE = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.ROUTE = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 11) {
							row19.CONSIGNEEKEY = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(11);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(11)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.CONSIGNEEKEY = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.CONSIGNEEKEY = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.CONSIGNEEKEY = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 12) {
							row19.EXTERNLNENO = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(12);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(12)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.EXTERNLNENO = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.EXTERNLNENO = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.EXTERNLNENO = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 13) {
							row19.SKU = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(13);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(13)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.SKU = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.SKU = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.SKU = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 14) {
							row19.QTY = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(14) != null) {
								row19.QTY = rs_tMSSqlInput_1.getDouble(14);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 15) {
							row19.UOM = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(15);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(15)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.UOM = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.UOM = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.UOM = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 16) {
							row19.LOTTABLE03 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(16);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(16)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.LOTTABLE03 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.LOTTABLE03 = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.LOTTABLE03 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 17) {
							row19.SHELFLIFE = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(17) != null) {
								row19.SHELFLIFE = rs_tMSSqlInput_1.getInt(17);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 18) {
							row19.TYPE = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(18);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(18)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row19.TYPE = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row19.TYPE = tmpContent_tMSSqlInput_1;
								}
							} else {
								row19.TYPE = null;
							}
						}

						/**
						 * [tMSSqlInput_1 begin ] stop
						 */

						/**
						 * [tMSSqlInput_1 main ] start
						 */

						currentComponent = "tMSSqlInput_1";

						tos_count_tMSSqlInput_1++;

						/**
						 * [tMSSqlInput_1 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row20"
						// /////////////////////////////////////////////

						boolean forceLooprow20 = false;

						row20Struct row20ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							globalMap.put("CODE", row19.WHSEID);

							tMSSqlInput_4Process(globalMap);

							tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) globalMap
									.get("tHash_Lookup_row20"));

							tHash_Lookup_row20.initGet();

							tHash_Lookup_row20.lookup(row20HashKey);

							if (!tHash_Lookup_row20.hasNext()) { // G_TM_M_090

								forceLooprow20 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow20 = true;
						} // G 21

						row20Struct row20 = null;

						while ((tHash_Lookup_row20 != null && tHash_Lookup_row20
								.hasNext()) || forceLooprow20) { // G_TM_M_043

							// CALL close loop of lookup 'row20'

							row20Struct fromLookup_row20 = null;
							row20 = row20Default;

							if (!forceLooprow20) { // G 46

								fromLookup_row20 = tHash_Lookup_row20.next();

								if (fromLookup_row20 != null) {
									row20 = fromLookup_row20;
								}

							} // G 46

							forceLooprow20 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;
								Var.dummy = globalMap.put("SCHEMA",
										row20.SCHEMA);
								Var.NEWSO = row19.EXTERNORDERKEY;
								Var.IsHeader = Var.NEWSO.equals(Var.OLDSO) ? false
										: true;
								Var.OLDSO = Var.NEWSO;
								Var.CHECKLINE = row20.SCHEMA == null ? 1 : 0;
								Var.CHECKDOC = Var.CHECKLINE
										+ (Var.IsHeader ? 0 : Var.CHECKDOC);
								Var.ValidWhseid = Var.CHECKDOC > 0 ? 1 : 0;
								Var.STORERKEY = context.STORERKEY;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

								// # Output table : 'out1'
								// # Filter conditions
								if (

								Var.STORERKEY != null
										&& Var.STORERKEY.trim().length() > 0

								) {
									out1_tmp.WHSEID = row20.SCHEMA == null ? "wmwhse1"
											: row20.SCHEMA;
									out1_tmp.EXTERNORDERKEY = row19.EXTERNORDERKEY;
									out1_tmp.EXTERNALORDERKEY2 = row19.EXTERNALORDERKEY2;
									out1_tmp.SUSR1 = row19.SUSR1;
									out1_tmp.ORDERDATE = row19.ORDERDATE;
									out1_tmp.SUSR2 = row19.SUSR2;
									out1_tmp.SUSR3 = row19.SUSR3;
									out1_tmp.SUSR4 = row19.SUSR4;
									out1_tmp.SUSR5 = row19.SUSR5;
									out1_tmp.ROUTE = row19.ROUTE;
									out1_tmp.CONSIGNEEKEY = row19.CONSIGNEEKEY;
									out1_tmp.EXTERNLNENO = row19.EXTERNLNENO;
									out1_tmp.SKU = row19.SKU;
									out1_tmp.QTY = row19.QTY;
									out1_tmp.UOM = row19.UOM;
									out1_tmp.LOTTABLE03 = row19.LOTTABLE03;
									out1_tmp.SHELFLIFE = row19.SHELFLIFE;
									out1_tmp.TYPE = row19.TYPE;
									out1_tmp.ValidWhseid = Var.ValidWhseid;
									out1_tmp.WHSEID_SAP = row19.WHSEID;
									out1_tmp.STORERKEY = Var.STORERKEY;
									out1 = out1_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tSortRow_1_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								Comparableout1Struct arrayRowtSortRow_1_SortOut = new Comparableout1Struct();

								arrayRowtSortRow_1_SortOut.WHSEID = out1.WHSEID;
								arrayRowtSortRow_1_SortOut.EXTERNORDERKEY = out1.EXTERNORDERKEY;
								arrayRowtSortRow_1_SortOut.EXTERNALORDERKEY2 = out1.EXTERNALORDERKEY2;
								arrayRowtSortRow_1_SortOut.SUSR1 = out1.SUSR1;
								arrayRowtSortRow_1_SortOut.ORDERDATE = out1.ORDERDATE;
								arrayRowtSortRow_1_SortOut.SUSR2 = out1.SUSR2;
								arrayRowtSortRow_1_SortOut.SUSR3 = out1.SUSR3;
								arrayRowtSortRow_1_SortOut.SUSR4 = out1.SUSR4;
								arrayRowtSortRow_1_SortOut.SUSR5 = out1.SUSR5;
								arrayRowtSortRow_1_SortOut.ROUTE = out1.ROUTE;
								arrayRowtSortRow_1_SortOut.CONSIGNEEKEY = out1.CONSIGNEEKEY;
								arrayRowtSortRow_1_SortOut.EXTERNLNENO = out1.EXTERNLNENO;
								arrayRowtSortRow_1_SortOut.SKU = out1.SKU;
								arrayRowtSortRow_1_SortOut.QTY = out1.QTY;
								arrayRowtSortRow_1_SortOut.UOM = out1.UOM;
								arrayRowtSortRow_1_SortOut.LOTTABLE03 = out1.LOTTABLE03;
								arrayRowtSortRow_1_SortOut.SHELFLIFE = out1.SHELFLIFE;
								arrayRowtSortRow_1_SortOut.TYPE = out1.TYPE;
								arrayRowtSortRow_1_SortOut.ValidWhseid = out1.ValidWhseid;
								arrayRowtSortRow_1_SortOut.WHSEID_SAP = out1.WHSEID_SAP;
								arrayRowtSortRow_1_SortOut.STORERKEY = out1.STORERKEY;
								list_tSortRow_1_SortOut
										.add(arrayRowtSortRow_1_SortOut);

								tos_count_tSortRow_1_SortOut++;

								/**
								 * [tSortRow_1_SortOut main ] stop
								 */

							} // End of branch "out1"

						} // close loop of lookup 'row20' // G_TM_M_043

						/**
						 * [tMSSqlInput_1 end ] start
						 */

						currentComponent = "tMSSqlInput_1";

					}
				} finally {
					stmt_tMSSqlInput_1.close();

				}
				globalMap.put("tMSSqlInput_1_NB_LINE", nb_line_tMSSqlInput_1);

				ok_Hash.put("tMSSqlInput_1", true);
				end_Hash.put("tMSSqlInput_1", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row20 != null) {
					tHash_Lookup_row20.endGet();
				}
				globalMap.remove("tHash_Lookup_row20");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				out1Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
						.toArray(new Comparableout1Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortOut", false);
				start_Hash
						.put("tSortRow_3_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				int tos_count_tSortRow_3_SortOut = 0;

				class ComparableVALIDDATAStruct extends VALIDDATAStruct
						implements Comparable<ComparableVALIDDATAStruct> {

					public int compareTo(ComparableVALIDDATAStruct other) {

						if (this.WHSEID == null && other.WHSEID != null) {
							return -1;

						} else if (this.WHSEID != null && other.WHSEID == null) {
							return 1;

						} else if (this.WHSEID != null && other.WHSEID != null) {
							if (!this.WHSEID.equals(other.WHSEID)) {
								return this.WHSEID.compareTo(other.WHSEID);
							}
						}
						if (this.EXTERNORDERKEY == null
								&& other.EXTERNORDERKEY != null) {
							return -1;

						} else if (this.EXTERNORDERKEY != null
								&& other.EXTERNORDERKEY == null) {
							return 1;

						} else if (this.EXTERNORDERKEY != null
								&& other.EXTERNORDERKEY != null) {
							if (!this.EXTERNORDERKEY
									.equals(other.EXTERNORDERKEY)) {
								return this.EXTERNORDERKEY
										.compareTo(other.EXTERNORDERKEY);
							}
						}
						if (this.FailedSKU != other.FailedSKU) {

							return other.FailedSKU > this.FailedSKU ? 1 : -1;

						}
						if (this.FailedCons != other.FailedCons) {

							return other.FailedCons > this.FailedCons ? 1 : -1;

						}
						return 0;
					}
				}

				java.util.List<ComparableVALIDDATAStruct> list_tSortRow_3_SortOut = new java.util.ArrayList<ComparableVALIDDATAStruct>();

				/**
				 * [tSortRow_3_SortOut begin ] stop
				 */

				/**
				 * [tMSSqlRow_1 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_1", false);
				start_Hash.put("tMSSqlRow_1", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_1";

				int tos_count_tMSSqlRow_1 = 0;

				java.sql.Connection conn_tMSSqlRow_1 = null;
				String query_tMSSqlRow_1 = "";
				boolean whetherReject_tMSSqlRow_1 = false;
				conn_tMSSqlRow_1 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlRow_1 = conn_tMSSqlRow_1
						.createStatement();

				/**
				 * [tMSSqlRow_1 begin ] stop
				 */

				/**
				 * [tMSSqlRow_3 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_3", false);
				start_Hash.put("tMSSqlRow_3", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_3";

				int tos_count_tMSSqlRow_3 = 0;

				java.sql.Connection conn_tMSSqlRow_3 = null;
				String query_tMSSqlRow_3 = "";
				boolean whetherReject_tMSSqlRow_3 = false;
				conn_tMSSqlRow_3 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_2");

				java.sql.Statement stmt_tMSSqlRow_3 = conn_tMSSqlRow_3
						.createStatement();

				/**
				 * [tMSSqlRow_3 begin ] stop
				 */

				/**
				 * [tMSSqlRow_5 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_5", false);
				start_Hash.put("tMSSqlRow_5", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_5";

				int tos_count_tMSSqlRow_5 = 0;

				java.sql.Connection conn_tMSSqlRow_5 = null;
				String query_tMSSqlRow_5 = "";
				boolean whetherReject_tMSSqlRow_5 = false;
				conn_tMSSqlRow_5 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlRow_5 = conn_tMSSqlRow_5
						.createStatement();

				/**
				 * [tMSSqlRow_5 begin ] stop
				 */

				/**
				 * [tMSSqlRow_4 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_4", false);
				start_Hash.put("tMSSqlRow_4", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_4";

				int tos_count_tMSSqlRow_4 = 0;

				java.sql.Connection conn_tMSSqlRow_4 = null;
				String query_tMSSqlRow_4 = "";
				boolean whetherReject_tMSSqlRow_4 = false;
				conn_tMSSqlRow_4 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_2");

				java.sql.Statement stmt_tMSSqlRow_4 = conn_tMSSqlRow_4
						.createStatement();

				/**
				 * [tMSSqlRow_4 begin ] stop
				 */

				/**
				 * [tMSSqlRow_10 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_10", false);
				start_Hash.put("tMSSqlRow_10", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_10";

				int tos_count_tMSSqlRow_10 = 0;

				java.sql.Connection conn_tMSSqlRow_10 = null;
				String query_tMSSqlRow_10 = "";
				boolean whetherReject_tMSSqlRow_10 = false;
				conn_tMSSqlRow_10 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlRow_10 = conn_tMSSqlRow_10
						.createStatement();

				/**
				 * [tMSSqlRow_10 begin ] stop
				 */

				/**
				 * [tMSSqlRow_9 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_9", false);
				start_Hash.put("tMSSqlRow_9", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_9";

				int tos_count_tMSSqlRow_9 = 0;

				java.sql.Connection conn_tMSSqlRow_9 = null;
				String query_tMSSqlRow_9 = "";
				boolean whetherReject_tMSSqlRow_9 = false;
				conn_tMSSqlRow_9 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_2");

				java.sql.Statement stmt_tMSSqlRow_9 = conn_tMSSqlRow_9
						.createStatement();

				/**
				 * [tMSSqlRow_9 begin ] stop
				 */

				/**
				 * [tMSSqlRow_15 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_15", false);
				start_Hash.put("tMSSqlRow_15", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_15";

				int tos_count_tMSSqlRow_15 = 0;

				java.sql.Connection conn_tMSSqlRow_15 = null;
				String query_tMSSqlRow_15 = "";
				boolean whetherReject_tMSSqlRow_15 = false;
				conn_tMSSqlRow_15 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlRow_15 = conn_tMSSqlRow_15
						.createStatement();

				/**
				 * [tMSSqlRow_15 begin ] stop
				 */

				/**
				 * [tMSSqlRow_13 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_13", false);
				start_Hash.put("tMSSqlRow_13", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_13";

				int tos_count_tMSSqlRow_13 = 0;

				java.sql.Connection conn_tMSSqlRow_13 = null;
				String query_tMSSqlRow_13 = "";
				boolean whetherReject_tMSSqlRow_13 = false;
				conn_tMSSqlRow_13 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_2");

				java.sql.Statement stmt_tMSSqlRow_13 = conn_tMSSqlRow_13
						.createStatement();

				/**
				 * [tMSSqlRow_13 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = null;

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = null;

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = null;

				row31Struct row31HashKey = new row31Struct();
				row31Struct row31Default = new row31Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 = null;

				row37Struct row37HashKey = new row37Struct();
				row37Struct row37Default = new row37Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = null;

				row38Struct row38HashKey = new row38Struct();
				row38Struct row38Default = new row38Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					String NEWSO;
					String IsHeader;
					String OLDSO;
					int WHCount;
					int WHTotal;
					boolean WhseidExists;
					int SKULine;
					int SKUDoc;
					int FailedSKU;
					int CONSLine;
					int CONSDoc;
					int FailedCons;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				VALIDDATAStruct VALIDDATA_tmp = new VALIDDATAStruct();
				BLANKEXTERNORDERKEYStruct BLANKEXTERNORDERKEY_tmp = new BLANKEXTERNORDERKEYStruct();
				INVALIDSKUStruct INVALIDSKU_tmp = new INVALIDSKUStruct();
				INVALIDCONSIGNEEStruct INVALIDCONSIGNEE_tmp = new INVALIDCONSIGNEEStruct();
				INVALIDWHSEIDStruct INVALIDWHSEID_tmp = new INVALIDWHSEIDStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMSSqlRow_8 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_8", false);
				start_Hash.put("tMSSqlRow_8", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_8";

				int tos_count_tMSSqlRow_8 = 0;

				/**
				 * [tMSSqlRow_8 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				out1Struct[] array_tSortRow_1_SortIn = (out1Struct[]) globalMap
						.get("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				out1Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row7.WHSEID = current_tSortRow_1_SortIn.WHSEID;
					row7.EXTERNORDERKEY = current_tSortRow_1_SortIn.EXTERNORDERKEY;
					row7.EXTERNALORDERKEY2 = current_tSortRow_1_SortIn.EXTERNALORDERKEY2;
					row7.SUSR1 = current_tSortRow_1_SortIn.SUSR1;
					row7.ORDERDATE = current_tSortRow_1_SortIn.ORDERDATE;
					row7.SUSR2 = current_tSortRow_1_SortIn.SUSR2;
					row7.SUSR3 = current_tSortRow_1_SortIn.SUSR3;
					row7.SUSR4 = current_tSortRow_1_SortIn.SUSR4;
					row7.SUSR5 = current_tSortRow_1_SortIn.SUSR5;
					row7.ROUTE = current_tSortRow_1_SortIn.ROUTE;
					row7.CONSIGNEEKEY = current_tSortRow_1_SortIn.CONSIGNEEKEY;
					row7.EXTERNLNENO = current_tSortRow_1_SortIn.EXTERNLNENO;
					row7.SKU = current_tSortRow_1_SortIn.SKU;
					row7.QTY = current_tSortRow_1_SortIn.QTY;
					row7.UOM = current_tSortRow_1_SortIn.UOM;
					row7.LOTTABLE03 = current_tSortRow_1_SortIn.LOTTABLE03;
					row7.SHELFLIFE = current_tSortRow_1_SortIn.SHELFLIFE;
					row7.TYPE = current_tSortRow_1_SortIn.TYPE;
					row7.ValidWhseid = current_tSortRow_1_SortIn.ValidWhseid;
					row7.WHSEID_SAP = current_tSortRow_1_SortIn.WHSEID_SAP;
					row7.STORERKEY = current_tSortRow_1_SortIn.STORERKEY;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tMSSqlRow_8 main ] start
					 */

					currentComponent = "tMSSqlRow_8";

					row6 = row7;

					tos_count_tMSSqlRow_8++;

					/**
					 * [tMSSqlRow_8 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row10"
					// /////////////////////////////////////////////

					boolean forceLooprow10 = false;

					row10Struct row10ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						globalMap.put("sku", row6.SKU);

						globalMap.put("SCHEMA", row6.WHSEID);

						globalMap.put("STORERKEY", row6.STORERKEY);

						tMSSqlInput_2Process(globalMap);

						tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
								.get("tHash_Lookup_row10"));

						tHash_Lookup_row10.initGet();

						tHash_Lookup_row10.lookup(row10HashKey);

						if (!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

							forceLooprow10 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow10 = true;
					} // G 21

					row10Struct row10 = null;

					while ((tHash_Lookup_row10 != null && tHash_Lookup_row10
							.hasNext()) || forceLooprow10) { // G_TM_M_043

						// CALL close loop of lookup 'row10'

						row10Struct fromLookup_row10 = null;
						row10 = row10Default;

						if (!forceLooprow10) { // G 46

							fromLookup_row10 = tHash_Lookup_row10.next();

							if (fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}

						} // G 46

						forceLooprow10 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row11"
						// /////////////////////////////////////////////

						boolean forceLooprow11 = false;

						row11Struct row11ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							globalMap.put("CONSIGNEE", row6.CONSIGNEEKEY);

							globalMap.put("SCHEMA", row6.WHSEID);

							tMSSqlInput_3Process(globalMap);

							tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
									.get("tHash_Lookup_row11"));

							tHash_Lookup_row11.initGet();

							tHash_Lookup_row11.lookup(row11HashKey);

							if (!tHash_Lookup_row11.hasNext()) { // G_TM_M_090

								forceLooprow11 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow11 = true;
						} // G 21

						row11Struct row11 = null;

						while ((tHash_Lookup_row11 != null && tHash_Lookup_row11
								.hasNext()) || forceLooprow11) { // G_TM_M_043

							// CALL close loop of lookup 'row11'

							row11Struct fromLookup_row11 = null;
							row11 = row11Default;

							if (!forceLooprow11) { // G 46

								fromLookup_row11 = tHash_Lookup_row11.next();

								if (fromLookup_row11 != null) {
									row11 = fromLookup_row11;
								}

							} // G 46

							forceLooprow11 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row31"
							// /////////////////////////////////////////////

							boolean forceLooprow31 = false;

							row31Struct row31ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								globalMap.put("STORERKEY", row6.STORERKEY);

								globalMap.put("SCHEMA", row6.WHSEID);

								tMSSqlInput_12Process(globalMap);

								tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) globalMap
										.get("tHash_Lookup_row31"));

								tHash_Lookup_row31.initGet();

								tHash_Lookup_row31.lookup(row31HashKey);

								if (!tHash_Lookup_row31.hasNext()) { // G_TM_M_090

									forceLooprow31 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow31 = true;
							} // G 21

							row31Struct row31 = null;

							while ((tHash_Lookup_row31 != null && tHash_Lookup_row31
									.hasNext()) || forceLooprow31) { // G_TM_M_043

								// CALL close loop of lookup 'row31'

								row31Struct fromLookup_row31 = null;
								row31 = row31Default;

								if (!forceLooprow31) { // G 46

									fromLookup_row31 = tHash_Lookup_row31
											.next();

									if (fromLookup_row31 != null) {
										row31 = fromLookup_row31;
									}

								} // G 46

								forceLooprow31 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row37"
								// /////////////////////////////////////////////

								boolean forceLooprow37 = false;

								row37Struct row37ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									globalMap.put("WHSE1", row6.WHSEID);

									globalMap.put("EXTKEY1",
											row6.EXTERNORDERKEY);

									tMSSqlInput_14Process(globalMap);

									tHash_Lookup_row37 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) globalMap
											.get("tHash_Lookup_row37"));

									tHash_Lookup_row37.initGet();

									tHash_Lookup_row37.lookup(row37HashKey);

									if (!tHash_Lookup_row37.hasNext()) { // G_TM_M_090

										forceLooprow37 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow37 = true;
								} // G 21

								row37Struct row37 = null;

								while ((tHash_Lookup_row37 != null && tHash_Lookup_row37
										.hasNext()) || forceLooprow37) { // G_TM_M_043

									// CALL close loop of lookup 'row37'

									row37Struct fromLookup_row37 = null;
									row37 = row37Default;

									if (!forceLooprow37) { // G 46

										fromLookup_row37 = tHash_Lookup_row37
												.next();

										if (fromLookup_row37 != null) {
											row37 = fromLookup_row37;
										}

									} // G 46

									forceLooprow37 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row38"
									// /////////////////////////////////////////////

									boolean forceLooprow38 = false;

									row38Struct row38ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										globalMap.put("WHSE2", row6.WHSEID);

										globalMap.put("EXTKEY2",
												row6.EXTERNORDERKEY);

										globalMap.put("EXTLINE1",
												row6.EXTERNLNENO);

										tMSSqlInput_15Process(globalMap);

										tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) globalMap
												.get("tHash_Lookup_row38"));

										tHash_Lookup_row38.initGet();

										tHash_Lookup_row38.lookup(row38HashKey);

										if (!tHash_Lookup_row38.hasNext()) { // G_TM_M_090

											forceLooprow38 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow38 = true;
									} // G 21

									row38Struct row38 = null;

									while ((tHash_Lookup_row38 != null && tHash_Lookup_row38
											.hasNext()) || forceLooprow38) { // G_TM_M_043

										// CALL close loop of lookup 'row38'

										row38Struct fromLookup_row38 = null;
										row38 = row38Default;

										if (!forceLooprow38) { // G 46

											fromLookup_row38 = tHash_Lookup_row38
													.next();

											if (fromLookup_row38 != null) {
												row38 = fromLookup_row38;
											}

										} // G 46

										forceLooprow38 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_1__Struct Var = Var__tMap_1;
											Var.NEWSO = row6.EXTERNORDERKEY;
											Var.IsHeader = Var.NEWSO
													.equals(Var.OLDSO) ? "D"
													: "H";
											Var.OLDSO = Var.NEWSO;
											Var.WHCount = row6.ValidWhseid > 0 ? 1
													: 0;
											Var.WHTotal = Var.WHCount
													+ (Var.IsHeader.equals("H") ? 0
															: Var.WHTotal);
											Var.WhseidExists = (Var.WHCount + Var.WHTotal) > 0 ? false
													: true;
											Var.SKULine = row10.NUMSKU == 0 ? 1
													: 0;
											Var.SKUDoc = Var.SKULine
													+ (Var.IsHeader.equals("H") ? 0
															: Var.SKUDoc);
											Var.FailedSKU = Var.SKUDoc > 0 ? 1
													: 0;
											Var.CONSLine = row11.NUMCONS == 0 ? 1
													: 0;
											Var.CONSDoc = Var.CONSLine
													+ (Var.IsHeader.equals("H") ? 0
															: Var.CONSDoc);
											Var.FailedCons = Var.CONSDoc > 0 ? 1
													: 0;// ###############################
											// ###############################
											// # Output tables

											VALIDDATA = null;
											BLANKEXTERNORDERKEY = null;
											INVALIDSKU = null;
											INVALIDCONSIGNEE = null;
											INVALIDWHSEID = null;

											// # Output table : 'VALIDDATA'
											// # Filter conditions
											if (

											Var.WhseidExists
													&& row31.NUMSTR > 0
													&& row6.EXTERNORDERKEY != null
													&& row6.EXTERNORDERKEY
															.trim().length() > 0

											) {
												VALIDDATA_tmp.WHSEID = row6.WHSEID;
												VALIDDATA_tmp.EXTERNORDERKEY = row6.EXTERNORDERKEY;
												VALIDDATA_tmp.EXTERNALORDERKEY2 = row6.EXTERNALORDERKEY2;
												VALIDDATA_tmp.SUSR1 = row6.SUSR1;
												VALIDDATA_tmp.ORDERDATE = row6.ORDERDATE;
												VALIDDATA_tmp.SUSR2 = row6.SUSR2;
												VALIDDATA_tmp.SUSR3 = row6.SUSR3;
												VALIDDATA_tmp.SUSR4 = row6.SUSR4;
												VALIDDATA_tmp.SUSR5 = row6.SUSR5;
												VALIDDATA_tmp.ROUTE = row6.ROUTE;
												VALIDDATA_tmp.CONSIGNEEKEY = row6.CONSIGNEEKEY;
												VALIDDATA_tmp.EXTERNLNENO = row6.EXTERNLNENO;
												VALIDDATA_tmp.SKU = row6.SKU;
												VALIDDATA_tmp.QTY = row6.QTY;
												VALIDDATA_tmp.UOM = row6.UOM;
												VALIDDATA_tmp.LOTTABLE03 = row6.LOTTABLE03;
												VALIDDATA_tmp.SHELFLIFE = row6.SHELFLIFE;
												VALIDDATA_tmp.TYPE = row6.TYPE;
												VALIDDATA_tmp.ValidWhseid = row6.ValidWhseid;
												VALIDDATA_tmp.WHSEID_SAP = row6.WHSEID_SAP;
												VALIDDATA_tmp.FailedSKU = Var.FailedSKU;
												VALIDDATA_tmp.STORERKEY = row6.STORERKEY;
												VALIDDATA_tmp.FailedCons = Var.FailedCons;
												VALIDDATA_tmp.HDRCOUNT = row37.HDRCOUNT;
												VALIDDATA_tmp.DTLCOUNT = row38.DTLCOUNT;
												VALIDDATA = VALIDDATA_tmp;
											} // closing filter/reject

											// # Output table :
											// 'BLANKEXTERNORDERKEY'
											// # Filter conditions
											if (

											row6.EXTERNORDERKEY == null
													|| row6.EXTERNORDERKEY
															.trim().length() == 0

											) {
												BLANKEXTERNORDERKEY_tmp.ErrorMsg = "SO  import error!Externorderkey is blank!";
												BLANKEXTERNORDERKEY = BLANKEXTERNORDERKEY_tmp;
											} // closing filter/reject

											// # Output table : 'INVALIDSKU'
											// # Filter conditions
											if (

											row10.NUMSKU == 0

											) {
												INVALIDSKU_tmp.EXTERNORDERKEY = row6.EXTERNORDERKEY;
												INVALIDSKU_tmp.ErrorMsg = "SO Import error: Invalid SKU for externorderkey "
														+ row6.EXTERNORDERKEY;
												INVALIDSKU = INVALIDSKU_tmp;
											} // closing filter/reject

											// # Output table :
											// 'INVALIDCONSIGNEE'
											// # Filter conditions
											if (

											row11.NUMCONS == 0

											) {
												INVALIDCONSIGNEE_tmp.ErrorMsg = "SO Import error: Invalid consigneekey "
														+ row6.CONSIGNEEKEY
														+ "  for externorderkey "
														+ row6.EXTERNORDERKEY;
												INVALIDCONSIGNEE_tmp.EXTERNORDERKEY = row6.EXTERNORDERKEY;
												INVALIDCONSIGNEE = INVALIDCONSIGNEE_tmp;
											} // closing filter/reject

											// # Output table : 'INVALIDWHSEID'
											// # Filter conditions
											if (

											!Var.WhseidExists

											) {
												INVALIDWHSEID_tmp.WHSEID = row6.WHSEID_SAP;
												INVALIDWHSEID_tmp.EXTERNORDERKEY = row6.EXTERNORDERKEY;
												INVALIDWHSEID_tmp.ErrorMsg = "Invalid SAP WHSEID "
														+ row6.WHSEID_SAP
														+ " for Order "
														+ row6.EXTERNORDERKEY
														+ ".";
												INVALIDWHSEID = INVALIDWHSEID_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_1 = false;

										tos_count_tMap_1++;

										/**
										 * [tMap_1 main ] stop
										 */
										// Start of branch "VALIDDATA"
										if (VALIDDATA != null) {

											/**
											 * [tSortRow_3_SortOut main ] start
											 */

											currentVirtualComponent = "tSortRow_3";

											currentComponent = "tSortRow_3_SortOut";

											ComparableVALIDDATAStruct arrayRowtSortRow_3_SortOut = new ComparableVALIDDATAStruct();

											arrayRowtSortRow_3_SortOut.WHSEID = VALIDDATA.WHSEID;
											arrayRowtSortRow_3_SortOut.EXTERNORDERKEY = VALIDDATA.EXTERNORDERKEY;
											arrayRowtSortRow_3_SortOut.EXTERNALORDERKEY2 = VALIDDATA.EXTERNALORDERKEY2;
											arrayRowtSortRow_3_SortOut.SUSR1 = VALIDDATA.SUSR1;
											arrayRowtSortRow_3_SortOut.ORDERDATE = VALIDDATA.ORDERDATE;
											arrayRowtSortRow_3_SortOut.SUSR2 = VALIDDATA.SUSR2;
											arrayRowtSortRow_3_SortOut.SUSR3 = VALIDDATA.SUSR3;
											arrayRowtSortRow_3_SortOut.SUSR4 = VALIDDATA.SUSR4;
											arrayRowtSortRow_3_SortOut.SUSR5 = VALIDDATA.SUSR5;
											arrayRowtSortRow_3_SortOut.ROUTE = VALIDDATA.ROUTE;
											arrayRowtSortRow_3_SortOut.CONSIGNEEKEY = VALIDDATA.CONSIGNEEKEY;
											arrayRowtSortRow_3_SortOut.EXTERNLNENO = VALIDDATA.EXTERNLNENO;
											arrayRowtSortRow_3_SortOut.SKU = VALIDDATA.SKU;
											arrayRowtSortRow_3_SortOut.QTY = VALIDDATA.QTY;
											arrayRowtSortRow_3_SortOut.UOM = VALIDDATA.UOM;
											arrayRowtSortRow_3_SortOut.LOTTABLE03 = VALIDDATA.LOTTABLE03;
											arrayRowtSortRow_3_SortOut.SHELFLIFE = VALIDDATA.SHELFLIFE;
											arrayRowtSortRow_3_SortOut.TYPE = VALIDDATA.TYPE;
											arrayRowtSortRow_3_SortOut.ValidWhseid = VALIDDATA.ValidWhseid;
											arrayRowtSortRow_3_SortOut.WHSEID_SAP = VALIDDATA.WHSEID_SAP;
											arrayRowtSortRow_3_SortOut.FailedSKU = VALIDDATA.FailedSKU;
											arrayRowtSortRow_3_SortOut.STORERKEY = VALIDDATA.STORERKEY;
											arrayRowtSortRow_3_SortOut.FailedCons = VALIDDATA.FailedCons;
											arrayRowtSortRow_3_SortOut.HDRCOUNT = VALIDDATA.HDRCOUNT;
											arrayRowtSortRow_3_SortOut.DTLCOUNT = VALIDDATA.DTLCOUNT;
											list_tSortRow_3_SortOut
													.add(arrayRowtSortRow_3_SortOut);

											tos_count_tSortRow_3_SortOut++;

											/**
											 * [tSortRow_3_SortOut main ] stop
											 */

										} // End of branch "VALIDDATA"

										// Start of branch "BLANKEXTERNORDERKEY"
										if (BLANKEXTERNORDERKEY != null) {

											/**
											 * [tMSSqlRow_3 main ] start
											 */

											currentComponent = "tMSSqlRow_3";

											row4 = null;

											query_tMSSqlRow_3 = "INSERT INTO sip.EMAILALERT ( EMAILDISTLISTID, PID, ROOT_PID, FATHER_PID, PROJECT, JOB, CONTEXT, TYPE, SUBJECT, MESSAGE )\nVALUES ( '"
													+ context.DISTRIBUTIONLISTID
													+ "', '"
													+ pid
													+ "','"
													+ rootPid
													+ "','"
													+ fatherPid
													+ "','"
													+ projectName
													+ "','"
													+ jobName
													+ "','"
													+ contextStr
													+ "', 'ERROR', 'SO IMPORT ERROR', '"
													+ BLANKEXTERNORDERKEY.ErrorMsg
													+ "')";
											whetherReject_tMSSqlRow_3 = false;
											globalMap.put("tMSSqlRow_3_QUERY",
													query_tMSSqlRow_3);
											try {
												stmt_tMSSqlRow_3
														.execute(query_tMSSqlRow_3);

											} catch (java.lang.Exception e) {
												whetherReject_tMSSqlRow_3 = true;

												System.err
														.print(e.getMessage());

											}

											if (!whetherReject_tMSSqlRow_3) {

												row4 = new row4Struct();

												row4.ErrorMsg = BLANKEXTERNORDERKEY.ErrorMsg;

											}

											tos_count_tMSSqlRow_3++;

											/**
											 * [tMSSqlRow_3 main ] stop
											 */
											// Start of branch "row4"
											if (row4 != null) {

												/**
												 * [tMSSqlRow_1 main ] start
												 */

												currentComponent = "tMSSqlRow_1";

												query_tMSSqlRow_1 = "Update "
														+ context.SAP_DB_SCHEMA
														+ ".ZMM_EXP_OUTB_DEL set ZFLAG = '5' where VBELN_VA  is null or VBELN_VA  =' ' or VBELN_VA  ='' ";
												whetherReject_tMSSqlRow_1 = false;
												globalMap.put(
														"tMSSqlRow_1_QUERY",
														query_tMSSqlRow_1);
												try {
													stmt_tMSSqlRow_1
															.execute(query_tMSSqlRow_1);

												} catch (java.lang.Exception e) {
													whetherReject_tMSSqlRow_1 = true;

													System.err.print(e
															.getMessage());

												}

												tos_count_tMSSqlRow_1++;

												/**
												 * [tMSSqlRow_1 main ] stop
												 */

											} // End of branch "row4"

										} // End of branch "BLANKEXTERNORDERKEY"

										// Start of branch "INVALIDSKU"
										if (INVALIDSKU != null) {

											/**
											 * [tMSSqlRow_4 main ] start
											 */

											currentComponent = "tMSSqlRow_4";

											row2 = null;

											query_tMSSqlRow_4 = "INSERT INTO sip.EMAILALERT ( EMAILDISTLISTID, PID, ROOT_PID, FATHER_PID, PROJECT, JOB, CONTEXT, TYPE, SUBJECT, MESSAGE )\nVALUES ( '"
													+ context.DISTRIBUTIONLISTID
													+ "', '"
													+ pid
													+ "','"
													+ rootPid
													+ "','"
													+ fatherPid
													+ "','"
													+ projectName
													+ "','"
													+ jobName
													+ "','"
													+ contextStr
													+ "', 'ERROR', 'SO IMPORT ERROR', '"
													+ INVALIDSKU.ErrorMsg
													+ "')";
											whetherReject_tMSSqlRow_4 = false;
											globalMap.put("tMSSqlRow_4_QUERY",
													query_tMSSqlRow_4);
											try {
												stmt_tMSSqlRow_4
														.execute(query_tMSSqlRow_4);

											} catch (java.lang.Exception e) {
												whetherReject_tMSSqlRow_4 = true;

												System.err
														.print(e.getMessage());

											}

											if (!whetherReject_tMSSqlRow_4) {

												row2 = new row2Struct();

												row2.ErrorMsg = INVALIDSKU.ErrorMsg;

											}

											tos_count_tMSSqlRow_4++;

											/**
											 * [tMSSqlRow_4 main ] stop
											 */
											// Start of branch "row2"
											if (row2 != null) {

												/**
												 * [tMSSqlRow_5 main ] start
												 */

												currentComponent = "tMSSqlRow_5";

												query_tMSSqlRow_5 = "Update "
														+ context.SAP_DB_SCHEMA
														+ ".ZMM_EXP_OUTB_DEL\n set ZFLAG = '5' where VBELN_VA  ='"
														+ INVALIDSKU.EXTERNORDERKEY
														+ "'";
												whetherReject_tMSSqlRow_5 = false;
												globalMap.put(
														"tMSSqlRow_5_QUERY",
														query_tMSSqlRow_5);
												try {
													stmt_tMSSqlRow_5
															.execute(query_tMSSqlRow_5);

												} catch (java.lang.Exception e) {
													whetherReject_tMSSqlRow_5 = true;

													System.err.print(e
															.getMessage());

												}

												tos_count_tMSSqlRow_5++;

												/**
												 * [tMSSqlRow_5 main ] stop
												 */

											} // End of branch "row2"

										} // End of branch "INVALIDSKU"

										// Start of branch "INVALIDCONSIGNEE"
										if (INVALIDCONSIGNEE != null) {

											/**
											 * [tMSSqlRow_9 main ] start
											 */

											currentComponent = "tMSSqlRow_9";

											row12 = null;

											query_tMSSqlRow_9 = "INSERT INTO sip.EMAILALERT ( EMAILDISTLISTID, PID, ROOT_PID, FATHER_PID, PROJECT, JOB, CONTEXT, TYPE, SUBJECT, MESSAGE )\nVALUES ( '"
													+ context.DISTRIBUTIONLISTID
													+ "', '"
													+ pid
													+ "','"
													+ rootPid
													+ "','"
													+ fatherPid
													+ "','"
													+ projectName
													+ "','"
													+ jobName
													+ "','"
													+ contextStr
													+ "', 'ERROR', 'SO IMPORT ERROR', '"
													+ INVALIDCONSIGNEE.ErrorMsg
													+ "')";
											whetherReject_tMSSqlRow_9 = false;
											globalMap.put("tMSSqlRow_9_QUERY",
													query_tMSSqlRow_9);
											try {
												stmt_tMSSqlRow_9
														.execute(query_tMSSqlRow_9);

											} catch (java.lang.Exception e) {
												whetherReject_tMSSqlRow_9 = true;

												System.err
														.print(e.getMessage());

											}

											if (!whetherReject_tMSSqlRow_9) {

												row12 = new row12Struct();

												row12.ErrorMsg = INVALIDCONSIGNEE.ErrorMsg;

											}

											tos_count_tMSSqlRow_9++;

											/**
											 * [tMSSqlRow_9 main ] stop
											 */
											// Start of branch "row12"
											if (row12 != null) {

												/**
												 * [tMSSqlRow_10 main ] start
												 */

												currentComponent = "tMSSqlRow_10";

												query_tMSSqlRow_10 = "Update "
														+ context.SAP_DB_SCHEMA
														+ ".ZMM_EXP_OUTB_DEL\n set ZFLAG = '5' where VBELN_VA ='"
														+ INVALIDCONSIGNEE.EXTERNORDERKEY
														+ "'";
												whetherReject_tMSSqlRow_10 = false;
												globalMap.put(
														"tMSSqlRow_10_QUERY",
														query_tMSSqlRow_10);
												try {
													stmt_tMSSqlRow_10
															.execute(query_tMSSqlRow_10);

												} catch (java.lang.Exception e) {
													whetherReject_tMSSqlRow_10 = true;

													System.err.print(e
															.getMessage());

												}

												tos_count_tMSSqlRow_10++;

												/**
												 * [tMSSqlRow_10 main ] stop
												 */

											} // End of branch "row12"

										} // End of branch "INVALIDCONSIGNEE"

										// Start of branch "INVALIDWHSEID"
										if (INVALIDWHSEID != null) {

											/**
											 * [tMSSqlRow_13 main ] start
											 */

											currentComponent = "tMSSqlRow_13";

											row28 = null;

											query_tMSSqlRow_13 = "INSERT INTO sip.EMAILALERT ( EMAILDISTLISTID, PID, ROOT_PID, FATHER_PID, PROJECT, JOB, CONTEXT, TYPE, SUBJECT, MESSAGE )\nVALUES ( '"
													+ context.DISTRIBUTIONLISTID
													+ "', '"
													+ pid
													+ "','"
													+ rootPid
													+ "','"
													+ fatherPid
													+ "','"
													+ projectName
													+ "','"
													+ jobName
													+ "','"
													+ contextStr
													+ "', 'ERROR', 'SO IMPORT ERROR', '"
													+ INVALIDWHSEID.ErrorMsg
													+ "')";
											whetherReject_tMSSqlRow_13 = false;
											globalMap.put("tMSSqlRow_13_QUERY",
													query_tMSSqlRow_13);
											try {
												stmt_tMSSqlRow_13
														.execute(query_tMSSqlRow_13);

											} catch (java.lang.Exception e) {
												whetherReject_tMSSqlRow_13 = true;

												System.err
														.print(e.getMessage());

											}

											if (!whetherReject_tMSSqlRow_13) {

												row28 = new row28Struct();

												row28.WHSEID = INVALIDWHSEID.WHSEID;

												row28.EXTERNORDERKEY = INVALIDWHSEID.EXTERNORDERKEY;

												row28.ErrorMsg = INVALIDWHSEID.ErrorMsg;

											}

											tos_count_tMSSqlRow_13++;

											/**
											 * [tMSSqlRow_13 main ] stop
											 */
											// Start of branch "row28"
											if (row28 != null) {

												/**
												 * [tMSSqlRow_15 main ] start
												 */

												currentComponent = "tMSSqlRow_15";

												query_tMSSqlRow_15 = "Update "
														+ context.SAP_DB_SCHEMA
														+ ".ZMM_EXP_OUTB_DEL \n set ZFLAG = '5' where VBELN_VA ='"
														+ INVALIDWHSEID.EXTERNORDERKEY
														+ "'";
												whetherReject_tMSSqlRow_15 = false;
												globalMap.put(
														"tMSSqlRow_15_QUERY",
														query_tMSSqlRow_15);
												try {
													stmt_tMSSqlRow_15
															.execute(query_tMSSqlRow_15);

												} catch (java.lang.Exception e) {
													whetherReject_tMSSqlRow_15 = true;

													System.err.print(e
															.getMessage());

												}

												tos_count_tMSSqlRow_15++;

												/**
												 * [tMSSqlRow_15 main ] stop
												 */

											} // End of branch "row28"

										} // End of branch "INVALIDWHSEID"

									} // close loop of lookup 'row38' //
										// G_TM_M_043

								} // close loop of lookup 'row37' // G_TM_M_043

							} // close loop of lookup 'row31' // G_TM_M_043

						} // close loop of lookup 'row11' // G_TM_M_043

					} // close loop of lookup 'row10' // G_TM_M_043

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE",
						nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tMSSqlRow_8 end ] start
				 */

				currentComponent = "tMSSqlRow_8";

				ok_Hash.put("tMSSqlRow_8", true);
				end_Hash.put("tMSSqlRow_8", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_8 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				if (tHash_Lookup_row11 != null) {
					tHash_Lookup_row11.endGet();
				}
				globalMap.remove("tHash_Lookup_row11");

				if (tHash_Lookup_row31 != null) {
					tHash_Lookup_row31.endGet();
				}
				globalMap.remove("tHash_Lookup_row31");

				if (tHash_Lookup_row37 != null) {
					tHash_Lookup_row37.endGet();
				}
				globalMap.remove("tHash_Lookup_row37");

				if (tHash_Lookup_row38 != null) {
					tHash_Lookup_row38.endGet();
				}
				globalMap.remove("tHash_Lookup_row38");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				VALIDDATAStruct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut
						.toArray(new ComparableVALIDDATAStruct[0]);

				java.util.Arrays.sort(array_tSortRow_3_SortOut);

				globalMap.put("tSortRow_3", array_tSortRow_3_SortOut);

				ok_Hash.put("tSortRow_3_SortOut", true);
				end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortOut end ] stop
				 */

				/**
				 * [tMSSqlRow_25 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_25", false);
				start_Hash.put("tMSSqlRow_25", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_25";

				int tos_count_tMSSqlRow_25 = 0;

				java.sql.Connection conn_tMSSqlRow_25 = null;
				String query_tMSSqlRow_25 = "";
				boolean whetherReject_tMSSqlRow_25 = false;
				conn_tMSSqlRow_25 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlRow_25 = conn_tMSSqlRow_25
						.createStatement();

				/**
				 * [tMSSqlRow_25 begin ] stop
				 */

				/**
				 * [tMSSqlRow_20 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_20", false);
				start_Hash.put("tMSSqlRow_20", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_20";

				int tos_count_tMSSqlRow_20 = 0;

				java.sql.Connection conn_tMSSqlRow_20 = null;
				String query_tMSSqlRow_20 = "";
				boolean whetherReject_tMSSqlRow_20 = false;
				conn_tMSSqlRow_20 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_2");

				java.sql.Statement stmt_tMSSqlRow_20 = conn_tMSSqlRow_20
						.createStatement();

				/**
				 * [tMSSqlRow_20 begin ] stop
				 */

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tMSSqlRow_18 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_18", false);
				start_Hash.put("tMSSqlRow_18", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_18";

				int tos_count_tMSSqlRow_18 = 0;

				java.sql.Connection conn_tMSSqlRow_18 = null;
				String query_tMSSqlRow_18 = "";
				boolean whetherReject_tMSSqlRow_18 = false;
				conn_tMSSqlRow_18 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlRow_18 = conn_tMSSqlRow_18
						.createStatement();

				/**
				 * [tMSSqlRow_18 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[35];

					public void addRow(String[] row) {

						for (int i = 0; i < 35; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 34 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 34 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|%28$-");
							sbformat.append(colLengths[27]);
							sbformat.append("s");

							sbformat.append("|%29$-");
							sbformat.append(colLengths[28]);
							sbformat.append("s");

							sbformat.append("|%30$-");
							sbformat.append(colLengths[29]);
							sbformat.append("s");

							sbformat.append("|%31$-");
							sbformat.append(colLengths[30]);
							sbformat.append("s");

							sbformat.append("|%32$-");
							sbformat.append(colLengths[31]);
							sbformat.append("s");

							sbformat.append("|%33$-");
							sbformat.append(colLengths[32]);
							sbformat.append("s");

							sbformat.append("|%34$-");
							sbformat.append(colLengths[33]);
							sbformat.append("s");

							sbformat.append("|%35$-");
							sbformat.append(colLengths[34]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[26]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[27]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[28]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[29]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[30]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[31]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[32]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[33]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[34]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("HDR");
				util_tLogRow_2.addRow(new String[] { "CONSIGNEEKEY", "TYPE",
						"EXTERNORDERKEY", "ORDERDATE", "ISHEADER", "ORDERKEY",
						"CONTACT1", "CONTACT2", "COMPANY", "ADDRESS1",
						"ADDRESS2", "ADDRESS3", "ADDRESS4", "ADDRESS5",
						"ADDRESS6", "CITY", "STATE", "ZIP", "COUNTRY",
						"ISOCOUNTRY", "PHONE1", "FAX2", "VAT",
						"EXTERNALORDERKEY2", "SUSR1", "SUSR2", "SUSR3",
						"SUSR4", "ROUTE", "FAX1", "WHSEID", "SUSR5",
						"STORERKEY", "HDRCOUNT", "DTLCOUNT", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tMSSqlRow_22 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_22", false);
				start_Hash.put("tMSSqlRow_22", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_22";

				int tos_count_tMSSqlRow_22 = 0;

				java.sql.Connection conn_tMSSqlRow_22 = null;
				String query_tMSSqlRow_22 = "";
				boolean whetherReject_tMSSqlRow_22 = false;
				conn_tMSSqlRow_22 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlRow_22 = conn_tMSSqlRow_22
						.createStatement();

				/**
				 * [tMSSqlRow_22 begin ] stop
				 */

				/**
				 * [tMSSqlRow_24 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_24", false);
				start_Hash.put("tMSSqlRow_24", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_24";

				int tos_count_tMSSqlRow_24 = 0;

				java.sql.Connection conn_tMSSqlRow_24 = null;
				String query_tMSSqlRow_24 = "";
				boolean whetherReject_tMSSqlRow_24 = false;
				conn_tMSSqlRow_24 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_2");

				java.sql.Statement stmt_tMSSqlRow_24 = conn_tMSSqlRow_24
						.createStatement();

				/**
				 * [tMSSqlRow_24 begin ] stop
				 */

				/**
				 * [tMSSqlRow_23 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_23", false);
				start_Hash.put("tMSSqlRow_23", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_23";

				int tos_count_tMSSqlRow_23 = 0;

				java.sql.Connection conn_tMSSqlRow_23 = null;
				String query_tMSSqlRow_23 = "";
				boolean whetherReject_tMSSqlRow_23 = false;
				conn_tMSSqlRow_23 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlRow_23 = conn_tMSSqlRow_23
						.createStatement();

				/**
				 * [tMSSqlRow_23 begin ] stop
				 */

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */

				/**
				 * [tMSSqlRow_19 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_19", false);
				start_Hash.put("tMSSqlRow_19", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_19";

				int tos_count_tMSSqlRow_19 = 0;

				java.sql.Connection conn_tMSSqlRow_19 = null;
				String query_tMSSqlRow_19 = "";
				boolean whetherReject_tMSSqlRow_19 = false;
				conn_tMSSqlRow_19 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlRow_19 = conn_tMSSqlRow_19
						.createStatement();

				/**
				 * [tMSSqlRow_19 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				// /////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[18];

					public void addRow(String[] row) {

						for (int i = 0; i < 18; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 17 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 17 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[17]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("DTL");
				util_tLogRow_3.addRow(new String[] { "ORDERKEY", "WMSLINENO",
						"DESCR", "PACKKEY", "EXTERNLINENO", "SKU", "QTY",
						"UOM", "ROTATION", "SHELFLIFE",
						"PREALLOCATESTRATEGYKEY", "ALLOCATESTRATEGYKEY",
						"NEWALLOCATIONSTRATEGY", "EXTERNORDERKEY", "WHSEID",
						"STORERKEY", "HDRCOUNT", "DTLCOUNT", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
				// /////////////////////

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tSortRow_2_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortOut", false);
				start_Hash
						.put("tSortRow_2_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				int tos_count_tSortRow_2_SortOut = 0;

				class Comparablerow32Struct extends row32Struct implements
						Comparable<Comparablerow32Struct> {

					public int compareTo(Comparablerow32Struct other) {

						if (this.WHSEID == null && other.WHSEID != null) {
							return -1;

						} else if (this.WHSEID != null && other.WHSEID == null) {
							return 1;

						} else if (this.WHSEID != null && other.WHSEID != null) {
							if (!this.WHSEID.equals(other.WHSEID)) {
								return this.WHSEID.compareTo(other.WHSEID);
							}
						}
						if (this.WMSKEY == null && other.WMSKEY != null) {
							return -1;

						} else if (this.WMSKEY != null && other.WMSKEY == null) {
							return 1;

						} else if (this.WMSKEY != null && other.WMSKEY != null) {
							if (!this.WMSKEY.equals(other.WMSKEY)) {
								return this.WMSKEY.compareTo(other.WMSKEY);
							}
						}
						if (this.TCUB == null && other.TCUB != null) {
							return -1;

						} else if (this.TCUB != null && other.TCUB == null) {
							return 1;

						} else if (this.TCUB != null && other.TCUB != null) {
							if (!this.TCUB.equals(other.TCUB)) {
								return this.TCUB.compareTo(other.TCUB);
							}
						}
						if (this.TWGT == null && other.TWGT != null) {
							return -1;

						} else if (this.TWGT != null && other.TWGT == null) {
							return 1;

						} else if (this.TWGT != null && other.TWGT != null) {
							if (!this.TWGT.equals(other.TWGT)) {
								return this.TWGT.compareTo(other.TWGT);
							}
						}
						if (this.TQTY == null && other.TQTY != null) {
							return -1;

						} else if (this.TQTY != null && other.TQTY == null) {
							return 1;

						} else if (this.TQTY != null && other.TQTY != null) {
							if (!this.TQTY.equals(other.TQTY)) {
								return this.TQTY.compareTo(other.TQTY);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow32Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow32Struct>();

				/**
				 * [tSortRow_2_SortOut begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				int tos_count_tLogRow_5 = 0;

				// /////////////////////

				class Util_tLogRow_5 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
				util_tLogRow_5.setTableName("HDR_TOTALS");
				util_tLogRow_5.addRow(new String[] { "WHSEID", "WMSKEY",
						"TCUB", "TWGT", "TQTY", });
				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
				// /////////////////////

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = null;

				row40Struct row40HashKey = new row40Struct();
				row40Struct row40Default = new row40Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = null;

				row30Struct row30HashKey = new row30Struct();
				row30Struct row30Default = new row30Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8_0Struct> tHash_Lookup_row8_0 = null;

				row8_0Struct row8_0HashKey = new row8_0Struct();
				row8_0Struct row8_0Default = new row8_0Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = null;

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = null;

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = null;

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = null;

				row35Struct row35HashKey = new row35Struct();
				row35Struct row35Default = new row35Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = null;

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = null;

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = null;

				row39Struct row39HashKey = new row39Struct();
				row39Struct row39Default = new row39Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
					String PREVSO;
					String EXTERNORDERKEY;
					String ISHEADER;
					String OLDEXTERNORDERKEY;
					Object DUMMY;
					int WMSLINENO;
					int OLDLINENO;
					String ORDERKEY;
					Object var1;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				INSERTHEADERStruct INSERTHEADER_tmp = new INSERTHEADERStruct();
				INSERTDETAILStruct INSERTDETAIL_tmp = new INSERTDETAILStruct();
				HDRTOTALSStruct HDRTOTALS_tmp = new HDRTOTALSStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[25];

					public void addRow(String[] row) {

						for (int i = 0; i < 25; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 24 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 24 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[24]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("Data For Insert");
				util_tLogRow_1.addRow(new String[] { "WHSEID",
						"EXTERNORDERKEY", "EXTERNALORDERKEY2", "SUSR1",
						"ORDERDATE", "SUSR2", "SUSR3", "SUSR4", "SUSR5",
						"ROUTE", "CONSIGNEEKEY", "EXTERNLNENO", "SKU", "QTY",
						"UOM", "LOTTABLE03", "SHELFLIFE", "TYPE",
						"ValidWhseid", "WHSEID_SAP", "FailedSKU", "STORERKEY",
						"FailedCons", "HDRCOUNT", "DTLCOUNT", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
					String NEWKEY;
					boolean IsHeader;
					String OLDKEY;
					int SKUCount;
					int SKUTotal;
					boolean SKUExists;
					int CONSCount;
					int CONSTotal;
					boolean CONSExists;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				FINAL_DATAStruct FINAL_DATA_tmp = new FINAL_DATAStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tSortRow_3_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortIn", false);
				start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				int tos_count_tSortRow_3_SortIn = 0;

				VALIDDATAStruct[] array_tSortRow_3_SortIn = (VALIDDATAStruct[]) globalMap
						.get("tSortRow_3");

				int nb_line_tSortRow_3_SortIn = 0;

				VALIDDATAStruct current_tSortRow_3_SortIn = null;

				for (int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++) {
					current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
					row29.WHSEID = current_tSortRow_3_SortIn.WHSEID;
					row29.EXTERNORDERKEY = current_tSortRow_3_SortIn.EXTERNORDERKEY;
					row29.EXTERNALORDERKEY2 = current_tSortRow_3_SortIn.EXTERNALORDERKEY2;
					row29.SUSR1 = current_tSortRow_3_SortIn.SUSR1;
					row29.ORDERDATE = current_tSortRow_3_SortIn.ORDERDATE;
					row29.SUSR2 = current_tSortRow_3_SortIn.SUSR2;
					row29.SUSR3 = current_tSortRow_3_SortIn.SUSR3;
					row29.SUSR4 = current_tSortRow_3_SortIn.SUSR4;
					row29.SUSR5 = current_tSortRow_3_SortIn.SUSR5;
					row29.ROUTE = current_tSortRow_3_SortIn.ROUTE;
					row29.CONSIGNEEKEY = current_tSortRow_3_SortIn.CONSIGNEEKEY;
					row29.EXTERNLNENO = current_tSortRow_3_SortIn.EXTERNLNENO;
					row29.SKU = current_tSortRow_3_SortIn.SKU;
					row29.QTY = current_tSortRow_3_SortIn.QTY;
					row29.UOM = current_tSortRow_3_SortIn.UOM;
					row29.LOTTABLE03 = current_tSortRow_3_SortIn.LOTTABLE03;
					row29.SHELFLIFE = current_tSortRow_3_SortIn.SHELFLIFE;
					row29.TYPE = current_tSortRow_3_SortIn.TYPE;
					row29.ValidWhseid = current_tSortRow_3_SortIn.ValidWhseid;
					row29.WHSEID_SAP = current_tSortRow_3_SortIn.WHSEID_SAP;
					row29.FailedSKU = current_tSortRow_3_SortIn.FailedSKU;
					row29.STORERKEY = current_tSortRow_3_SortIn.STORERKEY;
					row29.FailedCons = current_tSortRow_3_SortIn.FailedCons;
					row29.HDRCOUNT = current_tSortRow_3_SortIn.HDRCOUNT;
					row29.DTLCOUNT = current_tSortRow_3_SortIn.DTLCOUNT;
					// increase number of line sorted
					nb_line_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_3_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					tos_count_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn main ] stop
					 */

					/**
					 * [tMap_4 main ] start
					 */

					currentComponent = "tMap_4";

					boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_4 = false;
					boolean mainRowRejected_tMap_4 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_4__Struct Var = Var__tMap_4;
						Var.NEWKEY = row29.EXTERNORDERKEY;
						Var.IsHeader = Var.NEWKEY.equals(Var.OLDKEY) ? false
								: true;
						Var.OLDKEY = Var.NEWKEY;
						Var.SKUCount = row29.FailedSKU > 0 ? 1 : 0;
						Var.SKUTotal = Var.SKUCount
								+ (Var.IsHeader ? 0 : Var.SKUTotal);
						Var.SKUExists = (Var.SKUCount + Var.SKUTotal) > 0 ? false
								: true;
						Var.CONSCount = row29.FailedCons > 0 ? 1 : 0;
						Var.CONSTotal = Var.CONSCount
								+ (Var.IsHeader ? 0 : Var.CONSTotal);
						Var.CONSExists = (Var.CONSCount + Var.CONSTotal) > 0 ? false
								: true;// ###############################
						// ###############################
						// # Output tables

						FINAL_DATA = null;

						// # Output table : 'FINAL_DATA'
						// # Filter conditions
						if (

						Var.SKUExists && Var.CONSExists

						) {
							FINAL_DATA_tmp.WHSEID = row29.WHSEID;
							FINAL_DATA_tmp.EXTERNORDERKEY = row29.EXTERNORDERKEY;
							FINAL_DATA_tmp.EXTERNALORDERKEY2 = row29.EXTERNALORDERKEY2;
							FINAL_DATA_tmp.SUSR1 = row29.SUSR1;
							FINAL_DATA_tmp.ORDERDATE = row29.ORDERDATE;
							FINAL_DATA_tmp.SUSR2 = row29.SUSR2;
							FINAL_DATA_tmp.SUSR3 = row29.SUSR3;
							FINAL_DATA_tmp.SUSR4 = row29.SUSR4;
							FINAL_DATA_tmp.SUSR5 = row29.SUSR5;
							FINAL_DATA_tmp.ROUTE = row29.ROUTE;
							FINAL_DATA_tmp.CONSIGNEEKEY = row29.CONSIGNEEKEY;
							FINAL_DATA_tmp.EXTERNLNENO = row29.EXTERNLNENO;
							FINAL_DATA_tmp.SKU = row29.SKU;
							FINAL_DATA_tmp.QTY = row29.QTY;
							FINAL_DATA_tmp.UOM = row29.UOM;
							FINAL_DATA_tmp.LOTTABLE03 = row29.LOTTABLE03;
							FINAL_DATA_tmp.SHELFLIFE = row29.SHELFLIFE;
							FINAL_DATA_tmp.TYPE = row29.TYPE;
							FINAL_DATA_tmp.ValidWhseid = row29.ValidWhseid;
							FINAL_DATA_tmp.WHSEID_SAP = row29.WHSEID_SAP;
							FINAL_DATA_tmp.FailedSKU = row29.FailedSKU;
							FINAL_DATA_tmp.STORERKEY = row29.STORERKEY;
							FINAL_DATA_tmp.FailedCons = row29.FailedCons;
							FINAL_DATA_tmp.HDRCOUNT = row29.HDRCOUNT;
							FINAL_DATA_tmp.DTLCOUNT = row29.DTLCOUNT;
							FINAL_DATA = FINAL_DATA_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_4 = false;

					tos_count_tMap_4++;

					/**
					 * [tMap_4 main ] stop
					 */
					// Start of branch "FINAL_DATA"
					if (FINAL_DATA != null) {

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						// /////////////////////

						String[] row_tLogRow_1 = new String[25];

						if (FINAL_DATA.WHSEID != null) { //
							row_tLogRow_1[0] = String
									.valueOf(FINAL_DATA.WHSEID);

						} //

						if (FINAL_DATA.EXTERNORDERKEY != null) { //
							row_tLogRow_1[1] = String
									.valueOf(FINAL_DATA.EXTERNORDERKEY);

						} //

						if (FINAL_DATA.EXTERNALORDERKEY2 != null) { //
							row_tLogRow_1[2] = String
									.valueOf(FINAL_DATA.EXTERNALORDERKEY2);

						} //

						if (FINAL_DATA.SUSR1 != null) { //
							row_tLogRow_1[3] = String.valueOf(FINAL_DATA.SUSR1);

						} //

						if (FINAL_DATA.ORDERDATE != null) { //
							row_tLogRow_1[4] = String
									.valueOf(FINAL_DATA.ORDERDATE);

						} //

						if (FINAL_DATA.SUSR2 != null) { //
							row_tLogRow_1[5] = String.valueOf(FINAL_DATA.SUSR2);

						} //

						if (FINAL_DATA.SUSR3 != null) { //
							row_tLogRow_1[6] = String.valueOf(FINAL_DATA.SUSR3);

						} //

						if (FINAL_DATA.SUSR4 != null) { //
							row_tLogRow_1[7] = String.valueOf(FINAL_DATA.SUSR4);

						} //

						if (FINAL_DATA.SUSR5 != null) { //
							row_tLogRow_1[8] = String.valueOf(FINAL_DATA.SUSR5);

						} //

						if (FINAL_DATA.ROUTE != null) { //
							row_tLogRow_1[9] = String.valueOf(FINAL_DATA.ROUTE);

						} //

						if (FINAL_DATA.CONSIGNEEKEY != null) { //
							row_tLogRow_1[10] = String
									.valueOf(FINAL_DATA.CONSIGNEEKEY);

						} //

						if (FINAL_DATA.EXTERNLNENO != null) { //
							row_tLogRow_1[11] = String
									.valueOf(FINAL_DATA.EXTERNLNENO);

						} //

						if (FINAL_DATA.SKU != null) { //
							row_tLogRow_1[12] = String.valueOf(FINAL_DATA.SKU);

						} //

						row_tLogRow_1[13] = FormatterUtils
								.formatUnwithE(FINAL_DATA.QTY);

						if (FINAL_DATA.UOM != null) { //
							row_tLogRow_1[14] = String.valueOf(FINAL_DATA.UOM);

						} //

						if (FINAL_DATA.LOTTABLE03 != null) { //
							row_tLogRow_1[15] = String
									.valueOf(FINAL_DATA.LOTTABLE03);

						} //

						row_tLogRow_1[16] = String
								.valueOf(FINAL_DATA.SHELFLIFE);

						if (FINAL_DATA.TYPE != null) { //
							row_tLogRow_1[17] = String.valueOf(FINAL_DATA.TYPE);

						} //

						row_tLogRow_1[18] = String
								.valueOf(FINAL_DATA.ValidWhseid);

						if (FINAL_DATA.WHSEID_SAP != null) { //
							row_tLogRow_1[19] = String
									.valueOf(FINAL_DATA.WHSEID_SAP);

						} //

						row_tLogRow_1[20] = String
								.valueOf(FINAL_DATA.FailedSKU);

						if (FINAL_DATA.STORERKEY != null) { //
							row_tLogRow_1[21] = String
									.valueOf(FINAL_DATA.STORERKEY);

						} //

						row_tLogRow_1[22] = String
								.valueOf(FINAL_DATA.FailedCons);

						if (FINAL_DATA.HDRCOUNT != null) { //
							row_tLogRow_1[23] = String
									.valueOf(FINAL_DATA.HDRCOUNT);

						} //

						if (FINAL_DATA.DTLCOUNT != null) { //
							row_tLogRow_1[24] = String
									.valueOf(FINAL_DATA.DTLCOUNT);

						} //

						util_tLogRow_1.addRow(row_tLogRow_1);
						nb_line_tLogRow_1++;
						// ////

						// ////

						// /////////////////////

						row15 = FINAL_DATA;

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row40"
						// /////////////////////////////////////////////

						boolean forceLooprow40 = false;

						row40Struct row40ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							globalMap.put("R_STOR", row15.STORERKEY);

							globalMap.put("R_QTY", row15.QTY);

							globalMap.put("R_SKU", row15.SKU);

							globalMap.put("R_WHSE", row15.WHSEID);

							tMSSqlInput_17Process(globalMap);

							tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) globalMap
									.get("tHash_Lookup_row40"));

							tHash_Lookup_row40.initGet();

							tHash_Lookup_row40.lookup(row40HashKey);

							if (!tHash_Lookup_row40.hasNext()) { // G_TM_M_090

								forceLooprow40 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow40 = true;
						} // G 21

						row40Struct row40 = null;

						while ((tHash_Lookup_row40 != null && tHash_Lookup_row40
								.hasNext()) || forceLooprow40) { // G_TM_M_043

							// CALL close loop of lookup 'row40'

							row40Struct fromLookup_row40 = null;
							row40 = row40Default;

							if (!forceLooprow40) { // G 46

								fromLookup_row40 = tHash_Lookup_row40.next();

								if (fromLookup_row40 != null) {
									row40 = fromLookup_row40;
								}

							} // G 46

							forceLooprow40 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row30"
							// /////////////////////////////////////////////

							boolean forceLooprow30 = false;

							row30Struct row30ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								globalMap.put("WHSE", row15.WHSEID);

								globalMap.put("EXTKEY", row15.EXTERNORDERKEY);

								tMSSqlInput_13Process(globalMap);

								tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) globalMap
										.get("tHash_Lookup_row30"));

								tHash_Lookup_row30.initGet();

								tHash_Lookup_row30.lookup(row30HashKey);

								if (!tHash_Lookup_row30.hasNext()) { // G_TM_M_090

									forceLooprow30 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow30 = true;
							} // G 21

							row30Struct row30 = null;

							while ((tHash_Lookup_row30 != null && tHash_Lookup_row30
									.hasNext()) || forceLooprow30) { // G_TM_M_043

								// CALL close loop of lookup 'row30'

								row30Struct fromLookup_row30 = null;
								row30 = row30Default;

								if (!forceLooprow30) { // G 46

									fromLookup_row30 = tHash_Lookup_row30
											.next();

									if (fromLookup_row30 != null) {
										row30 = fromLookup_row30;
									}

								} // G 46

								forceLooprow30 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row8_0"
								// /////////////////////////////////////////////

								boolean forceLooprow8_0 = false;

								row8_0Struct row8_0ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									globalMap.put("CONS", row15.CONSIGNEEKEY);

									globalMap.put("SCHEMA", row15.WHSEID);

									tMSSqlInput_11Process(globalMap);

									tHash_Lookup_row8_0 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8_0Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8_0Struct>) globalMap
											.get("tHash_Lookup_row8_0"));

									tHash_Lookup_row8_0.initGet();

									tHash_Lookup_row8_0.lookup(row8_0HashKey);

									if (!tHash_Lookup_row8_0.hasNext()) { // G_TM_M_090

										forceLooprow8_0 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow8_0 = true;
								} // G 21

								row8_0Struct row8_0 = null;

								while ((tHash_Lookup_row8_0 != null && tHash_Lookup_row8_0
										.hasNext()) || forceLooprow8_0) { // G_TM_M_043

									// CALL close loop of lookup 'row8_0'

									row8_0Struct fromLookup_row8_0 = null;
									row8_0 = row8_0Default;

									if (!forceLooprow8_0) { // G 46

										fromLookup_row8_0 = tHash_Lookup_row8_0
												.next();

										if (fromLookup_row8_0 != null) {
											row8_0 = fromLookup_row8_0;
										}

									} // G 46

									forceLooprow8_0 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row13"
									// /////////////////////////////////////////////

									boolean forceLooprow13 = false;

									row13Struct row13ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

										globalMap.put("EXTERNORDERKEY1",
												row15.EXTERNORDERKEY);

										globalMap.put("SCHEMA", row15.WHSEID);

										tMSSqlInput_7Process(globalMap);

										tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
												.get("tHash_Lookup_row13"));

										tHash_Lookup_row13.initGet();

										tHash_Lookup_row13.lookup(row13HashKey);

										if (!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

											forceLooprow13 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow13 = true;
									} // G 21

									row13Struct row13 = null;

									while ((tHash_Lookup_row13 != null && tHash_Lookup_row13
											.hasNext()) || forceLooprow13) { // G_TM_M_043

										// CALL close loop of lookup 'row13'

										row13Struct fromLookup_row13 = null;
										row13 = row13Default;

										if (!forceLooprow13) { // G 46

											fromLookup_row13 = tHash_Lookup_row13
													.next();

											if (fromLookup_row13 != null) {
												row13 = fromLookup_row13;
											}

										} // G 46

										forceLooprow13 = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table "row14"
										// /////////////////////////////////////////////

										boolean forceLooprow14 = false;

										row14Struct row14ObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

											globalMap
													.put("HEADER",
															row15.EXTERNORDERKEY
																	.equals((String) globalMap
																			.get("OLDEXTERNORDERKEY")) ? "D"
																	: "H");

											globalMap
													.put("ORDERKEY",
															row13.ORDERKEY == null ? " "
																	: row13.ORDERKEY);

											globalMap.put("SCHEMA",
													row15.WHSEID);

											tMSSqlInput_9Process(globalMap);

											tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
													.get("tHash_Lookup_row14"));

											tHash_Lookup_row14.initGet();

											tHash_Lookup_row14
													.lookup(row14HashKey);

											if (!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

												forceLooprow14 = true;

											} // G_TM_M_090

										} // G_TM_M_020

										else { // G 20 - G 21
											forceLooprow14 = true;
										} // G 21

										row14Struct row14 = null;

										while ((tHash_Lookup_row14 != null && tHash_Lookup_row14
												.hasNext()) || forceLooprow14) { // G_TM_M_043

											// CALL close loop of lookup 'row14'

											row14Struct fromLookup_row14 = null;
											row14 = row14Default;

											if (!forceLooprow14) { // G 46

												fromLookup_row14 = tHash_Lookup_row14
														.next();

												if (fromLookup_row14 != null) {
													row14 = fromLookup_row14;
												}

											} // G 46

											forceLooprow14 = false;

											// /////////////////////////////////////////////
											// Starting Lookup Table "row24"
											// /////////////////////////////////////////////

											boolean forceLooprow24 = false;

											row24Struct row24ObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

												globalMap.put("DET_SKU",
														row15.SKU);

												globalMap.put("DET_WHSE",
														row15.WHSEID);

												globalMap.put("DET_STOR",
														row15.STORERKEY);

												tMSSqlInput_6Process(globalMap);

												tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
														.get("tHash_Lookup_row24"));

												tHash_Lookup_row24.initGet();

												tHash_Lookup_row24
														.lookup(row24HashKey);

												if (!tHash_Lookup_row24
														.hasNext()) { // G_TM_M_090

													forceLooprow24 = true;

												} // G_TM_M_090

											} // G_TM_M_020

											else { // G 20 - G 21
												forceLooprow24 = true;
											} // G 21

											row24Struct row24 = null;

											while ((tHash_Lookup_row24 != null && tHash_Lookup_row24
													.hasNext())
													|| forceLooprow24) { // G_TM_M_043

												// CALL close loop of lookup
												// 'row24'

												row24Struct fromLookup_row24 = null;
												row24 = row24Default;

												if (!forceLooprow24) { // G 46

													fromLookup_row24 = tHash_Lookup_row24
															.next();

													if (fromLookup_row24 != null) {
														row24 = fromLookup_row24;
													}

												} // G 46

												forceLooprow24 = false;

												// /////////////////////////////////////////////
												// Starting Lookup Table "row35"
												// /////////////////////////////////////////////

												boolean forceLooprow35 = false;

												row35Struct row35ObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

													globalMap
															.put("EXTERNORDERKEY1",
																	row15.EXTERNORDERKEY);

													globalMap.put("LINENO",
															row15.EXTERNLNENO);

													globalMap.put("SCHEMA",
															row15.WHSEID);

													tMSSqlInput_8Process(globalMap);

													tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) globalMap
															.get("tHash_Lookup_row35"));

													tHash_Lookup_row35
															.initGet();

													tHash_Lookup_row35
															.lookup(row35HashKey);

													if (!tHash_Lookup_row35
															.hasNext()) { // G_TM_M_090

														forceLooprow35 = true;

													} // G_TM_M_090

												} // G_TM_M_020

												else { // G 20 - G 21
													forceLooprow35 = true;
												} // G 21

												row35Struct row35 = null;

												while ((tHash_Lookup_row35 != null && tHash_Lookup_row35
														.hasNext())
														|| forceLooprow35) { // G_TM_M_043

													// CALL close loop of lookup
													// 'row35'

													row35Struct fromLookup_row35 = null;
													row35 = row35Default;

													if (!forceLooprow35) { // G
																			// 46

														fromLookup_row35 = tHash_Lookup_row35
																.next();

														if (fromLookup_row35 != null) {
															row35 = fromLookup_row35;
														}

													} // G 46

													forceLooprow35 = false;

													// /////////////////////////////////////////////
													// Starting Lookup Table
													// "row9"
													// /////////////////////////////////////////////

													boolean forceLooprow9 = false;

													row9Struct row9ObjectFromLookup = null;

													if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

														globalMap
																.put("STRATEGYKEY",
																		row24.STRATEGYKEY);

														globalMap.put("SCHEMA",
																row15.WHSEID);

														tMSSqlInput_10Process(globalMap);

														tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
																.get("tHash_Lookup_row9"));

														tHash_Lookup_row9
																.initGet();

														tHash_Lookup_row9
																.lookup(row9HashKey);

														if (!tHash_Lookup_row9
																.hasNext()) { // G_TM_M_090

															forceLooprow9 = true;

														} // G_TM_M_090

													} // G_TM_M_020

													else { // G 20 - G 21
														forceLooprow9 = true;
													} // G 21

													row9Struct row9 = null;

													while ((tHash_Lookup_row9 != null && tHash_Lookup_row9
															.hasNext())
															|| forceLooprow9) { // G_TM_M_043

														// CALL close loop of
														// lookup 'row9'

														row9Struct fromLookup_row9 = null;
														row9 = row9Default;

														if (!forceLooprow9) { // G
																				// 46

															fromLookup_row9 = tHash_Lookup_row9
																	.next();

															if (fromLookup_row9 != null) {
																row9 = fromLookup_row9;
															}

														} // G 46

														forceLooprow9 = false;

														// /////////////////////////////////////////////
														// Starting Lookup Table
														// "row8"
														// /////////////////////////////////////////////

														boolean forceLooprow8 = false;

														row8Struct row8ObjectFromLookup = null;

														if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

															globalMap
																	.put("EXTERNORDERKEY",
																			row15.EXTERNORDERKEY);

															globalMap
																	.put("SCHEMA",
																			row15.WHSEID);

															tMSSqlInput_5Process(globalMap);

															tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
																	.get("tHash_Lookup_row8"));

															tHash_Lookup_row8
																	.initGet();

															tHash_Lookup_row8
																	.lookup(row8HashKey);

															if (!tHash_Lookup_row8
																	.hasNext()) { // G_TM_M_090

																forceLooprow8 = true;

															} // G_TM_M_090

														} // G_TM_M_020

														else { // G 20 - G 21
															forceLooprow8 = true;
														} // G 21

														row8Struct row8 = null;

														while ((tHash_Lookup_row8 != null && tHash_Lookup_row8
																.hasNext())
																|| forceLooprow8) { // G_TM_M_043

															// CALL close loop
															// of lookup 'row8'

															row8Struct fromLookup_row8 = null;
															row8 = row8Default;

															if (!forceLooprow8) { // G
																					// 46

																fromLookup_row8 = tHash_Lookup_row8
																		.next();

																if (fromLookup_row8 != null) {
																	row8 = fromLookup_row8;
																}

															} // G 46

															forceLooprow8 = false;

															// /////////////////////////////////////////////
															// Starting Lookup
															// Table "row39"
															// /////////////////////////////////////////////

															boolean forceLooprow39 = false;

															row39Struct row39ObjectFromLookup = null;

															if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

																globalMap
																		.put("WHSE10",
																				row15.WHSEID);

																globalMap
																		.put("EXTKEY10",
																				row15.EXTERNORDERKEY);

																tMSSqlInput_16Process(globalMap);

																tHash_Lookup_row39 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) globalMap
																		.get("tHash_Lookup_row39"));

																tHash_Lookup_row39
																		.initGet();

																tHash_Lookup_row39
																		.lookup(row39HashKey);

																if (!tHash_Lookup_row39
																		.hasNext()) { // G_TM_M_090

																	forceLooprow39 = true;

																} // G_TM_M_090

															} // G_TM_M_020

															else { // G 20 - G
																	// 21
																forceLooprow39 = true;
															} // G 21

															row39Struct row39 = null;

															while ((tHash_Lookup_row39 != null && tHash_Lookup_row39
																	.hasNext())
																	|| forceLooprow39) { // G_TM_M_043

																// CALL close
																// loop of
																// lookup
																// 'row39'

																row39Struct fromLookup_row39 = null;
																row39 = row39Default;

																if (!forceLooprow39) { // G
																						// 46

																	fromLookup_row39 = tHash_Lookup_row39
																			.next();

																	if (fromLookup_row39 != null) {
																		row39 = fromLookup_row39;
																	}

																} // G 46

																forceLooprow39 = false;

																// ###############################
																{ // start of
																	// Var scope

																	// ###############################
																	// # Vars
																	// tables

																	Var__tMap_3__Struct Var = Var__tMap_3;
																	Var.PREVSO = Var.OLDEXTERNORDERKEY;
																	Var.EXTERNORDERKEY = row15.EXTERNORDERKEY;
																	Var.ISHEADER = Var.EXTERNORDERKEY
																			.equals(Var.OLDEXTERNORDERKEY) ? "D"
																			: "H";
																	Var.OLDEXTERNORDERKEY = Var.EXTERNORDERKEY;
																	Var.DUMMY = globalMap
																			.put("OLDEXTERNORDERKEY",
																					Var.OLDEXTERNORDERKEY);
																	Var.WMSLINENO = Var.ISHEADER
																			.equals("H") ? 1
																			: Var.OLDLINENO + 1;
																	Var.OLDLINENO = Var.WMSLINENO;
																	Var.ORDERKEY = row13.ORDERKEY != null
																			&& row13.ORDERKEY
																					.trim()
																					.length() > 0 ? row13.ORDERKEY
																			: (row14.KEYCOUNT != null ? "S"
																					+ String.format(
																							"%09d",
																							row14.KEYCOUNT)
																					: Var.ORDERKEY);
																	Var.var1 = globalMap
																			.put("SCHEMA",
																					context.MAPPEDSCHEMA);// ###############################
																	// ###############################
																	// # Output
																	// tables

																	INSERTHEADER = null;
																	INSERTDETAIL = null;
																	HDRTOTALS = null;

																	// # Output
																	// table :
																	// 'INSERTHEADER'
																	// # Filter
																	// conditions
																	if (

																	row8.numrow == 0
																			&& Var.ISHEADER
																					.equals("H")

																	) {
																		INSERTHEADER_tmp.CONSIGNEEKEY = row15.CONSIGNEEKEY;
																		INSERTHEADER_tmp.TYPE = row15.TYPE;
																		INSERTHEADER_tmp.EXTERNORDERKEY = row15.EXTERNORDERKEY;
																		INSERTHEADER_tmp.ORDERDATE = row15.ORDERDATE;
																		INSERTHEADER_tmp.ISHEADER = Var.ISHEADER;
																		INSERTHEADER_tmp.ORDERKEY = Var.ORDERKEY;
																		INSERTHEADER_tmp.CONTACT1 = row8_0.CONTACT1;
																		INSERTHEADER_tmp.CONTACT2 = row8_0.CONTACT2;
																		INSERTHEADER_tmp.COMPANY = row8_0.COMPANY;
																		INSERTHEADER_tmp.ADDRESS1 = row8_0.ADDRESS1;
																		INSERTHEADER_tmp.ADDRESS2 = row8_0.ADDRESS2;
																		INSERTHEADER_tmp.ADDRESS3 = row8_0.ADDRESS3;
																		INSERTHEADER_tmp.ADDRESS4 = row8_0.ADDRESS4;
																		INSERTHEADER_tmp.ADDRESS5 = row8_0.ADDRESS5;
																		INSERTHEADER_tmp.ADDRESS6 = row8_0.ADDRESS6;
																		INSERTHEADER_tmp.CITY = row8_0.CITY;
																		INSERTHEADER_tmp.STATE = row8_0.STATE;
																		INSERTHEADER_tmp.ZIP = row8_0.ZIP;
																		INSERTHEADER_tmp.COUNTRY = row8_0.COUNTRY;
																		INSERTHEADER_tmp.ISOCOUNTRY = row8_0.ISOCOUNTRY;
																		INSERTHEADER_tmp.PHONE1 = row8_0.PHONE1;
																		INSERTHEADER_tmp.FAX2 = row8_0.FAX2;
																		INSERTHEADER_tmp.VAT = row8_0.VAT;
																		INSERTHEADER_tmp.EXTERNALORDERKEY2 = row15.EXTERNALORDERKEY2;
																		INSERTHEADER_tmp.SUSR1 = row15.SUSR1;
																		INSERTHEADER_tmp.SUSR2 = row15.SUSR2;
																		INSERTHEADER_tmp.SUSR3 = row15.SUSR3;
																		INSERTHEADER_tmp.SUSR4 = row15.SUSR4;
																		INSERTHEADER_tmp.ROUTE = row15.ROUTE;
																		INSERTHEADER_tmp.FAX1 = row8_0.FAX1;
																		INSERTHEADER_tmp.WHSEID = row15.WHSEID;
																		INSERTHEADER_tmp.SUSR5 = row15.WHSEID_SAP;
																		INSERTHEADER_tmp.STORERKEY = row15.STORERKEY == null
																				|| row15.STORERKEY
																						.trim()
																						.length() == 0 ? "2000"
																				: row15.STORERKEY;
																		INSERTHEADER_tmp.HDRCOUNT = row15.HDRCOUNT;
																		INSERTHEADER_tmp.DTLCOUNT = row15.DTLCOUNT;
																		INSERTHEADER = INSERTHEADER_tmp;
																	} // closing
																		// filter/reject

																	// # Output
																	// table :
																	// 'INSERTDETAIL'
																	// # Filter
																	// conditions
																	if (

																	row35.NUMREC == 0
																			&& row15.DTLCOUNT == 0

																	) {
																		INSERTDETAIL_tmp.ORDERKEY = Var.ORDERKEY;
																		INSERTDETAIL_tmp.WMSLINENO = row39.MAXLINE != null ? row39.MAXLINE
																				: String.format(
																						"%05d",
																						Var.WMSLINENO);
																		INSERTDETAIL_tmp.DESCR = row24.DESCR;
																		INSERTDETAIL_tmp.PACKKEY = row24.PACKKEY;
																		INSERTDETAIL_tmp.EXTERNLINENO = row15.EXTERNLNENO;
																		INSERTDETAIL_tmp.SKU = row15.SKU;
																		INSERTDETAIL_tmp.QTY = row15.QTY;
																		INSERTDETAIL_tmp.UOM = "EA";
																		INSERTDETAIL_tmp.ROTATION = row24.ROTATION;
																		INSERTDETAIL_tmp.SHELFLIFE = row24.SHELFLIFE;
																		INSERTDETAIL_tmp.PREALLOCATESTRATEGYKEY = (row24.NEWALLOCST == null) ? row9.PREALLOCATE
																				: null;
																		INSERTDETAIL_tmp.ALLOCATESTRATEGYKEY = row24.NEWALLOCST == null ? row9.ALLOCATE
																				: null;
																		INSERTDETAIL_tmp.NEWALLOCATIONSTRATEGY = row24.NEWALLOCST;
																		INSERTDETAIL_tmp.EXTERNORDERKEY = row15.EXTERNORDERKEY;
																		INSERTDETAIL_tmp.WHSEID = row15.WHSEID;
																		INSERTDETAIL_tmp.STORERKEY = row15.STORERKEY;
																		INSERTDETAIL_tmp.HDRCOUNT = row15.HDRCOUNT;
																		INSERTDETAIL_tmp.DTLCOUNT = row15.DTLCOUNT;
																		INSERTDETAIL = INSERTDETAIL_tmp;
																	} // closing
																		// filter/reject

																	// # Output
																	// table :
																	// 'HDRTOTALS'
																	// # Filter
																	// conditions
																	if (

																	Var.ORDERKEY != null
																			&& Var.ORDERKEY
																					.trim()
																					.length() > 0
																			&& row35.NUMREC == 0

																	) {
																		HDRTOTALS_tmp.WHSEID = row15.WHSEID;
																		HDRTOTALS_tmp.WMSKEY = Var.ORDERKEY;
																		HDRTOTALS_tmp.TCUB = (row30.TOTAL_CUBE == null ? 0
																				: row30.TOTAL_CUBE)
																				+ (row40.ROW_CUBE == null ? 0
																						: row40.ROW_CUBE);
																		HDRTOTALS_tmp.TWGT = (row30.TOTAL_WEIGHT == null ? 0
																				: row30.TOTAL_WEIGHT)
																				+ (row40.ROW_WEIGHT == null ? 0
																						: row40.ROW_WEIGHT);
																		HDRTOTALS_tmp.TQTY = (row30.OPENQTY == null ? 0
																				: row30.OPENQTY)
																				+ (row40.ROW_QTY == null ? 0
																						: row40.ROW_QTY);
																		HDRTOTALS = HDRTOTALS_tmp;
																	} // closing
																		// filter/reject
																		// ###############################

																} // end of Var
																	// scope

																rejectedInnerJoin_tMap_3 = false;

																tos_count_tMap_3++;

																/**
																 * [tMap_3 main
																 * ] stop
																 */
																// Start of
																// branch
																// "INSERTHEADER"
																if (INSERTHEADER != null) {
																	row17 = null;

																	/**
																	 * [
																	 * tLogRow_2
																	 * main ]
																	 * start
																	 */

																	currentComponent = "tLogRow_2";

																	// /////////////////////

																	String[] row_tLogRow_2 = new String[35];

																	if (INSERTHEADER.CONSIGNEEKEY != null) { //
																		row_tLogRow_2[0] = String
																				.valueOf(INSERTHEADER.CONSIGNEEKEY);

																	} //

																	if (INSERTHEADER.TYPE != null) { //
																		row_tLogRow_2[1] = String
																				.valueOf(INSERTHEADER.TYPE);

																	} //

																	if (INSERTHEADER.EXTERNORDERKEY != null) { //
																		row_tLogRow_2[2] = String
																				.valueOf(INSERTHEADER.EXTERNORDERKEY);

																	} //

																	if (INSERTHEADER.ORDERDATE != null) { //
																		row_tLogRow_2[3] = String
																				.valueOf(INSERTHEADER.ORDERDATE);

																	} //

																	if (INSERTHEADER.ISHEADER != null) { //
																		row_tLogRow_2[4] = String
																				.valueOf(INSERTHEADER.ISHEADER);

																	} //

																	if (INSERTHEADER.ORDERKEY != null) { //
																		row_tLogRow_2[5] = String
																				.valueOf(INSERTHEADER.ORDERKEY);

																	} //

																	if (INSERTHEADER.CONTACT1 != null) { //
																		row_tLogRow_2[6] = String
																				.valueOf(INSERTHEADER.CONTACT1);

																	} //

																	if (INSERTHEADER.CONTACT2 != null) { //
																		row_tLogRow_2[7] = String
																				.valueOf(INSERTHEADER.CONTACT2);

																	} //

																	if (INSERTHEADER.COMPANY != null) { //
																		row_tLogRow_2[8] = String
																				.valueOf(INSERTHEADER.COMPANY);

																	} //

																	if (INSERTHEADER.ADDRESS1 != null) { //
																		row_tLogRow_2[9] = String
																				.valueOf(INSERTHEADER.ADDRESS1);

																	} //

																	if (INSERTHEADER.ADDRESS2 != null) { //
																		row_tLogRow_2[10] = String
																				.valueOf(INSERTHEADER.ADDRESS2);

																	} //

																	if (INSERTHEADER.ADDRESS3 != null) { //
																		row_tLogRow_2[11] = String
																				.valueOf(INSERTHEADER.ADDRESS3);

																	} //

																	if (INSERTHEADER.ADDRESS4 != null) { //
																		row_tLogRow_2[12] = String
																				.valueOf(INSERTHEADER.ADDRESS4);

																	} //

																	if (INSERTHEADER.ADDRESS5 != null) { //
																		row_tLogRow_2[13] = String
																				.valueOf(INSERTHEADER.ADDRESS5);

																	} //

																	if (INSERTHEADER.ADDRESS6 != null) { //
																		row_tLogRow_2[14] = String
																				.valueOf(INSERTHEADER.ADDRESS6);

																	} //

																	if (INSERTHEADER.CITY != null) { //
																		row_tLogRow_2[15] = String
																				.valueOf(INSERTHEADER.CITY);

																	} //

																	if (INSERTHEADER.STATE != null) { //
																		row_tLogRow_2[16] = String
																				.valueOf(INSERTHEADER.STATE);

																	} //

																	if (INSERTHEADER.ZIP != null) { //
																		row_tLogRow_2[17] = String
																				.valueOf(INSERTHEADER.ZIP);

																	} //

																	if (INSERTHEADER.COUNTRY != null) { //
																		row_tLogRow_2[18] = String
																				.valueOf(INSERTHEADER.COUNTRY);

																	} //

																	if (INSERTHEADER.ISOCOUNTRY != null) { //
																		row_tLogRow_2[19] = String
																				.valueOf(INSERTHEADER.ISOCOUNTRY);

																	} //

																	if (INSERTHEADER.PHONE1 != null) { //
																		row_tLogRow_2[20] = String
																				.valueOf(INSERTHEADER.PHONE1);

																	} //

																	if (INSERTHEADER.FAX2 != null) { //
																		row_tLogRow_2[21] = String
																				.valueOf(INSERTHEADER.FAX2);

																	} //

																	if (INSERTHEADER.VAT != null) { //
																		row_tLogRow_2[22] = String
																				.valueOf(INSERTHEADER.VAT);

																	} //

																	if (INSERTHEADER.EXTERNALORDERKEY2 != null) { //
																		row_tLogRow_2[23] = String
																				.valueOf(INSERTHEADER.EXTERNALORDERKEY2);

																	} //

																	if (INSERTHEADER.SUSR1 != null) { //
																		row_tLogRow_2[24] = String
																				.valueOf(INSERTHEADER.SUSR1);

																	} //

																	if (INSERTHEADER.SUSR2 != null) { //
																		row_tLogRow_2[25] = String
																				.valueOf(INSERTHEADER.SUSR2);

																	} //

																	if (INSERTHEADER.SUSR3 != null) { //
																		row_tLogRow_2[26] = String
																				.valueOf(INSERTHEADER.SUSR3);

																	} //

																	if (INSERTHEADER.SUSR4 != null) { //
																		row_tLogRow_2[27] = String
																				.valueOf(INSERTHEADER.SUSR4);

																	} //

																	if (INSERTHEADER.ROUTE != null) { //
																		row_tLogRow_2[28] = String
																				.valueOf(INSERTHEADER.ROUTE);

																	} //

																	if (INSERTHEADER.FAX1 != null) { //
																		row_tLogRow_2[29] = String
																				.valueOf(INSERTHEADER.FAX1);

																	} //

																	if (INSERTHEADER.WHSEID != null) { //
																		row_tLogRow_2[30] = String
																				.valueOf(INSERTHEADER.WHSEID);

																	} //

																	if (INSERTHEADER.SUSR5 != null) { //
																		row_tLogRow_2[31] = String
																				.valueOf(INSERTHEADER.SUSR5);

																	} //

																	if (INSERTHEADER.STORERKEY != null) { //
																		row_tLogRow_2[32] = String
																				.valueOf(INSERTHEADER.STORERKEY);

																	} //

																	if (INSERTHEADER.HDRCOUNT != null) { //
																		row_tLogRow_2[33] = String
																				.valueOf(INSERTHEADER.HDRCOUNT);

																	} //

																	if (INSERTHEADER.DTLCOUNT != null) { //
																		row_tLogRow_2[34] = String
																				.valueOf(INSERTHEADER.DTLCOUNT);

																	} //

																	util_tLogRow_2
																			.addRow(row_tLogRow_2);
																	nb_line_tLogRow_2++;
																	// ////

																	// ////

																	// /////////////////////

																	HDR = INSERTHEADER;

																	tos_count_tLogRow_2++;

																	/**
																	 * [
																	 * tLogRow_2
																	 * main ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tMSSqlRow_18
																	 * main ]
																	 * start
																	 */

																	currentComponent = "tMSSqlRow_18";

																	row17 = null;

																	query_tMSSqlRow_18 = "INSERT INTO "
																			+ HDR.WHSEID
																			+ ".ORDERS ( WHSEID,ORDERKEY,EXTERNORDERKEY,STORERKEY,TYPE,CONSIGNEEKEY,ORDERDATE,SUSR1,SUSR2,SUSR3,SUSR4,ROUTE ,EXTERNALORDERKEY2, ADDWHO,EDITWHO,\nC_CONTACT1,C_CONTACT2,C_COMPANY,C_ADDRESS1,C_ADDRESS2,C_ADDRESS3,C_ADDRESS4,C_ADDRESS5,C_ADDRESS6,C_CITY,\nC_STATE,C_ZIP,C_COUNTRY,C_ISOCNTRYCODE,C_PHONE1,C_FAX1,C_FAX2,C_VAT,SUSR5,CARRIERCODE,ORDERBREAK )\nselect  '"
																			+ HDR.WHSEID
																			+ "','"
																			+ HDR.ORDERKEY
																			+ "','"
																			+ HDR.EXTERNORDERKEY
																			+ "','"
																			+ HDR.STORERKEY
																			+ "','"
																			+ HDR.TYPE
																			+ "','"
																			+ HDR.CONSIGNEEKEY
																			+ "', \ndateadd(hour, -3, getdate()) ,'"
																			+ HDR.SUSR1
																			+ "','"
																			+ HDR.SUSR2
																			+ "','"
																			+ HDR.SUSR3
																			+ "','"
																			+ HDR.SUSR4
																			+ "','"
																			+ HDR.ROUTE
																			+ "','"
																			+ HDR.EXTERNALORDERKEY2
																			+ "','SIP1','SIP1' ,\n'"
																			+ HDR.CONTACT1
																			+ "','"
																			+ HDR.CONTACT2
																			+ "','"
																			+ HDR.COMPANY
																			+ "','"
																			+ HDR.ADDRESS1
																			+ "','"
																			+ HDR.ADDRESS2
																			+ "','"
																			+ HDR.ADDRESS3
																			+ "','"
																			+ HDR.ADDRESS4
																			+ "','"
																			+ HDR.ADDRESS5
																			+ "',\n'"
																			+ HDR.ADDRESS6
																			+ "','"
																			+ HDR.CITY
																			+ "','"
																			+ HDR.STATE
																			+ "','"
																			+ HDR.ZIP
																			+ "','"
																			+ HDR.COUNTRY
																			+ "','"
																			+ HDR.ISOCOUNTRY
																			+ "','"
																			+ HDR.PHONE1
																			+ "','"
																			+ HDR.FAX1
																			+ "','"
																			+ HDR.FAX2
																			+ "',\n'"
																			+ HDR.VAT
																			+ "','"
																			+ HDR.SUSR5
																			+ "','CAR1','1' ";
																	whetherReject_tMSSqlRow_18 = false;
																	globalMap
																			.put("tMSSqlRow_18_QUERY",
																					query_tMSSqlRow_18);
																	try {
																		stmt_tMSSqlRow_18
																				.execute(query_tMSSqlRow_18);

																	} catch (java.lang.Exception e) {
																		whetherReject_tMSSqlRow_18 = true;

																		row17 = new row17Struct();

																		row17.CONSIGNEEKEY = HDR.CONSIGNEEKEY;

																		row17.TYPE = HDR.TYPE;

																		row17.EXTERNORDERKEY = HDR.EXTERNORDERKEY;

																		row17.ORDERDATE = HDR.ORDERDATE;

																		row17.ISHEADER = HDR.ISHEADER;

																		row17.ORDERKEY = HDR.ORDERKEY;

																		row17.CONTACT1 = HDR.CONTACT1;

																		row17.CONTACT2 = HDR.CONTACT2;

																		row17.COMPANY = HDR.COMPANY;

																		row17.ADDRESS1 = HDR.ADDRESS1;

																		row17.ADDRESS2 = HDR.ADDRESS2;

																		row17.ADDRESS3 = HDR.ADDRESS3;

																		row17.ADDRESS4 = HDR.ADDRESS4;

																		row17.ADDRESS5 = HDR.ADDRESS5;

																		row17.ADDRESS6 = HDR.ADDRESS6;

																		row17.CITY = HDR.CITY;

																		row17.STATE = HDR.STATE;

																		row17.ZIP = HDR.ZIP;

																		row17.COUNTRY = HDR.COUNTRY;

																		row17.ISOCOUNTRY = HDR.ISOCOUNTRY;

																		row17.PHONE1 = HDR.PHONE1;

																		row17.FAX2 = HDR.FAX2;

																		row17.VAT = HDR.VAT;

																		row17.EXTERNALORDERKEY2 = HDR.EXTERNALORDERKEY2;

																		row17.SUSR1 = HDR.SUSR1;

																		row17.SUSR2 = HDR.SUSR2;

																		row17.SUSR3 = HDR.SUSR3;

																		row17.SUSR4 = HDR.SUSR4;

																		row17.ROUTE = HDR.ROUTE;

																		row17.FAX1 = HDR.FAX1;

																		row17.WHSEID = HDR.WHSEID;

																		row17.SUSR5 = HDR.SUSR5;

																		row17.STORERKEY = HDR.STORERKEY;

																		row17.HDRCOUNT = HDR.HDRCOUNT;

																		row17.DTLCOUNT = HDR.DTLCOUNT;

																		row17.errorCode = ((java.sql.SQLException) e)
																				.getSQLState();
																		row17.errorMessage = e
																				.getMessage()
																				+ " - Line: "
																				+ tos_count_tMSSqlRow_18;

																	}

																	if (!whetherReject_tMSSqlRow_18) {

																	}

																	tos_count_tMSSqlRow_18++;

																	/**
																	 * [
																	 * tMSSqlRow_18
																	 * main ]
																	 * stop
																	 */
																	// Start of
																	// branch
																	// "row17"
																	if (row17 != null) {

																		/**
																		 * [
																		 * tWarn_1
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tWarn_1";

																		resumeUtil
																				.addLog("USER_DEF_LOG",
																						"NODE:tWarn_1",
																						"",
																						Thread.currentThread()
																								.getId()
																								+ "",
																						"WARN",
																						"",
																						"Insert order header failed "
																								+ row17.errorMessage,
																						"",
																						"");
																		globalMap
																				.put("tWarn_1_WARN_MESSAGES",
																						"Insert order header failed "
																								+ row17.errorMessage);
																		globalMap
																				.put("tWarn_1_WARN_PRIORITY",
																						4);
																		globalMap
																				.put("tWarn_1_WARN_CODE",
																						42);

																		row33 = row17;

																		tos_count_tWarn_1++;

																		/**
																		 * [
																		 * tWarn_1
																		 * main
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tMSSqlRow_20
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tMSSqlRow_20";

																		row22 = null;

																		query_tMSSqlRow_20 = "INSERT INTO sip.EMAILALERT ( EMAILDISTLISTID, PID, ROOT_PID, FATHER_PID, PROJECT, JOB, CONTEXT, TYPE, SUBJECT, MESSAGE )\nVALUES ( '"
																				+ context.DISTRIBUTIONLISTID
																				+ "', '"
																				+ pid
																				+ "','"
																				+ rootPid
																				+ "','"
																				+ fatherPid
																				+ "','"
																				+ projectName
																				+ "','"
																				+ jobName
																				+ "','"
																				+ contextStr
																				+ "', 'ERROR', 'SO IMPORT ERROR', '"
																				+ row33.errorMessage
																				+ "')";
																		whetherReject_tMSSqlRow_20 = false;
																		globalMap
																				.put("tMSSqlRow_20_QUERY",
																						query_tMSSqlRow_20);
																		try {
																			stmt_tMSSqlRow_20
																					.execute(query_tMSSqlRow_20);

																		} catch (java.lang.Exception e) {
																			whetherReject_tMSSqlRow_20 = true;

																			System.err
																					.print(e.getMessage());

																		}

																		if (!whetherReject_tMSSqlRow_20) {

																			row22 = new row22Struct();

																			row22.CONSIGNEEKEY = row33.CONSIGNEEKEY;

																			row22.TYPE = row33.TYPE;

																			row22.EXTERNORDERKEY = row33.EXTERNORDERKEY;

																			row22.ORDERDATE = row33.ORDERDATE;

																			row22.ISHEADER = row33.ISHEADER;

																			row22.ORDERKEY = row33.ORDERKEY;

																			row22.CONTACT1 = row33.CONTACT1;

																			row22.CONTACT2 = row33.CONTACT2;

																			row22.COMPANY = row33.COMPANY;

																			row22.ADDRESS1 = row33.ADDRESS1;

																			row22.ADDRESS2 = row33.ADDRESS2;

																			row22.ADDRESS3 = row33.ADDRESS3;

																			row22.ADDRESS4 = row33.ADDRESS4;

																			row22.ADDRESS5 = row33.ADDRESS5;

																			row22.ADDRESS6 = row33.ADDRESS6;

																			row22.CITY = row33.CITY;

																			row22.STATE = row33.STATE;

																			row22.ZIP = row33.ZIP;

																			row22.COUNTRY = row33.COUNTRY;

																			row22.ISOCOUNTRY = row33.ISOCOUNTRY;

																			row22.PHONE1 = row33.PHONE1;

																			row22.FAX2 = row33.FAX2;

																			row22.VAT = row33.VAT;

																			row22.EXTERNALORDERKEY2 = row33.EXTERNALORDERKEY2;

																			row22.SUSR1 = row33.SUSR1;

																			row22.SUSR2 = row33.SUSR2;

																			row22.SUSR3 = row33.SUSR3;

																			row22.SUSR4 = row33.SUSR4;

																			row22.ROUTE = row33.ROUTE;

																			row22.FAX1 = row33.FAX1;

																			row22.WHSEID = row33.WHSEID;

																			row22.SUSR5 = row33.SUSR5;

																			row22.STORERKEY = row33.STORERKEY;

																			row22.HDRCOUNT = row33.HDRCOUNT;

																			row22.DTLCOUNT = row33.DTLCOUNT;

																			row22.errorCode = row33.errorCode;

																			row22.errorMessage = row33.errorMessage;

																		}

																		tos_count_tMSSqlRow_20++;

																		/**
																		 * [
																		 * tMSSqlRow_20
																		 * main
																		 * ]
																		 * stop
																		 */
																		// Start
																		// of
																		// branch
																		// "row22"
																		if (row22 != null) {

																			/**
																			 * [
																			 * tMSSqlRow_25
																			 * main
																			 * ]
																			 * start
																			 */

																			currentComponent = "tMSSqlRow_25";

																			query_tMSSqlRow_25 = "UPDATE "
																					+ context.SAP_DB_SCHEMA
																					+ ".ZMM_EXP_OUTB_DEL  SET ZFLAG ='5'\n		WHERE VBELN_VA = '"
																					+ row22.EXTERNORDERKEY
																					+ "'";
																			whetherReject_tMSSqlRow_25 = false;
																			globalMap
																					.put("tMSSqlRow_25_QUERY",
																							query_tMSSqlRow_25);
																			try {
																				stmt_tMSSqlRow_25
																						.execute(query_tMSSqlRow_25);

																			} catch (java.lang.Exception e) {
																				whetherReject_tMSSqlRow_25 = true;

																				System.err
																						.print(e.getMessage());

																			}

																			tos_count_tMSSqlRow_25++;

																			/**
																			 * [
																			 * tMSSqlRow_25
																			 * main
																			 * ]
																			 * stop
																			 */

																		} // End
																			// of
																			// branch
																			// "row22"

																	} // End of
																		// branch
																		// "row17"

																} // End of
																	// branch
																	// "INSERTHEADER"

																// Start of
																// branch
																// "INSERTDETAIL"
																if (INSERTDETAIL != null) {
																	row18 = null;

																	/**
																	 * [
																	 * tLogRow_3
																	 * main ]
																	 * start
																	 */

																	currentComponent = "tLogRow_3";

																	// /////////////////////

																	String[] row_tLogRow_3 = new String[18];

																	if (INSERTDETAIL.ORDERKEY != null) { //
																		row_tLogRow_3[0] = String
																				.valueOf(INSERTDETAIL.ORDERKEY);

																	} //

																	if (INSERTDETAIL.WMSLINENO != null) { //
																		row_tLogRow_3[1] = String
																				.valueOf(INSERTDETAIL.WMSLINENO);

																	} //

																	if (INSERTDETAIL.DESCR != null) { //
																		row_tLogRow_3[2] = String
																				.valueOf(INSERTDETAIL.DESCR);

																	} //

																	if (INSERTDETAIL.PACKKEY != null) { //
																		row_tLogRow_3[3] = String
																				.valueOf(INSERTDETAIL.PACKKEY);

																	} //

																	if (INSERTDETAIL.EXTERNLINENO != null) { //
																		row_tLogRow_3[4] = String
																				.valueOf(INSERTDETAIL.EXTERNLINENO);

																	} //

																	if (INSERTDETAIL.SKU != null) { //
																		row_tLogRow_3[5] = String
																				.valueOf(INSERTDETAIL.SKU);

																	} //

																	if (INSERTDETAIL.QTY != null) { //
																		row_tLogRow_3[6] = FormatterUtils
																				.formatUnwithE(INSERTDETAIL.QTY);

																	} //

																	if (INSERTDETAIL.UOM != null) { //
																		row_tLogRow_3[7] = String
																				.valueOf(INSERTDETAIL.UOM);

																	} //

																	if (INSERTDETAIL.ROTATION != null) { //
																		row_tLogRow_3[8] = String
																				.valueOf(INSERTDETAIL.ROTATION);

																	} //

																	if (INSERTDETAIL.SHELFLIFE != null) { //
																		row_tLogRow_3[9] = String
																				.valueOf(INSERTDETAIL.SHELFLIFE);

																	} //

																	if (INSERTDETAIL.PREALLOCATESTRATEGYKEY != null) { //
																		row_tLogRow_3[10] = String
																				.valueOf(INSERTDETAIL.PREALLOCATESTRATEGYKEY);

																	} //

																	if (INSERTDETAIL.ALLOCATESTRATEGYKEY != null) { //
																		row_tLogRow_3[11] = String
																				.valueOf(INSERTDETAIL.ALLOCATESTRATEGYKEY);

																	} //

																	if (INSERTDETAIL.NEWALLOCATIONSTRATEGY != null) { //
																		row_tLogRow_3[12] = String
																				.valueOf(INSERTDETAIL.NEWALLOCATIONSTRATEGY);

																	} //

																	if (INSERTDETAIL.EXTERNORDERKEY != null) { //
																		row_tLogRow_3[13] = String
																				.valueOf(INSERTDETAIL.EXTERNORDERKEY);

																	} //

																	if (INSERTDETAIL.WHSEID != null) { //
																		row_tLogRow_3[14] = String
																				.valueOf(INSERTDETAIL.WHSEID);

																	} //

																	if (INSERTDETAIL.STORERKEY != null) { //
																		row_tLogRow_3[15] = String
																				.valueOf(INSERTDETAIL.STORERKEY);

																	} //

																	if (INSERTDETAIL.HDRCOUNT != null) { //
																		row_tLogRow_3[16] = String
																				.valueOf(INSERTDETAIL.HDRCOUNT);

																	} //

																	if (INSERTDETAIL.DTLCOUNT != null) { //
																		row_tLogRow_3[17] = String
																				.valueOf(INSERTDETAIL.DTLCOUNT);

																	} //

																	util_tLogRow_3
																			.addRow(row_tLogRow_3);
																	nb_line_tLogRow_3++;
																	// ////

																	// ////

																	// /////////////////////

																	DTL = INSERTDETAIL;

																	tos_count_tLogRow_3++;

																	/**
																	 * [
																	 * tLogRow_3
																	 * main ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tMSSqlRow_19
																	 * main ]
																	 * start
																	 */

																	currentComponent = "tMSSqlRow_19";

																	row9_0 = null;

																	row18 = null;

																	query_tMSSqlRow_19 = "INSERT INTO "
																			+ DTL.WHSEID
																			+ ".ORDERDETAIL  \n( WHSEID,ORDERKEY,ORDERLINENUMBER,STORERKEY,EXTERNORDERKEY,EXTERNLINENO,SKU,OPENQTY,ORIGINALQTY,PACKKEY,UOM,\nADDWHO,EDITWHO,ALLOCATESTRATEGYKEY,PREALLOCATESTRATEGYKEY,NEWALLOCATIONSTRATEGY,SKUROTATION,SHELFLIFE )\nSELECT '"
																			+ DTL.WHSEID
																			+ "','"
																			+ DTL.ORDERKEY
																			+ "','"
																			+ DTL.WMSLINENO
																			+ "','"
																			+ DTL.STORERKEY
																			+ "','"
																			+ DTL.EXTERNORDERKEY
																			+ "','"
																			+ DTL.EXTERNLINENO
																			+ "',\n'"
																			+ DTL.SKU
																			+ "','"
																			+ DTL.QTY
																			+ "','"
																			+ DTL.QTY
																			+ "','"
																			+ DTL.PACKKEY
																			+ "','"
																			+ DTL.UOM
																			+ "','SIP1','SIP1',\ncase when '"
																			+ DTL.ALLOCATESTRATEGYKEY
																			+ "' ='null' then null else '"
																			+ DTL.ALLOCATESTRATEGYKEY
																			+ "' end ,\nCASE WHEN '"
																			+ DTL.PREALLOCATESTRATEGYKEY
																			+ "' = 'null' then null else '"
																			+ DTL.PREALLOCATESTRATEGYKEY
																			+ "' end,\ncase when '"
																			+ DTL.NEWALLOCATIONSTRATEGY
																			+ "' ='null' then null else '"
																			+ DTL.NEWALLOCATIONSTRATEGY
																			+ "' END ,\n'"
																			+ DTL.ROTATION
																			+ "',"
																			+ DTL.SHELFLIFE;
																	whetherReject_tMSSqlRow_19 = false;
																	globalMap
																			.put("tMSSqlRow_19_QUERY",
																					query_tMSSqlRow_19);
																	try {
																		stmt_tMSSqlRow_19
																				.execute(query_tMSSqlRow_19);

																	} catch (java.lang.Exception e) {
																		whetherReject_tMSSqlRow_19 = true;

																		row18 = new row18Struct();

																		row18.ORDERKEY = DTL.ORDERKEY;

																		row18.WMSLINENO = DTL.WMSLINENO;

																		row18.DESCR = DTL.DESCR;

																		row18.PACKKEY = DTL.PACKKEY;

																		row18.EXTERNLINENO = DTL.EXTERNLINENO;

																		row18.SKU = DTL.SKU;

																		row18.QTY = DTL.QTY;

																		row18.UOM = DTL.UOM;

																		row18.ROTATION = DTL.ROTATION;

																		row18.SHELFLIFE = DTL.SHELFLIFE;

																		row18.PREALLOCATESTRATEGYKEY = DTL.PREALLOCATESTRATEGYKEY;

																		row18.ALLOCATESTRATEGYKEY = DTL.ALLOCATESTRATEGYKEY;

																		row18.NEWALLOCATIONSTRATEGY = DTL.NEWALLOCATIONSTRATEGY;

																		row18.EXTERNORDERKEY = DTL.EXTERNORDERKEY;

																		row18.WHSEID = DTL.WHSEID;

																		row18.STORERKEY = DTL.STORERKEY;

																		row18.HDRCOUNT = DTL.HDRCOUNT;

																		row18.DTLCOUNT = DTL.DTLCOUNT;

																		row18.errorCode = ((java.sql.SQLException) e)
																				.getSQLState();
																		row18.errorMessage = e
																				.getMessage()
																				+ " - Line: "
																				+ tos_count_tMSSqlRow_19;

																	}

																	if (!whetherReject_tMSSqlRow_19) {

																		row9_0 = new row9_0Struct();

																		row9_0.ORDERKEY = DTL.ORDERKEY;

																		row9_0.WMSLINENO = DTL.WMSLINENO;

																		row9_0.DESCR = DTL.DESCR;

																		row9_0.PACKKEY = DTL.PACKKEY;

																		row9_0.EXTERNLINENO = DTL.EXTERNLINENO;

																		row9_0.SKU = DTL.SKU;

																		row9_0.QTY = DTL.QTY;

																		row9_0.UOM = DTL.UOM;

																		row9_0.ROTATION = DTL.ROTATION;

																		row9_0.SHELFLIFE = DTL.SHELFLIFE;

																		row9_0.PREALLOCATESTRATEGYKEY = DTL.PREALLOCATESTRATEGYKEY;

																		row9_0.ALLOCATESTRATEGYKEY = DTL.ALLOCATESTRATEGYKEY;

																		row9_0.NEWALLOCATIONSTRATEGY = DTL.NEWALLOCATIONSTRATEGY;

																		row9_0.EXTERNORDERKEY = DTL.EXTERNORDERKEY;

																		row9_0.WHSEID = DTL.WHSEID;

																		row9_0.STORERKEY = DTL.STORERKEY;

																		row9_0.HDRCOUNT = DTL.HDRCOUNT;

																		row9_0.DTLCOUNT = DTL.DTLCOUNT;

																	}

																	tos_count_tMSSqlRow_19++;

																	/**
																	 * [
																	 * tMSSqlRow_19
																	 * main ]
																	 * stop
																	 */
																	// Start of
																	// branch
																	// "row9_0"
																	if (row9_0 != null) {

																		/**
																		 * [
																		 * tMSSqlRow_22
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tMSSqlRow_22";

																		query_tMSSqlRow_22 = "UPDATE "
																				+ context.SAP_DB_SCHEMA
																				+ ".ZMM_EXP_OUTB_DEL  SET ZFLAG ='8'\nWHERE VBELN_VA = '"
																				+ row9_0.EXTERNORDERKEY
																				+ "' \nAND POSNR='"
																				+ row9_0.EXTERNLINENO
																				+ "' ";
																		whetherReject_tMSSqlRow_22 = false;
																		globalMap
																				.put("tMSSqlRow_22_QUERY",
																						query_tMSSqlRow_22);
																		try {
																			stmt_tMSSqlRow_22
																					.execute(query_tMSSqlRow_22);

																		} catch (java.lang.Exception e) {
																			whetherReject_tMSSqlRow_22 = true;

																			System.err
																					.print(e.getMessage());

																		}

																		tos_count_tMSSqlRow_22++;

																		/**
																		 * [
																		 * tMSSqlRow_22
																		 * main
																		 * ]
																		 * stop
																		 */

																	} // End of
																		// branch
																		// "row9_0"

																	// Start of
																	// branch
																	// "row18"
																	if (row18 != null) {

																		/**
																		 * [
																		 * tWarn_2
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tWarn_2";

																		resumeUtil
																				.addLog("USER_DEF_LOG",
																						"NODE:tWarn_2",
																						"",
																						Thread.currentThread()
																								.getId()
																								+ "",
																						"WARN",
																						"",
																						"Insert order detail failed "
																								+ row18.errorMessage,
																						"",
																						"");
																		globalMap
																				.put("tWarn_2_WARN_MESSAGES",
																						"Insert order detail failed "
																								+ row18.errorMessage);
																		globalMap
																				.put("tWarn_2_WARN_PRIORITY",
																						4);
																		globalMap
																				.put("tWarn_2_WARN_CODE",
																						42);

																		row21 = row18;

																		tos_count_tWarn_2++;

																		/**
																		 * [
																		 * tWarn_2
																		 * main
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tMSSqlRow_23
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tMSSqlRow_23";

																		row25 = null;

																		query_tMSSqlRow_23 = "UPDATE "
																				+ context.SAP_DB_SCHEMA
																				+ ".ZMM_EXP_OUTB_DEL  SET ZFLAG ='5'\nWHERE VBELN_VA = '"
																				+ row21.EXTERNORDERKEY
																				+ "'\nAND POSNR='"
																				+ row21.EXTERNLINENO
																				+ "'  ";
																		whetherReject_tMSSqlRow_23 = false;
																		globalMap
																				.put("tMSSqlRow_23_QUERY",
																						query_tMSSqlRow_23);
																		try {
																			stmt_tMSSqlRow_23
																					.execute(query_tMSSqlRow_23);

																		} catch (java.lang.Exception e) {
																			whetherReject_tMSSqlRow_23 = true;

																			System.err
																					.print(e.getMessage());

																		}

																		if (!whetherReject_tMSSqlRow_23) {

																			row25 = new row25Struct();

																			row25.ORDERKEY = row21.ORDERKEY;

																			row25.WMSLINENO = row21.WMSLINENO;

																			row25.DESCR = row21.DESCR;

																			row25.PACKKEY = row21.PACKKEY;

																			row25.EXTERNLINENO = row21.EXTERNLINENO;

																			row25.SKU = row21.SKU;

																			row25.QTY = row21.QTY;

																			row25.UOM = row21.UOM;

																			row25.ROTATION = row21.ROTATION;

																			row25.SHELFLIFE = row21.SHELFLIFE;

																			row25.PREALLOCATESTRATEGYKEY = row21.PREALLOCATESTRATEGYKEY;

																			row25.ALLOCATESTRATEGYKEY = row21.ALLOCATESTRATEGYKEY;

																			row25.NEWALLOCATIONSTRATEGY = row21.NEWALLOCATIONSTRATEGY;

																			row25.EXTERNORDERKEY = row21.EXTERNORDERKEY;

																			row25.WHSEID = row21.WHSEID;

																			row25.STORERKEY = row21.STORERKEY;

																			row25.HDRCOUNT = row21.HDRCOUNT;

																			row25.DTLCOUNT = row21.DTLCOUNT;

																			row25.errorCode = row21.errorCode;

																			row25.errorMessage = row21.errorMessage;

																		}

																		tos_count_tMSSqlRow_23++;

																		/**
																		 * [
																		 * tMSSqlRow_23
																		 * main
																		 * ]
																		 * stop
																		 */
																		// Start
																		// of
																		// branch
																		// "row25"
																		if (row25 != null) {

																			/**
																			 * [
																			 * tMSSqlRow_24
																			 * main
																			 * ]
																			 * start
																			 */

																			currentComponent = "tMSSqlRow_24";

																			query_tMSSqlRow_24 = "INSERT INTO sip.EMAILALERT ( EMAILDISTLISTID, PID, ROOT_PID, FATHER_PID, PROJECT, JOB, CONTEXT, TYPE, SUBJECT, MESSAGE )\nVALUES ( '"
																					+ context.DISTRIBUTIONLISTID
																					+ "', '"
																					+ pid
																					+ "','"
																					+ rootPid
																					+ "','"
																					+ fatherPid
																					+ "','"
																					+ projectName
																					+ "','"
																					+ jobName
																					+ "','"
																					+ contextStr
																					+ "', 'ERROR', 'SO IMPORT ERROR', '"
																					+ row25.errorMessage
																					+ "')";
																			whetherReject_tMSSqlRow_24 = false;
																			globalMap
																					.put("tMSSqlRow_24_QUERY",
																							query_tMSSqlRow_24);
																			try {
																				stmt_tMSSqlRow_24
																						.execute(query_tMSSqlRow_24);

																			} catch (java.lang.Exception e) {
																				whetherReject_tMSSqlRow_24 = true;

																				System.err
																						.print(e.getMessage());

																			}

																			tos_count_tMSSqlRow_24++;

																			/**
																			 * [
																			 * tMSSqlRow_24
																			 * main
																			 * ]
																			 * stop
																			 */

																		} // End
																			// of
																			// branch
																			// "row25"

																	} // End of
																		// branch
																		// "row18"

																} // End of
																	// branch
																	// "INSERTDETAIL"

																// Start of
																// branch
																// "HDRTOTALS"
																if (HDRTOTALS != null) {

																	/**
																	 * [
																	 * tLogRow_5
																	 * main ]
																	 * start
																	 */

																	currentComponent = "tLogRow_5";

																	// /////////////////////

																	String[] row_tLogRow_5 = new String[5];

																	if (HDRTOTALS.WHSEID != null) { //
																		row_tLogRow_5[0] = String
																				.valueOf(HDRTOTALS.WHSEID);

																	} //

																	if (HDRTOTALS.WMSKEY != null) { //
																		row_tLogRow_5[1] = String
																				.valueOf(HDRTOTALS.WMSKEY);

																	} //

																	if (HDRTOTALS.TCUB != null) { //
																		row_tLogRow_5[2] = FormatterUtils
																				.formatUnwithE(HDRTOTALS.TCUB);

																	} //

																	if (HDRTOTALS.TWGT != null) { //
																		row_tLogRow_5[3] = FormatterUtils
																				.formatUnwithE(HDRTOTALS.TWGT);

																	} //

																	if (HDRTOTALS.TQTY != null) { //
																		row_tLogRow_5[4] = FormatterUtils
																				.formatUnwithE(HDRTOTALS.TQTY);

																	} //

																	util_tLogRow_5
																			.addRow(row_tLogRow_5);
																	nb_line_tLogRow_5++;
																	// ////

																	// ////

																	// /////////////////////

																	row32 = HDRTOTALS;

																	tos_count_tLogRow_5++;

																	/**
																	 * [
																	 * tLogRow_5
																	 * main ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tSortRow_2_SortOut
																	 * main ]
																	 * start
																	 */

																	currentVirtualComponent = "tSortRow_2";

																	currentComponent = "tSortRow_2_SortOut";

																	Comparablerow32Struct arrayRowtSortRow_2_SortOut = new Comparablerow32Struct();

																	arrayRowtSortRow_2_SortOut.WHSEID = row32.WHSEID;
																	arrayRowtSortRow_2_SortOut.WMSKEY = row32.WMSKEY;
																	arrayRowtSortRow_2_SortOut.TCUB = row32.TCUB;
																	arrayRowtSortRow_2_SortOut.TWGT = row32.TWGT;
																	arrayRowtSortRow_2_SortOut.TQTY = row32.TQTY;
																	list_tSortRow_2_SortOut
																			.add(arrayRowtSortRow_2_SortOut);

																	tos_count_tSortRow_2_SortOut++;

																	/**
																	 * [
																	 * tSortRow_2_SortOut
																	 * main ]
																	 * stop
																	 */

																} // End of
																	// branch
																	// "HDRTOTALS"

															} // close loop of
																// lookup
																// 'row39' //
																// G_TM_M_043

														} // close loop of
															// lookup 'row8' //
															// G_TM_M_043

													} // close loop of lookup
														// 'row9' // G_TM_M_043

												} // close loop of lookup
													// 'row35' // G_TM_M_043

											} // close loop of lookup 'row24' //
												// G_TM_M_043

										} // close loop of lookup 'row14' //
											// G_TM_M_043

									} // close loop of lookup 'row13' //
										// G_TM_M_043

								} // close loop of lookup 'row8_0' // G_TM_M_043

							} // close loop of lookup 'row30' // G_TM_M_043

						} // close loop of lookup 'row40' // G_TM_M_043

					} // End of branch "FINAL_DATA"

					/**
					 * [tSortRow_3_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

				}

				globalMap.put("tSortRow_3_SortIn_NB_LINE",
						nb_line_tSortRow_3_SortIn);

				ok_Hash.put("tSortRow_3_SortIn", true);
				end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortIn end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row40 != null) {
					tHash_Lookup_row40.endGet();
				}
				globalMap.remove("tHash_Lookup_row40");

				if (tHash_Lookup_row30 != null) {
					tHash_Lookup_row30.endGet();
				}
				globalMap.remove("tHash_Lookup_row30");

				if (tHash_Lookup_row8_0 != null) {
					tHash_Lookup_row8_0.endGet();
				}
				globalMap.remove("tHash_Lookup_row8_0");

				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

				if (tHash_Lookup_row35 != null) {
					tHash_Lookup_row35.endGet();
				}
				globalMap.remove("tHash_Lookup_row35");

				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				if (tHash_Lookup_row39 != null) {
					tHash_Lookup_row39.endGet();
				}
				globalMap.remove("tHash_Lookup_row39");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2
						.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tMSSqlRow_18 end ] start
				 */

				currentComponent = "tMSSqlRow_18";

				stmt_tMSSqlRow_18.close();

				ok_Hash.put("tMSSqlRow_18", true);
				end_Hash.put("tMSSqlRow_18", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_18 end ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */

				/**
				 * [tMSSqlRow_20 end ] start
				 */

				currentComponent = "tMSSqlRow_20";

				stmt_tMSSqlRow_20.close();

				ok_Hash.put("tMSSqlRow_20", true);
				end_Hash.put("tMSSqlRow_20", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_20 end ] stop
				 */

				/**
				 * [tMSSqlRow_25 end ] start
				 */

				currentComponent = "tMSSqlRow_25";

				stmt_tMSSqlRow_25.close();

				ok_Hash.put("tMSSqlRow_25", true);
				end_Hash.put("tMSSqlRow_25", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_25 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				// ////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3
						.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
				// ////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

				// /////////////////////

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tMSSqlRow_19 end ] start
				 */

				currentComponent = "tMSSqlRow_19";

				stmt_tMSSqlRow_19.close();

				ok_Hash.put("tMSSqlRow_19", true);
				end_Hash.put("tMSSqlRow_19", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_19 end ] stop
				 */

				/**
				 * [tMSSqlRow_22 end ] start
				 */

				currentComponent = "tMSSqlRow_22";

				stmt_tMSSqlRow_22.close();

				ok_Hash.put("tMSSqlRow_22", true);
				end_Hash.put("tMSSqlRow_22", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_22 end ] stop
				 */

				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				/**
				 * [tWarn_2 end ] stop
				 */

				/**
				 * [tMSSqlRow_23 end ] start
				 */

				currentComponent = "tMSSqlRow_23";

				stmt_tMSSqlRow_23.close();

				ok_Hash.put("tMSSqlRow_23", true);
				end_Hash.put("tMSSqlRow_23", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_23 end ] stop
				 */

				/**
				 * [tMSSqlRow_24 end ] start
				 */

				currentComponent = "tMSSqlRow_24";

				stmt_tMSSqlRow_24.close();

				ok_Hash.put("tMSSqlRow_24", true);
				end_Hash.put("tMSSqlRow_24", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_24 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

				// ////

				java.io.PrintStream consoleOut_tLogRow_5 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_5 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
				}

				consoleOut_tLogRow_5
						.println(util_tLogRow_5.format().toString());
				consoleOut_tLogRow_5.flush();
				// ////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

				// /////////////////////

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

				/**
				 * [tSortRow_2_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				row32Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut
						.toArray(new Comparablerow32Struct[0]);

				java.util.Arrays.sort(array_tSortRow_2_SortOut);

				globalMap.put("tSortRow_2", array_tSortRow_2_SortOut);

				ok_Hash.put("tSortRow_2_SortOut", true);
				end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortOut end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				int tos_count_tAggregateRow_1_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String WHSEID;
					String WMSKEY;
					Float TCUB_max;
					Float TWGT_max;
					Float TQTY_max;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.WHSEID == null) ? 0 : this.WHSEID
											.hashCode());

							result = prime
									* result
									+ ((this.WMSKEY == null) ? 0 : this.WMSKEY
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.WHSEID == null) {
							if (other.WHSEID != null)
								return false;
						} else if (!this.WHSEID.equals(other.WHSEID))
							return false;

						if (this.WMSKEY == null) {
							if (other.WMSKEY != null)
								return false;
						} else if (!this.WMSKEY.equals(other.WMSKEY))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tSortRow_2_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortIn", false);
				start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				int tos_count_tSortRow_2_SortIn = 0;

				row32Struct[] array_tSortRow_2_SortIn = (row32Struct[]) globalMap
						.get("tSortRow_2");

				int nb_line_tSortRow_2_SortIn = 0;

				row32Struct current_tSortRow_2_SortIn = null;

				for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
					current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
					row34.WHSEID = current_tSortRow_2_SortIn.WHSEID;
					row34.WMSKEY = current_tSortRow_2_SortIn.WMSKEY;
					row34.TCUB = current_tSortRow_2_SortIn.TCUB;
					row34.TWGT = current_tSortRow_2_SortIn.TWGT;
					row34.TQTY = current_tSortRow_2_SortIn.TQTY;
					// increase number of line sorted
					nb_line_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_2_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					tos_count_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGOUT main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGOUT";

					operation_finder_tAggregateRow_1.WHSEID = row34.WHSEID;
					operation_finder_tAggregateRow_1.WMSKEY = row34.WMSKEY;

					operation_finder_tAggregateRow_1.hashCodeDirty = true;

					operation_result_tAggregateRow_1 = hash_tAggregateRow_1
							.get(operation_finder_tAggregateRow_1);

					boolean isFirstAdd_tAggregateRow_1 = false;

					if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

						operation_result_tAggregateRow_1.WHSEID = operation_finder_tAggregateRow_1.WHSEID;
						operation_result_tAggregateRow_1.WMSKEY = operation_finder_tAggregateRow_1.WMSKEY;

						isFirstAdd_tAggregateRow_1 = true;

						hash_tAggregateRow_1.put(
								operation_result_tAggregateRow_1,
								operation_result_tAggregateRow_1);

					} // G_OutMain_AggR_001

					if (operation_result_tAggregateRow_1.TCUB_max == null
							|| row34.TCUB > operation_result_tAggregateRow_1.TCUB_max

					) {
						operation_result_tAggregateRow_1.TCUB_max = row34.TCUB;
					}

					if (operation_result_tAggregateRow_1.TWGT_max == null
							|| row34.TWGT > operation_result_tAggregateRow_1.TWGT_max

					) {
						operation_result_tAggregateRow_1.TWGT_max = row34.TWGT;
					}

					if (operation_result_tAggregateRow_1.TQTY_max == null
							|| row34.TQTY > operation_result_tAggregateRow_1.TQTY_max

					) {
						operation_result_tAggregateRow_1.TQTY_max = row34.TQTY;
					}

					tos_count_tAggregateRow_1_AGGOUT++;

					/**
					 * [tAggregateRow_1_AGGOUT main ] stop
					 */

					/**
					 * [tSortRow_2_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

				}

				globalMap.put("tSortRow_2_SortIn_NB_LINE",
						nb_line_tSortRow_2_SortIn);

				ok_Hash.put("tSortRow_2_SortIn", true);
				end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortIn end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tMSSqlRow_27 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_27", false);
				start_Hash.put("tMSSqlRow_27", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_27";

				int tos_count_tMSSqlRow_27 = 0;

				java.sql.Connection conn_tMSSqlRow_27 = null;
				String query_tMSSqlRow_27 = "";
				boolean whetherReject_tMSSqlRow_27 = false;
				conn_tMSSqlRow_27 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlRow_27 = conn_tMSSqlRow_27
						.createStatement();

				/**
				 * [tMSSqlRow_27 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				int tos_count_tLogRow_4 = 0;

				// /////////////////////

				class Util_tLogRow_4 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
				util_tLogRow_4.setTableName("HDR_UNIQUE");
				util_tLogRow_4.addRow(new String[] { "WHSEID", "WMSKEY",
						"TCUB", "TWGT", "TQTY", });
				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
				// /////////////////////

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE",
						values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row36.WHSEID = aggregated_row_tAggregateRow_1.WHSEID;

					row36.WMSKEY = aggregated_row_tAggregateRow_1.WMSKEY;

					row36.TCUB = aggregated_row_tAggregateRow_1.TCUB_max;
					row36.TWGT = aggregated_row_tAggregateRow_1.TWGT_max;
					row36.TQTY = aggregated_row_tAggregateRow_1.TQTY_max;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tLogRow_4 main ] start
					 */

					currentComponent = "tLogRow_4";

					// /////////////////////

					String[] row_tLogRow_4 = new String[5];

					if (row36.WHSEID != null) { //
						row_tLogRow_4[0] = String.valueOf(row36.WHSEID);

					} //

					if (row36.WMSKEY != null) { //
						row_tLogRow_4[1] = String.valueOf(row36.WMSKEY);

					} //

					if (row36.TCUB != null) { //
						row_tLogRow_4[2] = FormatterUtils
								.formatUnwithE(row36.TCUB);

					} //

					if (row36.TWGT != null) { //
						row_tLogRow_4[3] = FormatterUtils
								.formatUnwithE(row36.TWGT);

					} //

					if (row36.TQTY != null) { //
						row_tLogRow_4[4] = FormatterUtils
								.formatUnwithE(row36.TQTY);

					} //

					util_tLogRow_4.addRow(row_tLogRow_4);
					nb_line_tLogRow_4++;
					// ////

					// ////

					// /////////////////////

					UPDATEORDERS = row36;

					tos_count_tLogRow_4++;

					/**
					 * [tLogRow_4 main ] stop
					 */

					/**
					 * [tMSSqlRow_27 main ] start
					 */

					currentComponent = "tMSSqlRow_27";

					query_tMSSqlRow_27 = "update " + UPDATEORDERS.WHSEID
							+ ".ORDERS \nSET TOTALCUBE = '" + UPDATEORDERS.TCUB
							+ "' , \nTOTALGROSSWGT = '" + UPDATEORDERS.TWGT
							+ "' , \nTOTALQTY = '" + UPDATEORDERS.TQTY
							+ "' \nWHERE ORDERKEY = '" + UPDATEORDERS.WMSKEY
							+ "'";
					whetherReject_tMSSqlRow_27 = false;
					globalMap.put("tMSSqlRow_27_QUERY", query_tMSSqlRow_27);
					try {
						stmt_tMSSqlRow_27.execute(query_tMSSqlRow_27);

					} catch (java.lang.Exception e) {
						whetherReject_tMSSqlRow_27 = true;

						System.err.print(e.getMessage());

					}

					tos_count_tMSSqlRow_27++;

					/**
					 * [tMSSqlRow_27 main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

				// ////

				java.io.PrintStream consoleOut_tLogRow_4 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_4 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
				}

				consoleOut_tLogRow_4
						.println(util_tLogRow_4.format().toString());
				consoleOut_tLogRow_4.flush();
				// ////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

				// /////////////////////

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tMSSqlRow_27 end ] start
				 */

				currentComponent = "tMSSqlRow_27";

				stmt_tMSSqlRow_27.close();

				ok_Hash.put("tMSSqlRow_27", true);
				end_Hash.put("tMSSqlRow_27", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_27 end ] stop
				 */

				/**
				 * [tMSSqlRow_3 end ] start
				 */

				currentComponent = "tMSSqlRow_3";

				stmt_tMSSqlRow_3.close();

				ok_Hash.put("tMSSqlRow_3", true);
				end_Hash.put("tMSSqlRow_3", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_3 end ] stop
				 */

				/**
				 * [tMSSqlRow_1 end ] start
				 */

				currentComponent = "tMSSqlRow_1";

				stmt_tMSSqlRow_1.close();

				ok_Hash.put("tMSSqlRow_1", true);
				end_Hash.put("tMSSqlRow_1", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_1 end ] stop
				 */

				/**
				 * [tMSSqlRow_4 end ] start
				 */

				currentComponent = "tMSSqlRow_4";

				stmt_tMSSqlRow_4.close();

				ok_Hash.put("tMSSqlRow_4", true);
				end_Hash.put("tMSSqlRow_4", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_4 end ] stop
				 */

				/**
				 * [tMSSqlRow_5 end ] start
				 */

				currentComponent = "tMSSqlRow_5";

				stmt_tMSSqlRow_5.close();

				ok_Hash.put("tMSSqlRow_5", true);
				end_Hash.put("tMSSqlRow_5", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_5 end ] stop
				 */

				/**
				 * [tMSSqlRow_9 end ] start
				 */

				currentComponent = "tMSSqlRow_9";

				stmt_tMSSqlRow_9.close();

				ok_Hash.put("tMSSqlRow_9", true);
				end_Hash.put("tMSSqlRow_9", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_9 end ] stop
				 */

				/**
				 * [tMSSqlRow_10 end ] start
				 */

				currentComponent = "tMSSqlRow_10";

				stmt_tMSSqlRow_10.close();

				ok_Hash.put("tMSSqlRow_10", true);
				end_Hash.put("tMSSqlRow_10", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_10 end ] stop
				 */

				/**
				 * [tMSSqlRow_13 end ] start
				 */

				currentComponent = "tMSSqlRow_13";

				stmt_tMSSqlRow_13.close();

				ok_Hash.put("tMSSqlRow_13", true);
				end_Hash.put("tMSSqlRow_13", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_13 end ] stop
				 */

				/**
				 * [tMSSqlRow_15 end ] start
				 */

				currentComponent = "tMSSqlRow_15";

				stmt_tMSSqlRow_15.close();

				ok_Hash.put("tMSSqlRow_15", true);
				end_Hash.put("tMSSqlRow_15", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_15 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMSSqlInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMSSqlRow_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row24");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row13");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row35");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row9");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row8_0");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row30");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row39");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row40");

			// free memory for "tSortRow_3_SortIn"
			globalMap.remove("tSortRow_3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row10");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row11");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row31");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row37");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row38");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row20");

			try {

				/**
				 * [tMSSqlInput_1 finally ] start
				 */

				currentComponent = "tMSSqlInput_1";

				/**
				 * [tMSSqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tMSSqlRow_8 finally ] start
				 */

				currentComponent = "tMSSqlRow_8";

				/**
				 * [tMSSqlRow_8 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tSortRow_3_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				/**
				 * [tSortRow_3_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_3_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				/**
				 * [tSortRow_3_SortIn finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tMSSqlRow_18 finally ] start
				 */

				currentComponent = "tMSSqlRow_18";

				/**
				 * [tMSSqlRow_18 finally ] stop
				 */

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */

				/**
				 * [tMSSqlRow_20 finally ] start
				 */

				currentComponent = "tMSSqlRow_20";

				/**
				 * [tMSSqlRow_20 finally ] stop
				 */

				/**
				 * [tMSSqlRow_25 finally ] start
				 */

				currentComponent = "tMSSqlRow_25";

				/**
				 * [tMSSqlRow_25 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tMSSqlRow_19 finally ] start
				 */

				currentComponent = "tMSSqlRow_19";

				/**
				 * [tMSSqlRow_19 finally ] stop
				 */

				/**
				 * [tMSSqlRow_22 finally ] start
				 */

				currentComponent = "tMSSqlRow_22";

				/**
				 * [tMSSqlRow_22 finally ] stop
				 */

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */

				/**
				 * [tMSSqlRow_23 finally ] start
				 */

				currentComponent = "tMSSqlRow_23";

				/**
				 * [tMSSqlRow_23 finally ] stop
				 */

				/**
				 * [tMSSqlRow_24 finally ] start
				 */

				currentComponent = "tMSSqlRow_24";

				/**
				 * [tMSSqlRow_24 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tSortRow_2_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				/**
				 * [tSortRow_2_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_2_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				/**
				 * [tSortRow_2_SortIn finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tMSSqlRow_27 finally ] start
				 */

				currentComponent = "tMSSqlRow_27";

				/**
				 * [tMSSqlRow_27 finally ] stop
				 */

				/**
				 * [tMSSqlRow_3 finally ] start
				 */

				currentComponent = "tMSSqlRow_3";

				/**
				 * [tMSSqlRow_3 finally ] stop
				 */

				/**
				 * [tMSSqlRow_1 finally ] start
				 */

				currentComponent = "tMSSqlRow_1";

				/**
				 * [tMSSqlRow_1 finally ] stop
				 */

				/**
				 * [tMSSqlRow_4 finally ] start
				 */

				currentComponent = "tMSSqlRow_4";

				/**
				 * [tMSSqlRow_4 finally ] stop
				 */

				/**
				 * [tMSSqlRow_5 finally ] start
				 */

				currentComponent = "tMSSqlRow_5";

				/**
				 * [tMSSqlRow_5 finally ] stop
				 */

				/**
				 * [tMSSqlRow_9 finally ] start
				 */

				currentComponent = "tMSSqlRow_9";

				/**
				 * [tMSSqlRow_9 finally ] stop
				 */

				/**
				 * [tMSSqlRow_10 finally ] start
				 */

				currentComponent = "tMSSqlRow_10";

				/**
				 * [tMSSqlRow_10 finally ] stop
				 */

				/**
				 * [tMSSqlRow_13 finally ] start
				 */

				currentComponent = "tMSSqlRow_13";

				/**
				 * [tMSSqlRow_13 finally ] stop
				 */

				/**
				 * [tMSSqlRow_15 finally ] start
				 */

				currentComponent = "tMSSqlRow_15";

				/**
				 * [tMSSqlRow_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 1);
	}

	public void tMSSqlRow_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlRow_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMSSqlRow_7 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_7", false);
				start_Hash.put("tMSSqlRow_7", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_7";

				int tos_count_tMSSqlRow_7 = 0;

				java.sql.Connection conn_tMSSqlRow_7 = null;
				String query_tMSSqlRow_7 = "";
				boolean whetherReject_tMSSqlRow_7 = false;
				conn_tMSSqlRow_7 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_3");

				java.sql.Statement stmt_tMSSqlRow_7 = conn_tMSSqlRow_7
						.createStatement();

				/**
				 * [tMSSqlRow_7 begin ] stop
				 */

				/**
				 * [tMSSqlRow_7 main ] start
				 */

				currentComponent = "tMSSqlRow_7";

				query_tMSSqlRow_7 = "Update  " + context.SAP_DB_SCHEMA
						+ ".ZMM_EXP_OUTB_DEL set ZFLAG = '9' where ZFLAG='8' ";
				whetherReject_tMSSqlRow_7 = false;
				globalMap.put("tMSSqlRow_7_QUERY", query_tMSSqlRow_7);
				try {
					stmt_tMSSqlRow_7.execute(query_tMSSqlRow_7);

				} catch (java.lang.Exception e) {
					whetherReject_tMSSqlRow_7 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tMSSqlRow_7++;

				/**
				 * [tMSSqlRow_7 main ] stop
				 */

				/**
				 * [tMSSqlRow_7 end ] start
				 */

				currentComponent = "tMSSqlRow_7";

				stmt_tMSSqlRow_7.close();

				ok_Hash.put("tMSSqlRow_7", true);
				end_Hash.put("tMSSqlRow_7", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlRow_7 finally ] start
				 */

				currentComponent = "tMSSqlRow_7";

				/**
				 * [tMSSqlRow_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlRow_7_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public String SCHEMA;

		public String getSCHEMA() {
			return this.SCHEMA;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length) {
					if (length < 1024
							&& commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob.length == 0) {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[1024];
					} else {
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length);
				strReturn = new String(
						commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.SCHEMA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SCHEMA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SCHEMA=" + SCHEMA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tAdvancedHash_row20 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row20", false);
				start_Hash.put("tAdvancedHash_row20",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row20";

				int tos_count_tAdvancedHash_row20 = 0;

				// connection name:row20
				// source node:tMSSqlInput_4 - inputs:() outputs:(row20,row20) |
				// target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
				// linked node: tMap_2 - inputs:(row19,row20) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row20Struct> getLookup(matchingModeEnum_row20);

				globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);

				/**
				 * [tAdvancedHash_row20 begin ] stop
				 */

				/**
				 * [tMSSqlInput_4 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_4", false);
				start_Hash.put("tMSSqlInput_4", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_4";

				int tos_count_tMSSqlInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_4 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_4,
						talendToDBArray_tMSSqlInput_4);
				int nb_line_tMSSqlInput_4 = 0;
				java.sql.Connection conn_tMSSqlInput_4 = null;
				conn_tMSSqlInput_4 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				String dbschema_tMSSqlInput_4 = (String) globalMap
						.get("dbschema_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlInput_4 = conn_tMSSqlInput_4
						.createStatement();

				String dbquery_tMSSqlInput_4 = "SELECT DISTINCT PL_DB.db_logid \nFROM WMSADMIN.PL_DB, ENTERPRISE.CODELKUP \nWHERE CODELKUP.UDF1 = PL_DB.DB_LOGID AND CODELKUP.LISTNAME = 'WHMAPPING'\nAND CODELKUP.CODE ='"
						+ (String) globalMap.get("CODE") + "'";

				globalMap.put("tMSSqlInput_4_QUERY", dbquery_tMSSqlInput_4);

				java.sql.ResultSet rs_tMSSqlInput_4 = null;
				try {
					rs_tMSSqlInput_4 = stmt_tMSSqlInput_4
							.executeQuery(dbquery_tMSSqlInput_4);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_4 = rs_tMSSqlInput_4
							.getMetaData();
					int colQtyInRs_tMSSqlInput_4 = rsmd_tMSSqlInput_4
							.getColumnCount();

					String tmpContent_tMSSqlInput_4 = null;

					while (rs_tMSSqlInput_4.next()) {
						nb_line_tMSSqlInput_4++;

						if (colQtyInRs_tMSSqlInput_4 < 1) {
							row20.SCHEMA = null;
						} else {

							tmpContent_tMSSqlInput_4 = rs_tMSSqlInput_4
									.getString(1);
							if (tmpContent_tMSSqlInput_4 != null) {
								if (talendToDBList_tMSSqlInput_4
										.contains(rsmd_tMSSqlInput_4
												.getColumnTypeName(1)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row20.SCHEMA = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_4);
								} else {
									row20.SCHEMA = tmpContent_tMSSqlInput_4;
								}
							} else {
								row20.SCHEMA = null;
							}
						}

						/**
						 * [tMSSqlInput_4 begin ] stop
						 */

						/**
						 * [tMSSqlInput_4 main ] start
						 */

						currentComponent = "tMSSqlInput_4";

						tos_count_tMSSqlInput_4++;

						/**
						 * [tMSSqlInput_4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row20 main ] start
						 */

						currentComponent = "tAdvancedHash_row20";

						row20Struct row20_HashRow = new row20Struct();

						row20_HashRow.SCHEMA = row20.SCHEMA;

						tHash_Lookup_row20.put(row20_HashRow);

						tos_count_tAdvancedHash_row20++;

						/**
						 * [tAdvancedHash_row20 main ] stop
						 */

						/**
						 * [tMSSqlInput_4 end ] start
						 */

						currentComponent = "tMSSqlInput_4";

					}
				} finally {
					stmt_tMSSqlInput_4.close();

				}
				globalMap.put("tMSSqlInput_4_NB_LINE", nb_line_tMSSqlInput_4);

				ok_Hash.put("tMSSqlInput_4", true);
				end_Hash.put("tMSSqlInput_4", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row20 end ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				tHash_Lookup_row20.endPut();

				ok_Hash.put("tAdvancedHash_row20", true);
				end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlInput_4 finally ] start
				 */

				currentComponent = "tMSSqlInput_4";

				/**
				 * [tMSSqlInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row20 finally ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				/**
				 * [tAdvancedHash_row20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public Integer NUMSKU;

		public Integer getNUMSKU() {
			return this.NUMSKU;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.NUMSKU = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUMSKU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSKU=" + String.valueOf(NUMSKU));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tMSSqlInput_2 - inputs:() outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_1 -
				// inputs:(row6,row10,row11,row31,row37,row38)
				// outputs:(VALIDDATA,BLANKEXTERNORDERKEY,INVALIDSKU,INVALIDCONSIGNEE,INVALIDWHSEID)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tMSSqlInput_2 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_2", false);
				start_Hash.put("tMSSqlInput_2", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_2";

				int tos_count_tMSSqlInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_2 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_2,
						talendToDBArray_tMSSqlInput_2);
				int nb_line_tMSSqlInput_2 = 0;
				java.sql.Connection conn_tMSSqlInput_2 = null;
				conn_tMSSqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				String dbschema_tMSSqlInput_2 = (String) globalMap
						.get("dbschema_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlInput_2 = conn_tMSSqlInput_2
						.createStatement();

				String dbquery_tMSSqlInput_2 = "SELECT count(1) NUMSKUS FROM "
						+ (String) globalMap.get("SCHEMA")
						+ ".SKU WHERE SKU = '"
						+ (globalMap.get("sku") == null ? " "
								: ((String) globalMap.get("sku")))
						+ "' AND \nSTORERKEY ='"
						+ (String) globalMap.get("STORERKEY") + "' ";

				globalMap.put("tMSSqlInput_2_QUERY", dbquery_tMSSqlInput_2);

				java.sql.ResultSet rs_tMSSqlInput_2 = null;
				try {
					rs_tMSSqlInput_2 = stmt_tMSSqlInput_2
							.executeQuery(dbquery_tMSSqlInput_2);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_2 = rs_tMSSqlInput_2
							.getMetaData();
					int colQtyInRs_tMSSqlInput_2 = rsmd_tMSSqlInput_2
							.getColumnCount();

					String tmpContent_tMSSqlInput_2 = null;

					while (rs_tMSSqlInput_2.next()) {
						nb_line_tMSSqlInput_2++;

						if (colQtyInRs_tMSSqlInput_2 < 1) {
							row10.NUMSKU = null;
						} else {

							if (rs_tMSSqlInput_2.getObject(1) != null) {
								row10.NUMSKU = rs_tMSSqlInput_2.getInt(1);
							} else {
								row10.NUMSKU = null;
							}
						}

						/**
						 * [tMSSqlInput_2 begin ] stop
						 */

						/**
						 * [tMSSqlInput_2 main ] start
						 */

						currentComponent = "tMSSqlInput_2";

						tos_count_tMSSqlInput_2++;

						/**
						 * [tMSSqlInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row10 main ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						row10Struct row10_HashRow = new row10Struct();

						row10_HashRow.NUMSKU = row10.NUMSKU;

						tHash_Lookup_row10.put(row10_HashRow);

						tos_count_tAdvancedHash_row10++;

						/**
						 * [tAdvancedHash_row10 main ] stop
						 */

						/**
						 * [tMSSqlInput_2 end ] start
						 */

						currentComponent = "tMSSqlInput_2";

					}
				} finally {
					stmt_tMSSqlInput_2.close();

				}
				globalMap.put("tMSSqlInput_2_NB_LINE", nb_line_tMSSqlInput_2);

				ok_Hash.put("tMSSqlInput_2", true);
				end_Hash.put("tMSSqlInput_2", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlInput_2 finally ] start
				 */

				currentComponent = "tMSSqlInput_2";

				/**
				 * [tMSSqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public Integer NUMCONS;

		public Integer getNUMCONS() {
			return this.NUMCONS;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.NUMCONS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUMCONS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMCONS=" + String.valueOf(NUMCONS));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row11";

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tMSSqlInput_3 - inputs:() outputs:(row11,row11) |
				// target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
				// linked node: tMap_1 -
				// inputs:(row6,row10,row11,row31,row37,row38)
				// outputs:(VALIDDATA,BLANKEXTERNORDERKEY,INVALIDSKU,INVALIDCONSIGNEE,INVALIDWHSEID)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct> getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tMSSqlInput_3 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_3", false);
				start_Hash.put("tMSSqlInput_3", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_3";

				int tos_count_tMSSqlInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_3 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_3,
						talendToDBArray_tMSSqlInput_3);
				int nb_line_tMSSqlInput_3 = 0;
				java.sql.Connection conn_tMSSqlInput_3 = null;
				conn_tMSSqlInput_3 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				String dbschema_tMSSqlInput_3 = (String) globalMap
						.get("dbschema_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlInput_3 = conn_tMSSqlInput_3
						.createStatement();

				String dbquery_tMSSqlInput_3 = "SELECT count(1) NUMCONS FROM "
						+ (String) globalMap.get("SCHEMA")
						+ ".STORER WHERE STORERKEY = '"
						+ (globalMap.get("CONSIGNEE") == null ? " "
								: ((String) globalMap.get("CONSIGNEE")))
						+ "' AND TYPE ='2' ";

				globalMap.put("tMSSqlInput_3_QUERY", dbquery_tMSSqlInput_3);

				java.sql.ResultSet rs_tMSSqlInput_3 = null;
				try {
					rs_tMSSqlInput_3 = stmt_tMSSqlInput_3
							.executeQuery(dbquery_tMSSqlInput_3);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_3 = rs_tMSSqlInput_3
							.getMetaData();
					int colQtyInRs_tMSSqlInput_3 = rsmd_tMSSqlInput_3
							.getColumnCount();

					String tmpContent_tMSSqlInput_3 = null;

					while (rs_tMSSqlInput_3.next()) {
						nb_line_tMSSqlInput_3++;

						if (colQtyInRs_tMSSqlInput_3 < 1) {
							row11.NUMCONS = null;
						} else {

							if (rs_tMSSqlInput_3.getObject(1) != null) {
								row11.NUMCONS = rs_tMSSqlInput_3.getInt(1);
							} else {
								row11.NUMCONS = null;
							}
						}

						/**
						 * [tMSSqlInput_3 begin ] stop
						 */

						/**
						 * [tMSSqlInput_3 main ] start
						 */

						currentComponent = "tMSSqlInput_3";

						tos_count_tMSSqlInput_3++;

						/**
						 * [tMSSqlInput_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row11 main ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						row11Struct row11_HashRow = new row11Struct();

						row11_HashRow.NUMCONS = row11.NUMCONS;

						tHash_Lookup_row11.put(row11_HashRow);

						tos_count_tAdvancedHash_row11++;

						/**
						 * [tAdvancedHash_row11 main ] stop
						 */

						/**
						 * [tMSSqlInput_3 end ] start
						 */

						currentComponent = "tMSSqlInput_3";

					}
				} finally {
					stmt_tMSSqlInput_3.close();

				}
				globalMap.put("tMSSqlInput_3_NB_LINE", nb_line_tMSSqlInput_3);

				ok_Hash.put("tMSSqlInput_3", true);
				end_Hash.put("tMSSqlInput_3", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlInput_3 finally ] start
				 */

				currentComponent = "tMSSqlInput_3";

				/**
				 * [tMSSqlInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row11 finally ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				/**
				 * [tAdvancedHash_row11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public Integer NUMSTR;

		public Integer getNUMSTR() {
			return this.NUMSTR;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.NUMSTR = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUMSTR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSTR=" + String.valueOf(NUMSTR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();

				/**
				 * [tAdvancedHash_row31 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row31", false);
				start_Hash.put("tAdvancedHash_row31",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row31";

				int tos_count_tAdvancedHash_row31 = 0;

				// connection name:row31
				// source node:tMSSqlInput_12 - inputs:() outputs:(row31,row31)
				// | target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
				// linked node: tMap_1 -
				// inputs:(row6,row10,row11,row31,row37,row38)
				// outputs:(VALIDDATA,BLANKEXTERNORDERKEY,INVALIDSKU,INVALIDCONSIGNEE,INVALIDWHSEID)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row31Struct> getLookup(matchingModeEnum_row31);

				globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);

				/**
				 * [tAdvancedHash_row31 begin ] stop
				 */

				/**
				 * [tMSSqlInput_12 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_12", false);
				start_Hash.put("tMSSqlInput_12", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_12";

				int tos_count_tMSSqlInput_12 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_12 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_12 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_12 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_12,
						talendToDBArray_tMSSqlInput_12);
				int nb_line_tMSSqlInput_12 = 0;
				java.sql.Connection conn_tMSSqlInput_12 = null;
				conn_tMSSqlInput_12 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				String dbschema_tMSSqlInput_12 = (String) globalMap
						.get("dbschema_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlInput_12 = conn_tMSSqlInput_12
						.createStatement();

				String dbquery_tMSSqlInput_12 = "SELECT count(1) NUMSTR FROM "
						+ (String) globalMap.get("SCHEMA")
						+ ".STORER \nWHERE STORERKEY = '"
						+ (String) globalMap.get("STORERKEY")
						+ "' AND TYPE ='1' ";

				globalMap.put("tMSSqlInput_12_QUERY", dbquery_tMSSqlInput_12);

				java.sql.ResultSet rs_tMSSqlInput_12 = null;
				try {
					rs_tMSSqlInput_12 = stmt_tMSSqlInput_12
							.executeQuery(dbquery_tMSSqlInput_12);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_12 = rs_tMSSqlInput_12
							.getMetaData();
					int colQtyInRs_tMSSqlInput_12 = rsmd_tMSSqlInput_12
							.getColumnCount();

					String tmpContent_tMSSqlInput_12 = null;

					while (rs_tMSSqlInput_12.next()) {
						nb_line_tMSSqlInput_12++;

						if (colQtyInRs_tMSSqlInput_12 < 1) {
							row31.NUMSTR = null;
						} else {

							if (rs_tMSSqlInput_12.getObject(1) != null) {
								row31.NUMSTR = rs_tMSSqlInput_12.getInt(1);
							} else {
								row31.NUMSTR = null;
							}
						}

						/**
						 * [tMSSqlInput_12 begin ] stop
						 */

						/**
						 * [tMSSqlInput_12 main ] start
						 */

						currentComponent = "tMSSqlInput_12";

						tos_count_tMSSqlInput_12++;

						/**
						 * [tMSSqlInput_12 main ] stop
						 */

						/**
						 * [tAdvancedHash_row31 main ] start
						 */

						currentComponent = "tAdvancedHash_row31";

						row31Struct row31_HashRow = new row31Struct();

						row31_HashRow.NUMSTR = row31.NUMSTR;

						tHash_Lookup_row31.put(row31_HashRow);

						tos_count_tAdvancedHash_row31++;

						/**
						 * [tAdvancedHash_row31 main ] stop
						 */

						/**
						 * [tMSSqlInput_12 end ] start
						 */

						currentComponent = "tMSSqlInput_12";

					}
				} finally {
					stmt_tMSSqlInput_12.close();

				}
				globalMap.put("tMSSqlInput_12_NB_LINE", nb_line_tMSSqlInput_12);

				ok_Hash.put("tMSSqlInput_12", true);
				end_Hash.put("tMSSqlInput_12", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row31 end ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				tHash_Lookup_row31.endPut();

				ok_Hash.put("tAdvancedHash_row31", true);
				end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row31 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlInput_12 finally ] start
				 */

				currentComponent = "tMSSqlInput_12";

				/**
				 * [tMSSqlInput_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row31 finally ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				/**
				 * [tAdvancedHash_row31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public Integer HDRCOUNT;

		public Integer getHDRCOUNT() {
			return this.HDRCOUNT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.HDRCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HDRCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HDRCOUNT=" + String.valueOf(HDRCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row37Struct row37 = new row37Struct();

				/**
				 * [tAdvancedHash_row37 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row37", false);
				start_Hash.put("tAdvancedHash_row37",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row37";

				int tos_count_tAdvancedHash_row37 = 0;

				// connection name:row37
				// source node:tMSSqlInput_14 - inputs:() outputs:(row37,row37)
				// | target node:tAdvancedHash_row37 - inputs:(row37) outputs:()
				// linked node: tMap_1 -
				// inputs:(row6,row10,row11,row31,row37,row38)
				// outputs:(VALIDDATA,BLANKEXTERNORDERKEY,INVALIDSKU,INVALIDCONSIGNEE,INVALIDWHSEID)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row37 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row37Struct> getLookup(matchingModeEnum_row37);

				globalMap.put("tHash_Lookup_row37", tHash_Lookup_row37);

				/**
				 * [tAdvancedHash_row37 begin ] stop
				 */

				/**
				 * [tMSSqlInput_14 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_14", false);
				start_Hash.put("tMSSqlInput_14", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_14";

				int tos_count_tMSSqlInput_14 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_14 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_14 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_14 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_14,
						talendToDBArray_tMSSqlInput_14);
				int nb_line_tMSSqlInput_14 = 0;
				java.sql.Connection conn_tMSSqlInput_14 = null;
				conn_tMSSqlInput_14 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				String dbschema_tMSSqlInput_14 = (String) globalMap
						.get("dbschema_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlInput_14 = conn_tMSSqlInput_14
						.createStatement();

				String dbquery_tMSSqlInput_14 = " SELECT COUNT(1) HDRCOUNT FROM "
						+ (String) globalMap.get("WHSE1")
						+ ".ORDERS \nWHERE EXTERNORDERKEY = '"
						+ (String) globalMap.get("EXTKEY1") + "'";

				globalMap.put("tMSSqlInput_14_QUERY", dbquery_tMSSqlInput_14);

				java.sql.ResultSet rs_tMSSqlInput_14 = null;
				try {
					rs_tMSSqlInput_14 = stmt_tMSSqlInput_14
							.executeQuery(dbquery_tMSSqlInput_14);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_14 = rs_tMSSqlInput_14
							.getMetaData();
					int colQtyInRs_tMSSqlInput_14 = rsmd_tMSSqlInput_14
							.getColumnCount();

					String tmpContent_tMSSqlInput_14 = null;

					while (rs_tMSSqlInput_14.next()) {
						nb_line_tMSSqlInput_14++;

						if (colQtyInRs_tMSSqlInput_14 < 1) {
							row37.HDRCOUNT = null;
						} else {

							if (rs_tMSSqlInput_14.getObject(1) != null) {
								row37.HDRCOUNT = rs_tMSSqlInput_14.getInt(1);
							} else {
								row37.HDRCOUNT = null;
							}
						}

						/**
						 * [tMSSqlInput_14 begin ] stop
						 */

						/**
						 * [tMSSqlInput_14 main ] start
						 */

						currentComponent = "tMSSqlInput_14";

						tos_count_tMSSqlInput_14++;

						/**
						 * [tMSSqlInput_14 main ] stop
						 */

						/**
						 * [tAdvancedHash_row37 main ] start
						 */

						currentComponent = "tAdvancedHash_row37";

						row37Struct row37_HashRow = new row37Struct();

						row37_HashRow.HDRCOUNT = row37.HDRCOUNT;

						tHash_Lookup_row37.put(row37_HashRow);

						tos_count_tAdvancedHash_row37++;

						/**
						 * [tAdvancedHash_row37 main ] stop
						 */

						/**
						 * [tMSSqlInput_14 end ] start
						 */

						currentComponent = "tMSSqlInput_14";

					}
				} finally {
					stmt_tMSSqlInput_14.close();

				}
				globalMap.put("tMSSqlInput_14_NB_LINE", nb_line_tMSSqlInput_14);

				ok_Hash.put("tMSSqlInput_14", true);
				end_Hash.put("tMSSqlInput_14", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row37 end ] start
				 */

				currentComponent = "tAdvancedHash_row37";

				tHash_Lookup_row37.endPut();

				ok_Hash.put("tAdvancedHash_row37", true);
				end_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row37 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlInput_14 finally ] start
				 */

				currentComponent = "tMSSqlInput_14";

				/**
				 * [tMSSqlInput_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row37 finally ] start
				 */

				currentComponent = "tAdvancedHash_row37";

				/**
				 * [tAdvancedHash_row37 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_14_SUBPROCESS_STATE", 1);
	}

	public static class row38Struct implements
			routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public Integer DTLCOUNT;

		public Integer getDTLCOUNT() {
			return this.DTLCOUNT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.DTLCOUNT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.DTLCOUNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DTLCOUNT=" + String.valueOf(DTLCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row38Struct row38 = new row38Struct();

				/**
				 * [tAdvancedHash_row38 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row38", false);
				start_Hash.put("tAdvancedHash_row38",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row38";

				int tos_count_tAdvancedHash_row38 = 0;

				// connection name:row38
				// source node:tMSSqlInput_15 - inputs:() outputs:(row38,row38)
				// | target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
				// linked node: tMap_1 -
				// inputs:(row6,row10,row11,row31,row37,row38)
				// outputs:(VALIDDATA,BLANKEXTERNORDERKEY,INVALIDSKU,INVALIDCONSIGNEE,INVALIDWHSEID)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row38Struct> getLookup(matchingModeEnum_row38);

				globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);

				/**
				 * [tAdvancedHash_row38 begin ] stop
				 */

				/**
				 * [tMSSqlInput_15 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_15", false);
				start_Hash.put("tMSSqlInput_15", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_15";

				int tos_count_tMSSqlInput_15 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_15 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_15 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_15 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_15,
						talendToDBArray_tMSSqlInput_15);
				int nb_line_tMSSqlInput_15 = 0;
				java.sql.Connection conn_tMSSqlInput_15 = null;
				conn_tMSSqlInput_15 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				String dbschema_tMSSqlInput_15 = (String) globalMap
						.get("dbschema_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlInput_15 = conn_tMSSqlInput_15
						.createStatement();

				String dbquery_tMSSqlInput_15 = "SELECT count(1) DTLCOUNT FROM "
						+ (String) globalMap.get("WHSE2")
						+ ".ORDERDETAIL WHERE EXTERNORDERKEY = '"
						+ (String) globalMap.get("EXTKEY2")
						+ "' and externlineno ='"
						+ (String) globalMap.get("EXTLINE1") + "'";

				globalMap.put("tMSSqlInput_15_QUERY", dbquery_tMSSqlInput_15);

				java.sql.ResultSet rs_tMSSqlInput_15 = null;
				try {
					rs_tMSSqlInput_15 = stmt_tMSSqlInput_15
							.executeQuery(dbquery_tMSSqlInput_15);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_15 = rs_tMSSqlInput_15
							.getMetaData();
					int colQtyInRs_tMSSqlInput_15 = rsmd_tMSSqlInput_15
							.getColumnCount();

					String tmpContent_tMSSqlInput_15 = null;

					while (rs_tMSSqlInput_15.next()) {
						nb_line_tMSSqlInput_15++;

						if (colQtyInRs_tMSSqlInput_15 < 1) {
							row38.DTLCOUNT = null;
						} else {

							if (rs_tMSSqlInput_15.getObject(1) != null) {
								row38.DTLCOUNT = rs_tMSSqlInput_15.getInt(1);
							} else {
								row38.DTLCOUNT = null;
							}
						}

						/**
						 * [tMSSqlInput_15 begin ] stop
						 */

						/**
						 * [tMSSqlInput_15 main ] start
						 */

						currentComponent = "tMSSqlInput_15";

						tos_count_tMSSqlInput_15++;

						/**
						 * [tMSSqlInput_15 main ] stop
						 */

						/**
						 * [tAdvancedHash_row38 main ] start
						 */

						currentComponent = "tAdvancedHash_row38";

						row38Struct row38_HashRow = new row38Struct();

						row38_HashRow.DTLCOUNT = row38.DTLCOUNT;

						tHash_Lookup_row38.put(row38_HashRow);

						tos_count_tAdvancedHash_row38++;

						/**
						 * [tAdvancedHash_row38 main ] stop
						 */

						/**
						 * [tMSSqlInput_15 end ] start
						 */

						currentComponent = "tMSSqlInput_15";

					}
				} finally {
					stmt_tMSSqlInput_15.close();

				}
				globalMap.put("tMSSqlInput_15_NB_LINE", nb_line_tMSSqlInput_15);

				ok_Hash.put("tMSSqlInput_15", true);
				end_Hash.put("tMSSqlInput_15", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_row38 end ] start
				 */

				currentComponent = "tAdvancedHash_row38";

				tHash_Lookup_row38.endPut();

				ok_Hash.put("tAdvancedHash_row38", true);
				end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row38 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlInput_15 finally ] start
				 */

				currentComponent = "tMSSqlInput_15";

				/**
				 * [tMSSqlInput_15 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row38 finally ] start
				 */

				currentComponent = "tAdvancedHash_row38";

				/**
				 * [tAdvancedHash_row38 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];
		static byte[] commonByteArray_ShipmentOrders_ShipmentOrders_SO_Import_FullJob = new byte[0];

		public Integer numrow;

		public Integer getNumrow() {
			return this.numrow;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ShipmentOrders_ShipmentOrders_SO_Import_FullJob) {

				try {

					int length = 0;

					this.numrow = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.numrow, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numrow=" + String.valueOf(numrow));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tMSSqlInput_5 - inputs:() outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_3 -
				// inputs:(row15,row8,row24,row13,row35,row14,row9,row8_0,row30,row39,row40)
				// outputs:(INSERTHEADER,INSERTDETAIL,HDRTOTALS)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tMSSqlInput_5 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_5", false);
				start_Hash.put("tMSSqlInput_5", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_5";

				int tos_count_tMSSqlInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_5 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_5,
						talendToDBArray_tMSSqlInput_5);
				int nb_line_tMSSqlInput_5 = 0;
				java.sql.Connection conn_tMSSqlInput_5 = null;
				conn_tMSSqlInput_5 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				String dbschema_tMSSqlInput_5 = (String) globalMap
						.get("dbschema_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlInput_5 = conn_tMSSqlInput_5
						.createStatement();

				String dbquery_tMSSqlInput_5 = " SELECT COUNT(1) FROM "
						+ (String) globalMap.get("SCHEMA")
						+ ".ORDERS WHERE EXTERNORDERKEY = '"
						+ (String) globalMap.get("EXTERNORDERKEY") + "'";

				globalMap.put("tMSSqlInput_5_QUERY", dbquery_tMSSqlInput_5);

				java.sql.ResultSet rs_tMSSqlInput_5 = null;
				try {
					rs_tMSSqlInput_5 = stmt_tMSSqlInput_5
							.executeQuery(dbquery_tMSSqlInput_5);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_5 = rs_tMSSqlInput_5
							.getMetaData();
					int colQtyInRs_tMSSqlInput_5 = rsmd_tMSSqlInput_5
							.getColumnCount();

					String tmpContent_tMSSqlInput_5 = null;

					while (rs_tMSSqlInput_5.next()) {
						nb_line_tMSSqlInput_5++;

						if (colQtyInRs_tMSSqlInput_5 < 1) {
							row8.numrow = null;
						} else {

							if (rs_tMSSqlInput_5.getObject(1) != null) {
								row8.numrow = rs_tMSSqlInput_5.getInt(1);
							} else {
								row8.numrow = null;
							}
						}

						/**
						 * [tMSSqlInput_5 begin ] stop
						 */

						/**
						 * [tMSSqlInput_5 main ] start
						 */

						currentComponent = "tMSSqlInput_5";

						tos_count_tMSSqlInput_5++;

						/**
						 * [tMSSqlInput_5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.numrow = row8.numrow;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tMSSqlInput_5 end ] start
						 */

						currentComponent                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                